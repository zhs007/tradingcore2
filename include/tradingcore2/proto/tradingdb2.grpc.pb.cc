// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: tradingdb2.proto

#include "tradingdb2.pb.h"
#include "tradingdb2.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace tradingdb2pb {

static const char* TradingDB2Service_method_names[] = {
  "/tradingdb2pb.TradingDB2Service/updCandles",
  "/tradingdb2pb.TradingDB2Service/getCandles",
  "/tradingdb2pb.TradingDB2Service/updSymbol",
  "/tradingdb2pb.TradingDB2Service/getSymbol",
};

std::unique_ptr< TradingDB2Service::Stub> TradingDB2Service::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< TradingDB2Service::Stub> stub(new TradingDB2Service::Stub(channel));
  return stub;
}

TradingDB2Service::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_updCandles_(TradingDB2Service_method_names[0], ::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_getCandles_(TradingDB2Service_method_names[1], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_updSymbol_(TradingDB2Service_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getSymbol_(TradingDB2Service_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::ClientWriter< ::tradingdb2pb::RequestUpdCandles>* TradingDB2Service::Stub::updCandlesRaw(::grpc::ClientContext* context, ::tradingdb2pb::ReplyUpdCandles* response) {
  return ::grpc_impl::internal::ClientWriterFactory< ::tradingdb2pb::RequestUpdCandles>::Create(channel_.get(), rpcmethod_updCandles_, context, response);
}

void TradingDB2Service::Stub::experimental_async::updCandles(::grpc::ClientContext* context, ::tradingdb2pb::ReplyUpdCandles* response, ::grpc::experimental::ClientWriteReactor< ::tradingdb2pb::RequestUpdCandles>* reactor) {
  ::grpc_impl::internal::ClientCallbackWriterFactory< ::tradingdb2pb::RequestUpdCandles>::Create(stub_->channel_.get(), stub_->rpcmethod_updCandles_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::tradingdb2pb::RequestUpdCandles>* TradingDB2Service::Stub::AsyncupdCandlesRaw(::grpc::ClientContext* context, ::tradingdb2pb::ReplyUpdCandles* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncWriterFactory< ::tradingdb2pb::RequestUpdCandles>::Create(channel_.get(), cq, rpcmethod_updCandles_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::tradingdb2pb::RequestUpdCandles>* TradingDB2Service::Stub::PrepareAsyncupdCandlesRaw(::grpc::ClientContext* context, ::tradingdb2pb::ReplyUpdCandles* response, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncWriterFactory< ::tradingdb2pb::RequestUpdCandles>::Create(channel_.get(), cq, rpcmethod_updCandles_, context, response, false, nullptr);
}

::grpc::ClientReader< ::tradingdb2pb::ReplyGetCandles>* TradingDB2Service::Stub::getCandlesRaw(::grpc::ClientContext* context, const ::tradingdb2pb::RequestGetCandles& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::tradingdb2pb::ReplyGetCandles>::Create(channel_.get(), rpcmethod_getCandles_, context, request);
}

void TradingDB2Service::Stub::experimental_async::getCandles(::grpc::ClientContext* context, ::tradingdb2pb::RequestGetCandles* request, ::grpc::experimental::ClientReadReactor< ::tradingdb2pb::ReplyGetCandles>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::tradingdb2pb::ReplyGetCandles>::Create(stub_->channel_.get(), stub_->rpcmethod_getCandles_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::tradingdb2pb::ReplyGetCandles>* TradingDB2Service::Stub::AsyncgetCandlesRaw(::grpc::ClientContext* context, const ::tradingdb2pb::RequestGetCandles& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::tradingdb2pb::ReplyGetCandles>::Create(channel_.get(), cq, rpcmethod_getCandles_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::tradingdb2pb::ReplyGetCandles>* TradingDB2Service::Stub::PrepareAsyncgetCandlesRaw(::grpc::ClientContext* context, const ::tradingdb2pb::RequestGetCandles& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::tradingdb2pb::ReplyGetCandles>::Create(channel_.get(), cq, rpcmethod_getCandles_, context, request, false, nullptr);
}

::grpc::Status TradingDB2Service::Stub::updSymbol(::grpc::ClientContext* context, const ::tradingdb2pb::RequestUpdSymbol& request, ::tradingdb2pb::ReplyUpdSymbol* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_updSymbol_, context, request, response);
}

void TradingDB2Service::Stub::experimental_async::updSymbol(::grpc::ClientContext* context, const ::tradingdb2pb::RequestUpdSymbol* request, ::tradingdb2pb::ReplyUpdSymbol* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_updSymbol_, context, request, response, std::move(f));
}

void TradingDB2Service::Stub::experimental_async::updSymbol(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tradingdb2pb::ReplyUpdSymbol* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_updSymbol_, context, request, response, std::move(f));
}

void TradingDB2Service::Stub::experimental_async::updSymbol(::grpc::ClientContext* context, const ::tradingdb2pb::RequestUpdSymbol* request, ::tradingdb2pb::ReplyUpdSymbol* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_updSymbol_, context, request, response, reactor);
}

void TradingDB2Service::Stub::experimental_async::updSymbol(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tradingdb2pb::ReplyUpdSymbol* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_updSymbol_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tradingdb2pb::ReplyUpdSymbol>* TradingDB2Service::Stub::AsyncupdSymbolRaw(::grpc::ClientContext* context, const ::tradingdb2pb::RequestUpdSymbol& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::tradingdb2pb::ReplyUpdSymbol>::Create(channel_.get(), cq, rpcmethod_updSymbol_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::tradingdb2pb::ReplyUpdSymbol>* TradingDB2Service::Stub::PrepareAsyncupdSymbolRaw(::grpc::ClientContext* context, const ::tradingdb2pb::RequestUpdSymbol& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::tradingdb2pb::ReplyUpdSymbol>::Create(channel_.get(), cq, rpcmethod_updSymbol_, context, request, false);
}

::grpc::Status TradingDB2Service::Stub::getSymbol(::grpc::ClientContext* context, const ::tradingdb2pb::RequestGetSymbol& request, ::tradingdb2pb::ReplyGetSymbol* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_getSymbol_, context, request, response);
}

void TradingDB2Service::Stub::experimental_async::getSymbol(::grpc::ClientContext* context, const ::tradingdb2pb::RequestGetSymbol* request, ::tradingdb2pb::ReplyGetSymbol* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_getSymbol_, context, request, response, std::move(f));
}

void TradingDB2Service::Stub::experimental_async::getSymbol(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tradingdb2pb::ReplyGetSymbol* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_getSymbol_, context, request, response, std::move(f));
}

void TradingDB2Service::Stub::experimental_async::getSymbol(::grpc::ClientContext* context, const ::tradingdb2pb::RequestGetSymbol* request, ::tradingdb2pb::ReplyGetSymbol* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_getSymbol_, context, request, response, reactor);
}

void TradingDB2Service::Stub::experimental_async::getSymbol(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tradingdb2pb::ReplyGetSymbol* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_getSymbol_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tradingdb2pb::ReplyGetSymbol>* TradingDB2Service::Stub::AsyncgetSymbolRaw(::grpc::ClientContext* context, const ::tradingdb2pb::RequestGetSymbol& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::tradingdb2pb::ReplyGetSymbol>::Create(channel_.get(), cq, rpcmethod_getSymbol_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::tradingdb2pb::ReplyGetSymbol>* TradingDB2Service::Stub::PrepareAsyncgetSymbolRaw(::grpc::ClientContext* context, const ::tradingdb2pb::RequestGetSymbol& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::tradingdb2pb::ReplyGetSymbol>::Create(channel_.get(), cq, rpcmethod_getSymbol_, context, request, false);
}

TradingDB2Service::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TradingDB2Service_method_names[0],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< TradingDB2Service::Service, ::tradingdb2pb::RequestUpdCandles, ::tradingdb2pb::ReplyUpdCandles>(
          [](TradingDB2Service::Service* service,
             ::grpc_impl::ServerContext* ctx,
             ::grpc_impl::ServerReader<::tradingdb2pb::RequestUpdCandles>* reader,
             ::tradingdb2pb::ReplyUpdCandles* resp) {
               return service->updCandles(ctx, reader, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TradingDB2Service_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< TradingDB2Service::Service, ::tradingdb2pb::RequestGetCandles, ::tradingdb2pb::ReplyGetCandles>(
          [](TradingDB2Service::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::tradingdb2pb::RequestGetCandles* req,
             ::grpc_impl::ServerWriter<::tradingdb2pb::ReplyGetCandles>* writer) {
               return service->getCandles(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TradingDB2Service_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TradingDB2Service::Service, ::tradingdb2pb::RequestUpdSymbol, ::tradingdb2pb::ReplyUpdSymbol>(
          [](TradingDB2Service::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::tradingdb2pb::RequestUpdSymbol* req,
             ::tradingdb2pb::ReplyUpdSymbol* resp) {
               return service->updSymbol(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TradingDB2Service_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TradingDB2Service::Service, ::tradingdb2pb::RequestGetSymbol, ::tradingdb2pb::ReplyGetSymbol>(
          [](TradingDB2Service::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::tradingdb2pb::RequestGetSymbol* req,
             ::tradingdb2pb::ReplyGetSymbol* resp) {
               return service->getSymbol(ctx, req, resp);
             }, this)));
}

TradingDB2Service::Service::~Service() {
}

::grpc::Status TradingDB2Service::Service::updCandles(::grpc::ServerContext* context, ::grpc::ServerReader< ::tradingdb2pb::RequestUpdCandles>* reader, ::tradingdb2pb::ReplyUpdCandles* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TradingDB2Service::Service::getCandles(::grpc::ServerContext* context, const ::tradingdb2pb::RequestGetCandles* request, ::grpc::ServerWriter< ::tradingdb2pb::ReplyGetCandles>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TradingDB2Service::Service::updSymbol(::grpc::ServerContext* context, const ::tradingdb2pb::RequestUpdSymbol* request, ::tradingdb2pb::ReplyUpdSymbol* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TradingDB2Service::Service::getSymbol(::grpc::ServerContext* context, const ::tradingdb2pb::RequestGetSymbol* request, ::tradingdb2pb::ReplyGetSymbol* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace tradingdb2pb


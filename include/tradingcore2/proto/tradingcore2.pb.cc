// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tradingcore2.proto

#include "tradingcore2.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_tradingcore2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BasicReplyData_tradingcore2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tradingcore2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BasicRequestData_tradingcore2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tradingcore2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TradeData_tradingcore2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tradingcore2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TrainData_tradingcore2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tradingcore2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TrainNodeResult_tradingcore2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tradingcore2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TrainResult_tradingcore2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tradingcore2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrainSingleIndicator2Ex_tradingcore2_2eproto;
namespace tradingcore2pb {
class BasicRequestDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BasicRequestData> _instance;
} _BasicRequestData_default_instance_;
class BasicReplyDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BasicReplyData> _instance;
} _BasicReplyData_default_instance_;
class TradeDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TradeData> _instance;
} _TradeData_default_instance_;
class TrainSingleIndicator2ExDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrainSingleIndicator2Ex> _instance;
} _TrainSingleIndicator2Ex_default_instance_;
class TrainDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrainData> _instance;
  const ::tradingcore2pb::TrainSingleIndicator2Ex* si2_;
} _TrainData_default_instance_;
class TrainNodeResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrainNodeResult> _instance;
} _TrainNodeResult_default_instance_;
class TrainResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrainResult> _instance;
} _TrainResult_default_instance_;
class RequestServerInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RequestServerInfo> _instance;
} _RequestServerInfo_default_instance_;
class ReplyServerInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReplyServerInfo> _instance;
} _ReplyServerInfo_default_instance_;
class RequestTrainDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RequestTrain> _instance;
} _RequestTrain_default_instance_;
class ReplyTrainDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReplyTrain> _instance;
} _ReplyTrain_default_instance_;
}  // namespace tradingcore2pb
static void InitDefaultsscc_info_BasicReplyData_tradingcore2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tradingcore2pb::_BasicReplyData_default_instance_;
    new (ptr) ::tradingcore2pb::BasicReplyData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tradingcore2pb::BasicReplyData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BasicReplyData_tradingcore2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BasicReplyData_tradingcore2_2eproto}, {}};

static void InitDefaultsscc_info_BasicRequestData_tradingcore2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tradingcore2pb::_BasicRequestData_default_instance_;
    new (ptr) ::tradingcore2pb::BasicRequestData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tradingcore2pb::BasicRequestData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BasicRequestData_tradingcore2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BasicRequestData_tradingcore2_2eproto}, {}};

static void InitDefaultsscc_info_ReplyServerInfo_tradingcore2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tradingcore2pb::_ReplyServerInfo_default_instance_;
    new (ptr) ::tradingcore2pb::ReplyServerInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tradingcore2pb::ReplyServerInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReplyServerInfo_tradingcore2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ReplyServerInfo_tradingcore2_2eproto}, {
      &scc_info_BasicReplyData_tradingcore2_2eproto.base,}};

static void InitDefaultsscc_info_ReplyTrain_tradingcore2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tradingcore2pb::_ReplyTrain_default_instance_;
    new (ptr) ::tradingcore2pb::ReplyTrain();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tradingcore2pb::ReplyTrain::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ReplyTrain_tradingcore2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ReplyTrain_tradingcore2_2eproto}, {
      &scc_info_BasicReplyData_tradingcore2_2eproto.base,
      &scc_info_TrainResult_tradingcore2_2eproto.base,}};

static void InitDefaultsscc_info_RequestServerInfo_tradingcore2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tradingcore2pb::_RequestServerInfo_default_instance_;
    new (ptr) ::tradingcore2pb::RequestServerInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tradingcore2pb::RequestServerInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RequestServerInfo_tradingcore2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RequestServerInfo_tradingcore2_2eproto}, {
      &scc_info_BasicRequestData_tradingcore2_2eproto.base,}};

static void InitDefaultsscc_info_RequestTrain_tradingcore2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tradingcore2pb::_RequestTrain_default_instance_;
    new (ptr) ::tradingcore2pb::RequestTrain();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tradingcore2pb::RequestTrain::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RequestTrain_tradingcore2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_RequestTrain_tradingcore2_2eproto}, {
      &scc_info_BasicRequestData_tradingcore2_2eproto.base,
      &scc_info_TrainData_tradingcore2_2eproto.base,}};

static void InitDefaultsscc_info_TradeData_tradingcore2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tradingcore2pb::_TradeData_default_instance_;
    new (ptr) ::tradingcore2pb::TradeData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tradingcore2pb::TradeData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TradeData_tradingcore2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TradeData_tradingcore2_2eproto}, {}};

static void InitDefaultsscc_info_TrainData_tradingcore2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tradingcore2pb::_TrainData_default_instance_;
    new (ptr) ::tradingcore2pb::TrainData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tradingcore2pb::TrainData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TrainData_tradingcore2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TrainData_tradingcore2_2eproto}, {
      &scc_info_TrainSingleIndicator2Ex_tradingcore2_2eproto.base,}};

static void InitDefaultsscc_info_TrainNodeResult_tradingcore2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tradingcore2pb::_TrainNodeResult_default_instance_;
    new (ptr) ::tradingcore2pb::TrainNodeResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tradingcore2pb::TrainNodeResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TrainNodeResult_tradingcore2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TrainNodeResult_tradingcore2_2eproto}, {
      &scc_info_TradeData_tradingcore2_2eproto.base,}};

static void InitDefaultsscc_info_TrainResult_tradingcore2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tradingcore2pb::_TrainResult_default_instance_;
    new (ptr) ::tradingcore2pb::TrainResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tradingcore2pb::TrainResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TrainResult_tradingcore2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TrainResult_tradingcore2_2eproto}, {
      &scc_info_TrainNodeResult_tradingcore2_2eproto.base,}};

static void InitDefaultsscc_info_TrainSingleIndicator2Ex_tradingcore2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tradingcore2pb::_TrainSingleIndicator2Ex_default_instance_;
    new (ptr) ::tradingcore2pb::TrainSingleIndicator2Ex();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tradingcore2pb::TrainSingleIndicator2Ex::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrainSingleIndicator2Ex_tradingcore2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TrainSingleIndicator2Ex_tradingcore2_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_tradingcore2_2eproto[11];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_tradingcore2_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_tradingcore2_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_tradingcore2_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tradingcore2pb::BasicRequestData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tradingcore2pb::BasicRequestData, token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tradingcore2pb::BasicReplyData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tradingcore2pb::BasicReplyData, errcode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tradingcore2pb::TradeData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tradingcore2pb::TradeData, tradetype_),
  PROTOBUF_FIELD_OFFSET(::tradingcore2pb::TradeData, assetsname_),
  PROTOBUF_FIELD_OFFSET(::tradingcore2pb::TradeData, money_),
  PROTOBUF_FIELD_OFFSET(::tradingcore2pb::TradeData, volume_),
  PROTOBUF_FIELD_OFFSET(::tradingcore2pb::TradeData, price_),
  PROTOBUF_FIELD_OFFSET(::tradingcore2pb::TradeData, fee_),
  PROTOBUF_FIELD_OFFSET(::tradingcore2pb::TradeData, ts_),
  PROTOBUF_FIELD_OFFSET(::tradingcore2pb::TradeData, offmoney_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tradingcore2pb::TrainSingleIndicator2Ex, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tradingcore2pb::TrainSingleIndicator2Ex, indicatorname_),
  PROTOBUF_FIELD_OFFSET(::tradingcore2pb::TrainSingleIndicator2Ex, avgtimes_),
  PROTOBUF_FIELD_OFFSET(::tradingcore2pb::TrainSingleIndicator2Ex, off0_),
  PROTOBUF_FIELD_OFFSET(::tradingcore2pb::TrainSingleIndicator2Ex, off1_),
  PROTOBUF_FIELD_OFFSET(::tradingcore2pb::TrainSingleIndicator2Ex, off2_),
  PROTOBUF_FIELD_OFFSET(::tradingcore2pb::TrainSingleIndicator2Ex, maxoff2_),
  PROTOBUF_FIELD_OFFSET(::tradingcore2pb::TrainSingleIndicator2Ex, minval_),
  PROTOBUF_FIELD_OFFSET(::tradingcore2pb::TrainSingleIndicator2Ex, maxval_),
  PROTOBUF_FIELD_OFFSET(::tradingcore2pb::TrainSingleIndicator2Ex, cv0_),
  PROTOBUF_FIELD_OFFSET(::tradingcore2pb::TrainSingleIndicator2Ex, cv0off_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tradingcore2pb::TrainData, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::tradingcore2pb::TrainData, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tradingcore2pb::TrainData, trainid_),
  PROTOBUF_FIELD_OFFSET(::tradingcore2pb::TrainData, exchangename_),
  PROTOBUF_FIELD_OFFSET(::tradingcore2pb::TrainData, assetsname_),
  PROTOBUF_FIELD_OFFSET(::tradingcore2pb::TrainData, strategyname_),
  PROTOBUF_FIELD_OFFSET(::tradingcore2pb::TrainData, strparam_),
  PROTOBUF_FIELD_OFFSET(::tradingcore2pb::TrainData, outputpath_),
  PROTOBUF_FIELD_OFFSET(::tradingcore2pb::TrainData, invest_),
  PROTOBUF_FIELD_OFFSET(::tradingcore2pb::TrainData, minvalidreturn_),
  offsetof(::tradingcore2pb::TrainDataDefaultTypeInternal, si2_),
  PROTOBUF_FIELD_OFFSET(::tradingcore2pb::TrainData, trainParam_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tradingcore2pb::TrainNodeResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tradingcore2pb::TrainNodeResult, maxdrawdown_),
  PROTOBUF_FIELD_OFFSET(::tradingcore2pb::TrainNodeResult, sharpe_),
  PROTOBUF_FIELD_OFFSET(::tradingcore2pb::TrainNodeResult, annualizedreturns_),
  PROTOBUF_FIELD_OFFSET(::tradingcore2pb::TrainNodeResult, annualizedvolatility_),
  PROTOBUF_FIELD_OFFSET(::tradingcore2pb::TrainNodeResult, totalreturns_),
  PROTOBUF_FIELD_OFFSET(::tradingcore2pb::TrainNodeResult, tradingtimes_),
  PROTOBUF_FIELD_OFFSET(::tradingcore2pb::TrainNodeResult, failtimes_),
  PROTOBUF_FIELD_OFFSET(::tradingcore2pb::TrainNodeResult, stoplosstimes_),
  PROTOBUF_FIELD_OFFSET(::tradingcore2pb::TrainNodeResult, winrate_),
  PROTOBUF_FIELD_OFFSET(::tradingcore2pb::TrainNodeResult, name_),
  PROTOBUF_FIELD_OFFSET(::tradingcore2pb::TrainNodeResult, history_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tradingcore2pb::TrainResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tradingcore2pb::TrainResult, trainid_),
  PROTOBUF_FIELD_OFFSET(::tradingcore2pb::TrainResult, exchangename_),
  PROTOBUF_FIELD_OFFSET(::tradingcore2pb::TrainResult, assetsname_),
  PROTOBUF_FIELD_OFFSET(::tradingcore2pb::TrainResult, strategyname_),
  PROTOBUF_FIELD_OFFSET(::tradingcore2pb::TrainResult, strparam_),
  PROTOBUF_FIELD_OFFSET(::tradingcore2pb::TrainResult, errcode_),
  PROTOBUF_FIELD_OFFSET(::tradingcore2pb::TrainResult, nodes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tradingcore2pb::RequestServerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tradingcore2pb::RequestServerInfo, basicrequest_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tradingcore2pb::ReplyServerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tradingcore2pb::ReplyServerInfo, basicreply_),
  PROTOBUF_FIELD_OFFSET(::tradingcore2pb::ReplyServerInfo, maxtasks_),
  PROTOBUF_FIELD_OFFSET(::tradingcore2pb::ReplyServerInfo, curtasks_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tradingcore2pb::RequestTrain, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tradingcore2pb::RequestTrain, basicrequest_),
  PROTOBUF_FIELD_OFFSET(::tradingcore2pb::RequestTrain, train_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tradingcore2pb::ReplyTrain, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tradingcore2pb::ReplyTrain, basicreply_),
  PROTOBUF_FIELD_OFFSET(::tradingcore2pb::ReplyTrain, train_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::tradingcore2pb::BasicRequestData)},
  { 6, -1, sizeof(::tradingcore2pb::BasicReplyData)},
  { 12, -1, sizeof(::tradingcore2pb::TradeData)},
  { 25, -1, sizeof(::tradingcore2pb::TrainSingleIndicator2Ex)},
  { 40, -1, sizeof(::tradingcore2pb::TrainData)},
  { 55, -1, sizeof(::tradingcore2pb::TrainNodeResult)},
  { 71, -1, sizeof(::tradingcore2pb::TrainResult)},
  { 83, -1, sizeof(::tradingcore2pb::RequestServerInfo)},
  { 89, -1, sizeof(::tradingcore2pb::ReplyServerInfo)},
  { 97, -1, sizeof(::tradingcore2pb::RequestTrain)},
  { 104, -1, sizeof(::tradingcore2pb::ReplyTrain)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tradingcore2pb::_BasicRequestData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tradingcore2pb::_BasicReplyData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tradingcore2pb::_TradeData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tradingcore2pb::_TrainSingleIndicator2Ex_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tradingcore2pb::_TrainData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tradingcore2pb::_TrainNodeResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tradingcore2pb::_TrainResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tradingcore2pb::_RequestServerInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tradingcore2pb::_ReplyServerInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tradingcore2pb::_RequestTrain_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tradingcore2pb::_ReplyTrain_default_instance_),
};

const char descriptor_table_protodef_tradingcore2_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022tradingcore2.proto\022\016tradingcore2pb\"!\n\020"
  "BasicRequestData\022\r\n\005token\030\001 \001(\t\"<\n\016Basic"
  "ReplyData\022*\n\007errCode\030\001 \001(\0162\031.tradingcore"
  "2pb.ErrorCode\"\246\001\n\tTradeData\022,\n\ttradeType"
  "\030\001 \001(\0162\031.tradingcore2pb.TradeType\022\022\n\nass"
  "etsName\030\002 \001(\t\022\r\n\005money\030\003 \001(\002\022\016\n\006volume\030\004"
  " \001(\002\022\r\n\005price\030\005 \001(\002\022\013\n\003fee\030\006 \001(\002\022\n\n\002ts\030\007"
  " \001(\003\022\020\n\010offMoney\030\010 \001(\002\"\272\001\n\027TrainSingleIn"
  "dicator2Ex\022\025\n\rindicatorName\030\001 \001(\t\022\020\n\010avg"
  "times\030\002 \001(\005\022\014\n\004off0\030\003 \001(\002\022\014\n\004off1\030\004 \001(\002\022"
  "\014\n\004off2\030\005 \001(\002\022\017\n\007maxoff2\030\006 \001(\002\022\016\n\006minval"
  "\030\007 \001(\002\022\016\n\006maxval\030\010 \001(\002\022\013\n\003cv0\030\t \001(\002\022\016\n\006c"
  "v0off\030\n \001(\002\"\360\001\n\tTrainData\022\017\n\007trainID\030\001 \001"
  "(\003\022\024\n\014exchangeName\030\002 \001(\t\022\022\n\nassetsName\030\003"
  " \001(\t\022\024\n\014strategyName\030\004 \001(\t\022\020\n\010strParam\030\005"
  " \001(\t\022\022\n\noutputPath\030\006 \001(\t\022\016\n\006invest\030\007 \001(\002"
  "\022\026\n\016minValidReturn\030\010 \001(\002\0226\n\003si2\030d \001(\0132\'."
  "tradingcore2pb.TrainSingleIndicator2ExH\000"
  "B\014\n\ntrainParam\"\220\002\n\017TrainNodeResult\022\023\n\013ma"
  "xDrawdown\030\001 \001(\002\022\016\n\006sharpe\030\002 \001(\002\022\031\n\021annua"
  "lizedReturns\030\003 \001(\002\022\034\n\024annualizedVolatili"
  "ty\030\004 \001(\002\022\024\n\014totalReturns\030\005 \001(\002\022\024\n\014tradin"
  "gTimes\030\006 \001(\005\022\021\n\tfailTimes\030\007 \001(\005\022\025\n\rstopl"
  "ossTimes\030\010 \001(\005\022\017\n\007winRate\030\t \001(\002\022\014\n\004name\030"
  "\n \001(\t\022*\n\007history\030\013 \003(\0132\031.tradingcore2pb."
  "TradeData\"\314\001\n\013TrainResult\022\017\n\007trainID\030\001 \001"
  "(\003\022\024\n\014exchangeName\030\002 \001(\t\022\022\n\nassetsName\030\003"
  " \001(\t\022\024\n\014strategyName\030\004 \001(\t\022\020\n\010strParam\030\005"
  " \001(\t\022*\n\007errCode\030\006 \001(\0162\031.tradingcore2pb.E"
  "rrorCode\022.\n\005nodes\030\007 \003(\0132\037.tradingcore2pb"
  ".TrainNodeResult\"K\n\021RequestServerInfo\0226\n"
  "\014basicRequest\030\001 \001(\0132 .tradingcore2pb.Bas"
  "icRequestData\"i\n\017ReplyServerInfo\0222\n\nbasi"
  "cReply\030\001 \001(\0132\036.tradingcore2pb.BasicReply"
  "Data\022\020\n\010maxTasks\030\002 \001(\005\022\020\n\010curTasks\030\003 \001(\005"
  "\"p\n\014RequestTrain\0226\n\014basicRequest\030\001 \001(\0132 "
  ".tradingcore2pb.BasicRequestData\022(\n\005trai"
  "n\030\002 \001(\0132\031.tradingcore2pb.TrainData\"l\n\nRe"
  "plyTrain\0222\n\nbasicReply\030\001 \001(\0132\036.tradingco"
  "re2pb.BasicReplyData\022*\n\005train\030\002 \001(\0132\033.tr"
  "adingcore2pb.TrainResult*l\n\tErrorCode\022\r\n"
  "\tERR_NOERR\020\000\022\022\n\016ERR_NOEXCHANGE\020\001\022\024\n\020ERR_"
  "NOTRAINPARAM\020\002\022\020\n\014ERR_NOASSETS\020\003\022\024\n\020ERR_"
  "INVALIDTOKEN\020\004*$\n\tTradeType\022\n\n\006TT_BUY\020\000\022"
  "\013\n\007TT_SELL\020\0012\261\001\n\023TradingCore2Service\022U\n\r"
  "getServerInfo\022!.tradingcore2pb.RequestSe"
  "rverInfo\032\037.tradingcore2pb.ReplyServerInf"
  "o\"\000\022C\n\005train\022\034.tradingcore2pb.RequestTra"
  "in\032\032.tradingcore2pb.ReplyTrain\"\000b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_tradingcore2_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_tradingcore2_2eproto_sccs[11] = {
  &scc_info_BasicReplyData_tradingcore2_2eproto.base,
  &scc_info_BasicRequestData_tradingcore2_2eproto.base,
  &scc_info_ReplyServerInfo_tradingcore2_2eproto.base,
  &scc_info_ReplyTrain_tradingcore2_2eproto.base,
  &scc_info_RequestServerInfo_tradingcore2_2eproto.base,
  &scc_info_RequestTrain_tradingcore2_2eproto.base,
  &scc_info_TradeData_tradingcore2_2eproto.base,
  &scc_info_TrainData_tradingcore2_2eproto.base,
  &scc_info_TrainNodeResult_tradingcore2_2eproto.base,
  &scc_info_TrainResult_tradingcore2_2eproto.base,
  &scc_info_TrainSingleIndicator2Ex_tradingcore2_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_tradingcore2_2eproto_once;
static bool descriptor_table_tradingcore2_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tradingcore2_2eproto = {
  &descriptor_table_tradingcore2_2eproto_initialized, descriptor_table_protodef_tradingcore2_2eproto, "tradingcore2.proto", 1960,
  &descriptor_table_tradingcore2_2eproto_once, descriptor_table_tradingcore2_2eproto_sccs, descriptor_table_tradingcore2_2eproto_deps, 11, 0,
  schemas, file_default_instances, TableStruct_tradingcore2_2eproto::offsets,
  file_level_metadata_tradingcore2_2eproto, 11, file_level_enum_descriptors_tradingcore2_2eproto, file_level_service_descriptors_tradingcore2_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_tradingcore2_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_tradingcore2_2eproto), true);
namespace tradingcore2pb {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ErrorCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tradingcore2_2eproto);
  return file_level_enum_descriptors_tradingcore2_2eproto[0];
}
bool ErrorCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TradeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tradingcore2_2eproto);
  return file_level_enum_descriptors_tradingcore2_2eproto[1];
}
bool TradeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void BasicRequestData::InitAsDefaultInstance() {
}
class BasicRequestData::_Internal {
 public:
};

BasicRequestData::BasicRequestData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tradingcore2pb.BasicRequestData)
}
BasicRequestData::BasicRequestData(const BasicRequestData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  // @@protoc_insertion_point(copy_constructor:tradingcore2pb.BasicRequestData)
}

void BasicRequestData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BasicRequestData_tradingcore2_2eproto.base);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

BasicRequestData::~BasicRequestData() {
  // @@protoc_insertion_point(destructor:tradingcore2pb.BasicRequestData)
  SharedDtor();
}

void BasicRequestData::SharedDtor() {
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BasicRequestData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BasicRequestData& BasicRequestData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BasicRequestData_tradingcore2_2eproto.base);
  return *internal_default_instance();
}


void BasicRequestData::Clear() {
// @@protoc_insertion_point(message_clear_start:tradingcore2pb.BasicRequestData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* BasicRequestData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tradingcore2pb.BasicRequestData.token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BasicRequestData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tradingcore2pb.BasicRequestData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tradingcore2pb.BasicRequestData.token");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tradingcore2pb.BasicRequestData)
  return target;
}

size_t BasicRequestData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tradingcore2pb.BasicRequestData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BasicRequestData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tradingcore2pb.BasicRequestData)
  GOOGLE_DCHECK_NE(&from, this);
  const BasicRequestData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BasicRequestData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tradingcore2pb.BasicRequestData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tradingcore2pb.BasicRequestData)
    MergeFrom(*source);
  }
}

void BasicRequestData::MergeFrom(const BasicRequestData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tradingcore2pb.BasicRequestData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
}

void BasicRequestData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tradingcore2pb.BasicRequestData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BasicRequestData::CopyFrom(const BasicRequestData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tradingcore2pb.BasicRequestData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BasicRequestData::IsInitialized() const {
  return true;
}

void BasicRequestData::InternalSwap(BasicRequestData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata BasicRequestData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BasicReplyData::InitAsDefaultInstance() {
}
class BasicReplyData::_Internal {
 public:
};

BasicReplyData::BasicReplyData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tradingcore2pb.BasicReplyData)
}
BasicReplyData::BasicReplyData(const BasicReplyData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  errcode_ = from.errcode_;
  // @@protoc_insertion_point(copy_constructor:tradingcore2pb.BasicReplyData)
}

void BasicReplyData::SharedCtor() {
  errcode_ = 0;
}

BasicReplyData::~BasicReplyData() {
  // @@protoc_insertion_point(destructor:tradingcore2pb.BasicReplyData)
  SharedDtor();
}

void BasicReplyData::SharedDtor() {
}

void BasicReplyData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BasicReplyData& BasicReplyData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BasicReplyData_tradingcore2_2eproto.base);
  return *internal_default_instance();
}


void BasicReplyData::Clear() {
// @@protoc_insertion_point(message_clear_start:tradingcore2pb.BasicReplyData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  errcode_ = 0;
  _internal_metadata_.Clear();
}

const char* BasicReplyData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .tradingcore2pb.ErrorCode errCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_errcode(static_cast<::tradingcore2pb::ErrorCode>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BasicReplyData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tradingcore2pb.BasicReplyData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tradingcore2pb.ErrorCode errCode = 1;
  if (this->errcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_errcode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tradingcore2pb.BasicReplyData)
  return target;
}

size_t BasicReplyData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tradingcore2pb.BasicReplyData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tradingcore2pb.ErrorCode errCode = 1;
  if (this->errcode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_errcode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BasicReplyData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tradingcore2pb.BasicReplyData)
  GOOGLE_DCHECK_NE(&from, this);
  const BasicReplyData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BasicReplyData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tradingcore2pb.BasicReplyData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tradingcore2pb.BasicReplyData)
    MergeFrom(*source);
  }
}

void BasicReplyData::MergeFrom(const BasicReplyData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tradingcore2pb.BasicReplyData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.errcode() != 0) {
    _internal_set_errcode(from._internal_errcode());
  }
}

void BasicReplyData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tradingcore2pb.BasicReplyData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BasicReplyData::CopyFrom(const BasicReplyData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tradingcore2pb.BasicReplyData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BasicReplyData::IsInitialized() const {
  return true;
}

void BasicReplyData::InternalSwap(BasicReplyData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(errcode_, other->errcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BasicReplyData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TradeData::InitAsDefaultInstance() {
}
class TradeData::_Internal {
 public:
};

TradeData::TradeData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tradingcore2pb.TradeData)
}
TradeData::TradeData(const TradeData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  assetsname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_assetsname().empty()) {
    assetsname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.assetsname_);
  }
  ::memcpy(&tradetype_, &from.tradetype_,
    static_cast<size_t>(reinterpret_cast<char*>(&offmoney_) -
    reinterpret_cast<char*>(&tradetype_)) + sizeof(offmoney_));
  // @@protoc_insertion_point(copy_constructor:tradingcore2pb.TradeData)
}

void TradeData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TradeData_tradingcore2_2eproto.base);
  assetsname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&tradetype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&offmoney_) -
      reinterpret_cast<char*>(&tradetype_)) + sizeof(offmoney_));
}

TradeData::~TradeData() {
  // @@protoc_insertion_point(destructor:tradingcore2pb.TradeData)
  SharedDtor();
}

void TradeData::SharedDtor() {
  assetsname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TradeData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TradeData& TradeData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TradeData_tradingcore2_2eproto.base);
  return *internal_default_instance();
}


void TradeData::Clear() {
// @@protoc_insertion_point(message_clear_start:tradingcore2pb.TradeData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  assetsname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&tradetype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&offmoney_) -
      reinterpret_cast<char*>(&tradetype_)) + sizeof(offmoney_));
  _internal_metadata_.Clear();
}

const char* TradeData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .tradingcore2pb.TradeType tradeType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_tradetype(static_cast<::tradingcore2pb::TradeType>(val));
        } else goto handle_unusual;
        continue;
      // string assetsName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_assetsname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tradingcore2pb.TradeData.assetsName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float money = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          money_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float volume = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          volume_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float price = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float fee = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          fee_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int64 ts = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float offMoney = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          offmoney_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TradeData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tradingcore2pb.TradeData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tradingcore2pb.TradeType tradeType = 1;
  if (this->tradetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_tradetype(), target);
  }

  // string assetsName = 2;
  if (this->assetsname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_assetsname().data(), static_cast<int>(this->_internal_assetsname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tradingcore2pb.TradeData.assetsName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_assetsname(), target);
  }

  // float money = 3;
  if (!(this->money() <= 0 && this->money() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_money(), target);
  }

  // float volume = 4;
  if (!(this->volume() <= 0 && this->volume() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_volume(), target);
  }

  // float price = 5;
  if (!(this->price() <= 0 && this->price() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_price(), target);
  }

  // float fee = 6;
  if (!(this->fee() <= 0 && this->fee() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_fee(), target);
  }

  // int64 ts = 7;
  if (this->ts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_ts(), target);
  }

  // float offMoney = 8;
  if (!(this->offmoney() <= 0 && this->offmoney() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_offmoney(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tradingcore2pb.TradeData)
  return target;
}

size_t TradeData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tradingcore2pb.TradeData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string assetsName = 2;
  if (this->assetsname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_assetsname());
  }

  // .tradingcore2pb.TradeType tradeType = 1;
  if (this->tradetype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_tradetype());
  }

  // float money = 3;
  if (!(this->money() <= 0 && this->money() >= 0)) {
    total_size += 1 + 4;
  }

  // float volume = 4;
  if (!(this->volume() <= 0 && this->volume() >= 0)) {
    total_size += 1 + 4;
  }

  // float price = 5;
  if (!(this->price() <= 0 && this->price() >= 0)) {
    total_size += 1 + 4;
  }

  // int64 ts = 7;
  if (this->ts() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ts());
  }

  // float fee = 6;
  if (!(this->fee() <= 0 && this->fee() >= 0)) {
    total_size += 1 + 4;
  }

  // float offMoney = 8;
  if (!(this->offmoney() <= 0 && this->offmoney() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TradeData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tradingcore2pb.TradeData)
  GOOGLE_DCHECK_NE(&from, this);
  const TradeData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TradeData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tradingcore2pb.TradeData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tradingcore2pb.TradeData)
    MergeFrom(*source);
  }
}

void TradeData::MergeFrom(const TradeData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tradingcore2pb.TradeData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.assetsname().size() > 0) {

    assetsname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.assetsname_);
  }
  if (from.tradetype() != 0) {
    _internal_set_tradetype(from._internal_tradetype());
  }
  if (!(from.money() <= 0 && from.money() >= 0)) {
    _internal_set_money(from._internal_money());
  }
  if (!(from.volume() <= 0 && from.volume() >= 0)) {
    _internal_set_volume(from._internal_volume());
  }
  if (!(from.price() <= 0 && from.price() >= 0)) {
    _internal_set_price(from._internal_price());
  }
  if (from.ts() != 0) {
    _internal_set_ts(from._internal_ts());
  }
  if (!(from.fee() <= 0 && from.fee() >= 0)) {
    _internal_set_fee(from._internal_fee());
  }
  if (!(from.offmoney() <= 0 && from.offmoney() >= 0)) {
    _internal_set_offmoney(from._internal_offmoney());
  }
}

void TradeData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tradingcore2pb.TradeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TradeData::CopyFrom(const TradeData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tradingcore2pb.TradeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradeData::IsInitialized() const {
  return true;
}

void TradeData::InternalSwap(TradeData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  assetsname_.Swap(&other->assetsname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(tradetype_, other->tradetype_);
  swap(money_, other->money_);
  swap(volume_, other->volume_);
  swap(price_, other->price_);
  swap(ts_, other->ts_);
  swap(fee_, other->fee_);
  swap(offmoney_, other->offmoney_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TradeData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrainSingleIndicator2Ex::InitAsDefaultInstance() {
}
class TrainSingleIndicator2Ex::_Internal {
 public:
};

TrainSingleIndicator2Ex::TrainSingleIndicator2Ex()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tradingcore2pb.TrainSingleIndicator2Ex)
}
TrainSingleIndicator2Ex::TrainSingleIndicator2Ex(const TrainSingleIndicator2Ex& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  indicatorname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_indicatorname().empty()) {
    indicatorname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.indicatorname_);
  }
  ::memcpy(&avgtimes_, &from.avgtimes_,
    static_cast<size_t>(reinterpret_cast<char*>(&cv0off_) -
    reinterpret_cast<char*>(&avgtimes_)) + sizeof(cv0off_));
  // @@protoc_insertion_point(copy_constructor:tradingcore2pb.TrainSingleIndicator2Ex)
}

void TrainSingleIndicator2Ex::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrainSingleIndicator2Ex_tradingcore2_2eproto.base);
  indicatorname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&avgtimes_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cv0off_) -
      reinterpret_cast<char*>(&avgtimes_)) + sizeof(cv0off_));
}

TrainSingleIndicator2Ex::~TrainSingleIndicator2Ex() {
  // @@protoc_insertion_point(destructor:tradingcore2pb.TrainSingleIndicator2Ex)
  SharedDtor();
}

void TrainSingleIndicator2Ex::SharedDtor() {
  indicatorname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TrainSingleIndicator2Ex::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrainSingleIndicator2Ex& TrainSingleIndicator2Ex::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrainSingleIndicator2Ex_tradingcore2_2eproto.base);
  return *internal_default_instance();
}


void TrainSingleIndicator2Ex::Clear() {
// @@protoc_insertion_point(message_clear_start:tradingcore2pb.TrainSingleIndicator2Ex)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  indicatorname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&avgtimes_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cv0off_) -
      reinterpret_cast<char*>(&avgtimes_)) + sizeof(cv0off_));
  _internal_metadata_.Clear();
}

const char* TrainSingleIndicator2Ex::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string indicatorName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_indicatorname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tradingcore2pb.TrainSingleIndicator2Ex.indicatorName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 avgtimes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          avgtimes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float off0 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          off0_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float off1 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          off1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float off2 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          off2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float maxoff2 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          maxoff2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float minval = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          minval_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float maxval = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          maxval_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float cv0 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          cv0_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float cv0off = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          cv0off_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrainSingleIndicator2Ex::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tradingcore2pb.TrainSingleIndicator2Ex)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string indicatorName = 1;
  if (this->indicatorname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_indicatorname().data(), static_cast<int>(this->_internal_indicatorname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tradingcore2pb.TrainSingleIndicator2Ex.indicatorName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_indicatorname(), target);
  }

  // int32 avgtimes = 2;
  if (this->avgtimes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_avgtimes(), target);
  }

  // float off0 = 3;
  if (!(this->off0() <= 0 && this->off0() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_off0(), target);
  }

  // float off1 = 4;
  if (!(this->off1() <= 0 && this->off1() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_off1(), target);
  }

  // float off2 = 5;
  if (!(this->off2() <= 0 && this->off2() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_off2(), target);
  }

  // float maxoff2 = 6;
  if (!(this->maxoff2() <= 0 && this->maxoff2() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_maxoff2(), target);
  }

  // float minval = 7;
  if (!(this->minval() <= 0 && this->minval() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_minval(), target);
  }

  // float maxval = 8;
  if (!(this->maxval() <= 0 && this->maxval() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_maxval(), target);
  }

  // float cv0 = 9;
  if (!(this->cv0() <= 0 && this->cv0() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_cv0(), target);
  }

  // float cv0off = 10;
  if (!(this->cv0off() <= 0 && this->cv0off() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_cv0off(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tradingcore2pb.TrainSingleIndicator2Ex)
  return target;
}

size_t TrainSingleIndicator2Ex::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tradingcore2pb.TrainSingleIndicator2Ex)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string indicatorName = 1;
  if (this->indicatorname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_indicatorname());
  }

  // int32 avgtimes = 2;
  if (this->avgtimes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_avgtimes());
  }

  // float off0 = 3;
  if (!(this->off0() <= 0 && this->off0() >= 0)) {
    total_size += 1 + 4;
  }

  // float off1 = 4;
  if (!(this->off1() <= 0 && this->off1() >= 0)) {
    total_size += 1 + 4;
  }

  // float off2 = 5;
  if (!(this->off2() <= 0 && this->off2() >= 0)) {
    total_size += 1 + 4;
  }

  // float maxoff2 = 6;
  if (!(this->maxoff2() <= 0 && this->maxoff2() >= 0)) {
    total_size += 1 + 4;
  }

  // float minval = 7;
  if (!(this->minval() <= 0 && this->minval() >= 0)) {
    total_size += 1 + 4;
  }

  // float maxval = 8;
  if (!(this->maxval() <= 0 && this->maxval() >= 0)) {
    total_size += 1 + 4;
  }

  // float cv0 = 9;
  if (!(this->cv0() <= 0 && this->cv0() >= 0)) {
    total_size += 1 + 4;
  }

  // float cv0off = 10;
  if (!(this->cv0off() <= 0 && this->cv0off() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrainSingleIndicator2Ex::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tradingcore2pb.TrainSingleIndicator2Ex)
  GOOGLE_DCHECK_NE(&from, this);
  const TrainSingleIndicator2Ex* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrainSingleIndicator2Ex>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tradingcore2pb.TrainSingleIndicator2Ex)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tradingcore2pb.TrainSingleIndicator2Ex)
    MergeFrom(*source);
  }
}

void TrainSingleIndicator2Ex::MergeFrom(const TrainSingleIndicator2Ex& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tradingcore2pb.TrainSingleIndicator2Ex)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.indicatorname().size() > 0) {

    indicatorname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.indicatorname_);
  }
  if (from.avgtimes() != 0) {
    _internal_set_avgtimes(from._internal_avgtimes());
  }
  if (!(from.off0() <= 0 && from.off0() >= 0)) {
    _internal_set_off0(from._internal_off0());
  }
  if (!(from.off1() <= 0 && from.off1() >= 0)) {
    _internal_set_off1(from._internal_off1());
  }
  if (!(from.off2() <= 0 && from.off2() >= 0)) {
    _internal_set_off2(from._internal_off2());
  }
  if (!(from.maxoff2() <= 0 && from.maxoff2() >= 0)) {
    _internal_set_maxoff2(from._internal_maxoff2());
  }
  if (!(from.minval() <= 0 && from.minval() >= 0)) {
    _internal_set_minval(from._internal_minval());
  }
  if (!(from.maxval() <= 0 && from.maxval() >= 0)) {
    _internal_set_maxval(from._internal_maxval());
  }
  if (!(from.cv0() <= 0 && from.cv0() >= 0)) {
    _internal_set_cv0(from._internal_cv0());
  }
  if (!(from.cv0off() <= 0 && from.cv0off() >= 0)) {
    _internal_set_cv0off(from._internal_cv0off());
  }
}

void TrainSingleIndicator2Ex::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tradingcore2pb.TrainSingleIndicator2Ex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrainSingleIndicator2Ex::CopyFrom(const TrainSingleIndicator2Ex& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tradingcore2pb.TrainSingleIndicator2Ex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrainSingleIndicator2Ex::IsInitialized() const {
  return true;
}

void TrainSingleIndicator2Ex::InternalSwap(TrainSingleIndicator2Ex* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  indicatorname_.Swap(&other->indicatorname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(avgtimes_, other->avgtimes_);
  swap(off0_, other->off0_);
  swap(off1_, other->off1_);
  swap(off2_, other->off2_);
  swap(maxoff2_, other->maxoff2_);
  swap(minval_, other->minval_);
  swap(maxval_, other->maxval_);
  swap(cv0_, other->cv0_);
  swap(cv0off_, other->cv0off_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrainSingleIndicator2Ex::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrainData::InitAsDefaultInstance() {
  ::tradingcore2pb::_TrainData_default_instance_.si2_ = const_cast< ::tradingcore2pb::TrainSingleIndicator2Ex*>(
      ::tradingcore2pb::TrainSingleIndicator2Ex::internal_default_instance());
}
class TrainData::_Internal {
 public:
  static const ::tradingcore2pb::TrainSingleIndicator2Ex& si2(const TrainData* msg);
};

const ::tradingcore2pb::TrainSingleIndicator2Ex&
TrainData::_Internal::si2(const TrainData* msg) {
  return *msg->trainParam_.si2_;
}
void TrainData::set_allocated_si2(::tradingcore2pb::TrainSingleIndicator2Ex* si2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_trainParam();
  if (si2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      si2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, si2, submessage_arena);
    }
    set_has_si2();
    trainParam_.si2_ = si2;
  }
  // @@protoc_insertion_point(field_set_allocated:tradingcore2pb.TrainData.si2)
}
TrainData::TrainData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tradingcore2pb.TrainData)
}
TrainData::TrainData(const TrainData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  exchangename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_exchangename().empty()) {
    exchangename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.exchangename_);
  }
  assetsname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_assetsname().empty()) {
    assetsname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.assetsname_);
  }
  strategyname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_strategyname().empty()) {
    strategyname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.strategyname_);
  }
  strparam_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_strparam().empty()) {
    strparam_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.strparam_);
  }
  outputpath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_outputpath().empty()) {
    outputpath_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.outputpath_);
  }
  ::memcpy(&trainid_, &from.trainid_,
    static_cast<size_t>(reinterpret_cast<char*>(&minvalidreturn_) -
    reinterpret_cast<char*>(&trainid_)) + sizeof(minvalidreturn_));
  clear_has_trainParam();
  switch (from.trainParam_case()) {
    case kSi2: {
      _internal_mutable_si2()->::tradingcore2pb::TrainSingleIndicator2Ex::MergeFrom(from._internal_si2());
      break;
    }
    case TRAINPARAM_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tradingcore2pb.TrainData)
}

void TrainData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrainData_tradingcore2_2eproto.base);
  exchangename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  assetsname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  strategyname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  strparam_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  outputpath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&trainid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&minvalidreturn_) -
      reinterpret_cast<char*>(&trainid_)) + sizeof(minvalidreturn_));
  clear_has_trainParam();
}

TrainData::~TrainData() {
  // @@protoc_insertion_point(destructor:tradingcore2pb.TrainData)
  SharedDtor();
}

void TrainData::SharedDtor() {
  exchangename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  assetsname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  strategyname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  strparam_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  outputpath_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_trainParam()) {
    clear_trainParam();
  }
}

void TrainData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrainData& TrainData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrainData_tradingcore2_2eproto.base);
  return *internal_default_instance();
}


void TrainData::clear_trainParam() {
// @@protoc_insertion_point(one_of_clear_start:tradingcore2pb.TrainData)
  switch (trainParam_case()) {
    case kSi2: {
      delete trainParam_.si2_;
      break;
    }
    case TRAINPARAM_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TRAINPARAM_NOT_SET;
}


void TrainData::Clear() {
// @@protoc_insertion_point(message_clear_start:tradingcore2pb.TrainData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  exchangename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  assetsname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  strategyname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  strparam_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  outputpath_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&trainid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&minvalidreturn_) -
      reinterpret_cast<char*>(&trainid_)) + sizeof(minvalidreturn_));
  clear_trainParam();
  _internal_metadata_.Clear();
}

const char* TrainData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 trainID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          trainid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string exchangeName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_exchangename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tradingcore2pb.TrainData.exchangeName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string assetsName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_assetsname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tradingcore2pb.TrainData.assetsName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string strategyName = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_strategyname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tradingcore2pb.TrainData.strategyName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string strParam = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_strparam();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tradingcore2pb.TrainData.strParam"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string outputPath = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_outputpath();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tradingcore2pb.TrainData.outputPath"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float invest = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          invest_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float minValidReturn = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          minvalidreturn_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .tradingcore2pb.TrainSingleIndicator2Ex si2 = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_si2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrainData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tradingcore2pb.TrainData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 trainID = 1;
  if (this->trainid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_trainid(), target);
  }

  // string exchangeName = 2;
  if (this->exchangename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_exchangename().data(), static_cast<int>(this->_internal_exchangename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tradingcore2pb.TrainData.exchangeName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_exchangename(), target);
  }

  // string assetsName = 3;
  if (this->assetsname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_assetsname().data(), static_cast<int>(this->_internal_assetsname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tradingcore2pb.TrainData.assetsName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_assetsname(), target);
  }

  // string strategyName = 4;
  if (this->strategyname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_strategyname().data(), static_cast<int>(this->_internal_strategyname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tradingcore2pb.TrainData.strategyName");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_strategyname(), target);
  }

  // string strParam = 5;
  if (this->strparam().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_strparam().data(), static_cast<int>(this->_internal_strparam().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tradingcore2pb.TrainData.strParam");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_strparam(), target);
  }

  // string outputPath = 6;
  if (this->outputpath().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_outputpath().data(), static_cast<int>(this->_internal_outputpath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tradingcore2pb.TrainData.outputPath");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_outputpath(), target);
  }

  // float invest = 7;
  if (!(this->invest() <= 0 && this->invest() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_invest(), target);
  }

  // float minValidReturn = 8;
  if (!(this->minvalidreturn() <= 0 && this->minvalidreturn() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_minvalidreturn(), target);
  }

  // .tradingcore2pb.TrainSingleIndicator2Ex si2 = 100;
  if (_internal_has_si2()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        100, _Internal::si2(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tradingcore2pb.TrainData)
  return target;
}

size_t TrainData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tradingcore2pb.TrainData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string exchangeName = 2;
  if (this->exchangename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_exchangename());
  }

  // string assetsName = 3;
  if (this->assetsname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_assetsname());
  }

  // string strategyName = 4;
  if (this->strategyname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strategyname());
  }

  // string strParam = 5;
  if (this->strparam().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strparam());
  }

  // string outputPath = 6;
  if (this->outputpath().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_outputpath());
  }

  // int64 trainID = 1;
  if (this->trainid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_trainid());
  }

  // float invest = 7;
  if (!(this->invest() <= 0 && this->invest() >= 0)) {
    total_size += 1 + 4;
  }

  // float minValidReturn = 8;
  if (!(this->minvalidreturn() <= 0 && this->minvalidreturn() >= 0)) {
    total_size += 1 + 4;
  }

  switch (trainParam_case()) {
    // .tradingcore2pb.TrainSingleIndicator2Ex si2 = 100;
    case kSi2: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *trainParam_.si2_);
      break;
    }
    case TRAINPARAM_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrainData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tradingcore2pb.TrainData)
  GOOGLE_DCHECK_NE(&from, this);
  const TrainData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrainData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tradingcore2pb.TrainData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tradingcore2pb.TrainData)
    MergeFrom(*source);
  }
}

void TrainData::MergeFrom(const TrainData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tradingcore2pb.TrainData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.exchangename().size() > 0) {

    exchangename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.exchangename_);
  }
  if (from.assetsname().size() > 0) {

    assetsname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.assetsname_);
  }
  if (from.strategyname().size() > 0) {

    strategyname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.strategyname_);
  }
  if (from.strparam().size() > 0) {

    strparam_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.strparam_);
  }
  if (from.outputpath().size() > 0) {

    outputpath_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.outputpath_);
  }
  if (from.trainid() != 0) {
    _internal_set_trainid(from._internal_trainid());
  }
  if (!(from.invest() <= 0 && from.invest() >= 0)) {
    _internal_set_invest(from._internal_invest());
  }
  if (!(from.minvalidreturn() <= 0 && from.minvalidreturn() >= 0)) {
    _internal_set_minvalidreturn(from._internal_minvalidreturn());
  }
  switch (from.trainParam_case()) {
    case kSi2: {
      _internal_mutable_si2()->::tradingcore2pb::TrainSingleIndicator2Ex::MergeFrom(from._internal_si2());
      break;
    }
    case TRAINPARAM_NOT_SET: {
      break;
    }
  }
}

void TrainData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tradingcore2pb.TrainData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrainData::CopyFrom(const TrainData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tradingcore2pb.TrainData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrainData::IsInitialized() const {
  return true;
}

void TrainData::InternalSwap(TrainData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  exchangename_.Swap(&other->exchangename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  assetsname_.Swap(&other->assetsname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  strategyname_.Swap(&other->strategyname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  strparam_.Swap(&other->strparam_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  outputpath_.Swap(&other->outputpath_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(trainid_, other->trainid_);
  swap(invest_, other->invest_);
  swap(minvalidreturn_, other->minvalidreturn_);
  swap(trainParam_, other->trainParam_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrainData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrainNodeResult::InitAsDefaultInstance() {
}
class TrainNodeResult::_Internal {
 public:
};

TrainNodeResult::TrainNodeResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tradingcore2pb.TrainNodeResult)
}
TrainNodeResult::TrainNodeResult(const TrainNodeResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      history_(from.history_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&maxdrawdown_, &from.maxdrawdown_,
    static_cast<size_t>(reinterpret_cast<char*>(&winrate_) -
    reinterpret_cast<char*>(&maxdrawdown_)) + sizeof(winrate_));
  // @@protoc_insertion_point(copy_constructor:tradingcore2pb.TrainNodeResult)
}

void TrainNodeResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrainNodeResult_tradingcore2_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&maxdrawdown_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&winrate_) -
      reinterpret_cast<char*>(&maxdrawdown_)) + sizeof(winrate_));
}

TrainNodeResult::~TrainNodeResult() {
  // @@protoc_insertion_point(destructor:tradingcore2pb.TrainNodeResult)
  SharedDtor();
}

void TrainNodeResult::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TrainNodeResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrainNodeResult& TrainNodeResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrainNodeResult_tradingcore2_2eproto.base);
  return *internal_default_instance();
}


void TrainNodeResult::Clear() {
// @@protoc_insertion_point(message_clear_start:tradingcore2pb.TrainNodeResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  history_.Clear();
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&maxdrawdown_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&winrate_) -
      reinterpret_cast<char*>(&maxdrawdown_)) + sizeof(winrate_));
  _internal_metadata_.Clear();
}

const char* TrainNodeResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float maxDrawdown = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          maxdrawdown_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float sharpe = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          sharpe_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float annualizedReturns = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          annualizedreturns_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float annualizedVolatility = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          annualizedvolatility_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float totalReturns = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          totalreturns_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 tradingTimes = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          tradingtimes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 failTimes = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          failtimes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 stoplossTimes = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          stoplosstimes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float winRate = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          winrate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // string name = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tradingcore2pb.TrainNodeResult.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .tradingcore2pb.TradeData history = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_history(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrainNodeResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tradingcore2pb.TrainNodeResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float maxDrawdown = 1;
  if (!(this->maxdrawdown() <= 0 && this->maxdrawdown() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_maxdrawdown(), target);
  }

  // float sharpe = 2;
  if (!(this->sharpe() <= 0 && this->sharpe() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_sharpe(), target);
  }

  // float annualizedReturns = 3;
  if (!(this->annualizedreturns() <= 0 && this->annualizedreturns() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_annualizedreturns(), target);
  }

  // float annualizedVolatility = 4;
  if (!(this->annualizedvolatility() <= 0 && this->annualizedvolatility() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_annualizedvolatility(), target);
  }

  // float totalReturns = 5;
  if (!(this->totalreturns() <= 0 && this->totalreturns() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_totalreturns(), target);
  }

  // int32 tradingTimes = 6;
  if (this->tradingtimes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_tradingtimes(), target);
  }

  // int32 failTimes = 7;
  if (this->failtimes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_failtimes(), target);
  }

  // int32 stoplossTimes = 8;
  if (this->stoplosstimes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_stoplosstimes(), target);
  }

  // float winRate = 9;
  if (!(this->winrate() <= 0 && this->winrate() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_winrate(), target);
  }

  // string name = 10;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tradingcore2pb.TrainNodeResult.name");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_name(), target);
  }

  // repeated .tradingcore2pb.TradeData history = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_history_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_history(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tradingcore2pb.TrainNodeResult)
  return target;
}

size_t TrainNodeResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tradingcore2pb.TrainNodeResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tradingcore2pb.TradeData history = 11;
  total_size += 1UL * this->_internal_history_size();
  for (const auto& msg : this->history_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 10;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // float maxDrawdown = 1;
  if (!(this->maxdrawdown() <= 0 && this->maxdrawdown() >= 0)) {
    total_size += 1 + 4;
  }

  // float sharpe = 2;
  if (!(this->sharpe() <= 0 && this->sharpe() >= 0)) {
    total_size += 1 + 4;
  }

  // float annualizedReturns = 3;
  if (!(this->annualizedreturns() <= 0 && this->annualizedreturns() >= 0)) {
    total_size += 1 + 4;
  }

  // float annualizedVolatility = 4;
  if (!(this->annualizedvolatility() <= 0 && this->annualizedvolatility() >= 0)) {
    total_size += 1 + 4;
  }

  // float totalReturns = 5;
  if (!(this->totalreturns() <= 0 && this->totalreturns() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 tradingTimes = 6;
  if (this->tradingtimes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_tradingtimes());
  }

  // int32 failTimes = 7;
  if (this->failtimes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_failtimes());
  }

  // int32 stoplossTimes = 8;
  if (this->stoplosstimes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_stoplosstimes());
  }

  // float winRate = 9;
  if (!(this->winrate() <= 0 && this->winrate() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrainNodeResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tradingcore2pb.TrainNodeResult)
  GOOGLE_DCHECK_NE(&from, this);
  const TrainNodeResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrainNodeResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tradingcore2pb.TrainNodeResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tradingcore2pb.TrainNodeResult)
    MergeFrom(*source);
  }
}

void TrainNodeResult::MergeFrom(const TrainNodeResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tradingcore2pb.TrainNodeResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  history_.MergeFrom(from.history_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (!(from.maxdrawdown() <= 0 && from.maxdrawdown() >= 0)) {
    _internal_set_maxdrawdown(from._internal_maxdrawdown());
  }
  if (!(from.sharpe() <= 0 && from.sharpe() >= 0)) {
    _internal_set_sharpe(from._internal_sharpe());
  }
  if (!(from.annualizedreturns() <= 0 && from.annualizedreturns() >= 0)) {
    _internal_set_annualizedreturns(from._internal_annualizedreturns());
  }
  if (!(from.annualizedvolatility() <= 0 && from.annualizedvolatility() >= 0)) {
    _internal_set_annualizedvolatility(from._internal_annualizedvolatility());
  }
  if (!(from.totalreturns() <= 0 && from.totalreturns() >= 0)) {
    _internal_set_totalreturns(from._internal_totalreturns());
  }
  if (from.tradingtimes() != 0) {
    _internal_set_tradingtimes(from._internal_tradingtimes());
  }
  if (from.failtimes() != 0) {
    _internal_set_failtimes(from._internal_failtimes());
  }
  if (from.stoplosstimes() != 0) {
    _internal_set_stoplosstimes(from._internal_stoplosstimes());
  }
  if (!(from.winrate() <= 0 && from.winrate() >= 0)) {
    _internal_set_winrate(from._internal_winrate());
  }
}

void TrainNodeResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tradingcore2pb.TrainNodeResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrainNodeResult::CopyFrom(const TrainNodeResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tradingcore2pb.TrainNodeResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrainNodeResult::IsInitialized() const {
  return true;
}

void TrainNodeResult::InternalSwap(TrainNodeResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  history_.InternalSwap(&other->history_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(maxdrawdown_, other->maxdrawdown_);
  swap(sharpe_, other->sharpe_);
  swap(annualizedreturns_, other->annualizedreturns_);
  swap(annualizedvolatility_, other->annualizedvolatility_);
  swap(totalreturns_, other->totalreturns_);
  swap(tradingtimes_, other->tradingtimes_);
  swap(failtimes_, other->failtimes_);
  swap(stoplosstimes_, other->stoplosstimes_);
  swap(winrate_, other->winrate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrainNodeResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrainResult::InitAsDefaultInstance() {
}
class TrainResult::_Internal {
 public:
};

TrainResult::TrainResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tradingcore2pb.TrainResult)
}
TrainResult::TrainResult(const TrainResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      nodes_(from.nodes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  exchangename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_exchangename().empty()) {
    exchangename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.exchangename_);
  }
  assetsname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_assetsname().empty()) {
    assetsname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.assetsname_);
  }
  strategyname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_strategyname().empty()) {
    strategyname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.strategyname_);
  }
  strparam_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_strparam().empty()) {
    strparam_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.strparam_);
  }
  ::memcpy(&trainid_, &from.trainid_,
    static_cast<size_t>(reinterpret_cast<char*>(&errcode_) -
    reinterpret_cast<char*>(&trainid_)) + sizeof(errcode_));
  // @@protoc_insertion_point(copy_constructor:tradingcore2pb.TrainResult)
}

void TrainResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrainResult_tradingcore2_2eproto.base);
  exchangename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  assetsname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  strategyname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  strparam_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&trainid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&errcode_) -
      reinterpret_cast<char*>(&trainid_)) + sizeof(errcode_));
}

TrainResult::~TrainResult() {
  // @@protoc_insertion_point(destructor:tradingcore2pb.TrainResult)
  SharedDtor();
}

void TrainResult::SharedDtor() {
  exchangename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  assetsname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  strategyname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  strparam_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TrainResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrainResult& TrainResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrainResult_tradingcore2_2eproto.base);
  return *internal_default_instance();
}


void TrainResult::Clear() {
// @@protoc_insertion_point(message_clear_start:tradingcore2pb.TrainResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nodes_.Clear();
  exchangename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  assetsname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  strategyname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  strparam_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&trainid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&errcode_) -
      reinterpret_cast<char*>(&trainid_)) + sizeof(errcode_));
  _internal_metadata_.Clear();
}

const char* TrainResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 trainID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          trainid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string exchangeName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_exchangename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tradingcore2pb.TrainResult.exchangeName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string assetsName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_assetsname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tradingcore2pb.TrainResult.assetsName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string strategyName = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_strategyname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tradingcore2pb.TrainResult.strategyName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string strParam = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_strparam();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tradingcore2pb.TrainResult.strParam"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tradingcore2pb.ErrorCode errCode = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_errcode(static_cast<::tradingcore2pb::ErrorCode>(val));
        } else goto handle_unusual;
        continue;
      // repeated .tradingcore2pb.TrainNodeResult nodes = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_nodes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrainResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tradingcore2pb.TrainResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 trainID = 1;
  if (this->trainid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_trainid(), target);
  }

  // string exchangeName = 2;
  if (this->exchangename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_exchangename().data(), static_cast<int>(this->_internal_exchangename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tradingcore2pb.TrainResult.exchangeName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_exchangename(), target);
  }

  // string assetsName = 3;
  if (this->assetsname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_assetsname().data(), static_cast<int>(this->_internal_assetsname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tradingcore2pb.TrainResult.assetsName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_assetsname(), target);
  }

  // string strategyName = 4;
  if (this->strategyname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_strategyname().data(), static_cast<int>(this->_internal_strategyname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tradingcore2pb.TrainResult.strategyName");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_strategyname(), target);
  }

  // string strParam = 5;
  if (this->strparam().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_strparam().data(), static_cast<int>(this->_internal_strparam().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tradingcore2pb.TrainResult.strParam");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_strparam(), target);
  }

  // .tradingcore2pb.ErrorCode errCode = 6;
  if (this->errcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_errcode(), target);
  }

  // repeated .tradingcore2pb.TrainNodeResult nodes = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_nodes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_nodes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tradingcore2pb.TrainResult)
  return target;
}

size_t TrainResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tradingcore2pb.TrainResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tradingcore2pb.TrainNodeResult nodes = 7;
  total_size += 1UL * this->_internal_nodes_size();
  for (const auto& msg : this->nodes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string exchangeName = 2;
  if (this->exchangename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_exchangename());
  }

  // string assetsName = 3;
  if (this->assetsname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_assetsname());
  }

  // string strategyName = 4;
  if (this->strategyname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strategyname());
  }

  // string strParam = 5;
  if (this->strparam().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strparam());
  }

  // int64 trainID = 1;
  if (this->trainid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_trainid());
  }

  // .tradingcore2pb.ErrorCode errCode = 6;
  if (this->errcode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_errcode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrainResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tradingcore2pb.TrainResult)
  GOOGLE_DCHECK_NE(&from, this);
  const TrainResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrainResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tradingcore2pb.TrainResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tradingcore2pb.TrainResult)
    MergeFrom(*source);
  }
}

void TrainResult::MergeFrom(const TrainResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tradingcore2pb.TrainResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  nodes_.MergeFrom(from.nodes_);
  if (from.exchangename().size() > 0) {

    exchangename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.exchangename_);
  }
  if (from.assetsname().size() > 0) {

    assetsname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.assetsname_);
  }
  if (from.strategyname().size() > 0) {

    strategyname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.strategyname_);
  }
  if (from.strparam().size() > 0) {

    strparam_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.strparam_);
  }
  if (from.trainid() != 0) {
    _internal_set_trainid(from._internal_trainid());
  }
  if (from.errcode() != 0) {
    _internal_set_errcode(from._internal_errcode());
  }
}

void TrainResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tradingcore2pb.TrainResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrainResult::CopyFrom(const TrainResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tradingcore2pb.TrainResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrainResult::IsInitialized() const {
  return true;
}

void TrainResult::InternalSwap(TrainResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  nodes_.InternalSwap(&other->nodes_);
  exchangename_.Swap(&other->exchangename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  assetsname_.Swap(&other->assetsname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  strategyname_.Swap(&other->strategyname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  strparam_.Swap(&other->strparam_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(trainid_, other->trainid_);
  swap(errcode_, other->errcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrainResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RequestServerInfo::InitAsDefaultInstance() {
  ::tradingcore2pb::_RequestServerInfo_default_instance_._instance.get_mutable()->basicrequest_ = const_cast< ::tradingcore2pb::BasicRequestData*>(
      ::tradingcore2pb::BasicRequestData::internal_default_instance());
}
class RequestServerInfo::_Internal {
 public:
  static const ::tradingcore2pb::BasicRequestData& basicrequest(const RequestServerInfo* msg);
};

const ::tradingcore2pb::BasicRequestData&
RequestServerInfo::_Internal::basicrequest(const RequestServerInfo* msg) {
  return *msg->basicrequest_;
}
RequestServerInfo::RequestServerInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tradingcore2pb.RequestServerInfo)
}
RequestServerInfo::RequestServerInfo(const RequestServerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_basicrequest()) {
    basicrequest_ = new ::tradingcore2pb::BasicRequestData(*from.basicrequest_);
  } else {
    basicrequest_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:tradingcore2pb.RequestServerInfo)
}

void RequestServerInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RequestServerInfo_tradingcore2_2eproto.base);
  basicrequest_ = nullptr;
}

RequestServerInfo::~RequestServerInfo() {
  // @@protoc_insertion_point(destructor:tradingcore2pb.RequestServerInfo)
  SharedDtor();
}

void RequestServerInfo::SharedDtor() {
  if (this != internal_default_instance()) delete basicrequest_;
}

void RequestServerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RequestServerInfo& RequestServerInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RequestServerInfo_tradingcore2_2eproto.base);
  return *internal_default_instance();
}


void RequestServerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:tradingcore2pb.RequestServerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && basicrequest_ != nullptr) {
    delete basicrequest_;
  }
  basicrequest_ = nullptr;
  _internal_metadata_.Clear();
}

const char* RequestServerInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .tradingcore2pb.BasicRequestData basicRequest = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_basicrequest(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RequestServerInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tradingcore2pb.RequestServerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tradingcore2pb.BasicRequestData basicRequest = 1;
  if (this->has_basicrequest()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::basicrequest(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tradingcore2pb.RequestServerInfo)
  return target;
}

size_t RequestServerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tradingcore2pb.RequestServerInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tradingcore2pb.BasicRequestData basicRequest = 1;
  if (this->has_basicrequest()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *basicrequest_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestServerInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tradingcore2pb.RequestServerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestServerInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RequestServerInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tradingcore2pb.RequestServerInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tradingcore2pb.RequestServerInfo)
    MergeFrom(*source);
  }
}

void RequestServerInfo::MergeFrom(const RequestServerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tradingcore2pb.RequestServerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_basicrequest()) {
    _internal_mutable_basicrequest()->::tradingcore2pb::BasicRequestData::MergeFrom(from._internal_basicrequest());
  }
}

void RequestServerInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tradingcore2pb.RequestServerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestServerInfo::CopyFrom(const RequestServerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tradingcore2pb.RequestServerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestServerInfo::IsInitialized() const {
  return true;
}

void RequestServerInfo::InternalSwap(RequestServerInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(basicrequest_, other->basicrequest_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestServerInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReplyServerInfo::InitAsDefaultInstance() {
  ::tradingcore2pb::_ReplyServerInfo_default_instance_._instance.get_mutable()->basicreply_ = const_cast< ::tradingcore2pb::BasicReplyData*>(
      ::tradingcore2pb::BasicReplyData::internal_default_instance());
}
class ReplyServerInfo::_Internal {
 public:
  static const ::tradingcore2pb::BasicReplyData& basicreply(const ReplyServerInfo* msg);
};

const ::tradingcore2pb::BasicReplyData&
ReplyServerInfo::_Internal::basicreply(const ReplyServerInfo* msg) {
  return *msg->basicreply_;
}
ReplyServerInfo::ReplyServerInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tradingcore2pb.ReplyServerInfo)
}
ReplyServerInfo::ReplyServerInfo(const ReplyServerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_basicreply()) {
    basicreply_ = new ::tradingcore2pb::BasicReplyData(*from.basicreply_);
  } else {
    basicreply_ = nullptr;
  }
  ::memcpy(&maxtasks_, &from.maxtasks_,
    static_cast<size_t>(reinterpret_cast<char*>(&curtasks_) -
    reinterpret_cast<char*>(&maxtasks_)) + sizeof(curtasks_));
  // @@protoc_insertion_point(copy_constructor:tradingcore2pb.ReplyServerInfo)
}

void ReplyServerInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReplyServerInfo_tradingcore2_2eproto.base);
  ::memset(&basicreply_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&curtasks_) -
      reinterpret_cast<char*>(&basicreply_)) + sizeof(curtasks_));
}

ReplyServerInfo::~ReplyServerInfo() {
  // @@protoc_insertion_point(destructor:tradingcore2pb.ReplyServerInfo)
  SharedDtor();
}

void ReplyServerInfo::SharedDtor() {
  if (this != internal_default_instance()) delete basicreply_;
}

void ReplyServerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReplyServerInfo& ReplyServerInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReplyServerInfo_tradingcore2_2eproto.base);
  return *internal_default_instance();
}


void ReplyServerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:tradingcore2pb.ReplyServerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && basicreply_ != nullptr) {
    delete basicreply_;
  }
  basicreply_ = nullptr;
  ::memset(&maxtasks_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&curtasks_) -
      reinterpret_cast<char*>(&maxtasks_)) + sizeof(curtasks_));
  _internal_metadata_.Clear();
}

const char* ReplyServerInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .tradingcore2pb.BasicReplyData basicReply = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_basicreply(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 maxTasks = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          maxtasks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 curTasks = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          curtasks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReplyServerInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tradingcore2pb.ReplyServerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tradingcore2pb.BasicReplyData basicReply = 1;
  if (this->has_basicreply()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::basicreply(this), target, stream);
  }

  // int32 maxTasks = 2;
  if (this->maxtasks() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_maxtasks(), target);
  }

  // int32 curTasks = 3;
  if (this->curtasks() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_curtasks(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tradingcore2pb.ReplyServerInfo)
  return target;
}

size_t ReplyServerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tradingcore2pb.ReplyServerInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tradingcore2pb.BasicReplyData basicReply = 1;
  if (this->has_basicreply()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *basicreply_);
  }

  // int32 maxTasks = 2;
  if (this->maxtasks() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_maxtasks());
  }

  // int32 curTasks = 3;
  if (this->curtasks() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_curtasks());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReplyServerInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tradingcore2pb.ReplyServerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ReplyServerInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReplyServerInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tradingcore2pb.ReplyServerInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tradingcore2pb.ReplyServerInfo)
    MergeFrom(*source);
  }
}

void ReplyServerInfo::MergeFrom(const ReplyServerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tradingcore2pb.ReplyServerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_basicreply()) {
    _internal_mutable_basicreply()->::tradingcore2pb::BasicReplyData::MergeFrom(from._internal_basicreply());
  }
  if (from.maxtasks() != 0) {
    _internal_set_maxtasks(from._internal_maxtasks());
  }
  if (from.curtasks() != 0) {
    _internal_set_curtasks(from._internal_curtasks());
  }
}

void ReplyServerInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tradingcore2pb.ReplyServerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplyServerInfo::CopyFrom(const ReplyServerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tradingcore2pb.ReplyServerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplyServerInfo::IsInitialized() const {
  return true;
}

void ReplyServerInfo::InternalSwap(ReplyServerInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(basicreply_, other->basicreply_);
  swap(maxtasks_, other->maxtasks_);
  swap(curtasks_, other->curtasks_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReplyServerInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RequestTrain::InitAsDefaultInstance() {
  ::tradingcore2pb::_RequestTrain_default_instance_._instance.get_mutable()->basicrequest_ = const_cast< ::tradingcore2pb::BasicRequestData*>(
      ::tradingcore2pb::BasicRequestData::internal_default_instance());
  ::tradingcore2pb::_RequestTrain_default_instance_._instance.get_mutable()->train_ = const_cast< ::tradingcore2pb::TrainData*>(
      ::tradingcore2pb::TrainData::internal_default_instance());
}
class RequestTrain::_Internal {
 public:
  static const ::tradingcore2pb::BasicRequestData& basicrequest(const RequestTrain* msg);
  static const ::tradingcore2pb::TrainData& train(const RequestTrain* msg);
};

const ::tradingcore2pb::BasicRequestData&
RequestTrain::_Internal::basicrequest(const RequestTrain* msg) {
  return *msg->basicrequest_;
}
const ::tradingcore2pb::TrainData&
RequestTrain::_Internal::train(const RequestTrain* msg) {
  return *msg->train_;
}
RequestTrain::RequestTrain()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tradingcore2pb.RequestTrain)
}
RequestTrain::RequestTrain(const RequestTrain& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_basicrequest()) {
    basicrequest_ = new ::tradingcore2pb::BasicRequestData(*from.basicrequest_);
  } else {
    basicrequest_ = nullptr;
  }
  if (from._internal_has_train()) {
    train_ = new ::tradingcore2pb::TrainData(*from.train_);
  } else {
    train_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:tradingcore2pb.RequestTrain)
}

void RequestTrain::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RequestTrain_tradingcore2_2eproto.base);
  ::memset(&basicrequest_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&train_) -
      reinterpret_cast<char*>(&basicrequest_)) + sizeof(train_));
}

RequestTrain::~RequestTrain() {
  // @@protoc_insertion_point(destructor:tradingcore2pb.RequestTrain)
  SharedDtor();
}

void RequestTrain::SharedDtor() {
  if (this != internal_default_instance()) delete basicrequest_;
  if (this != internal_default_instance()) delete train_;
}

void RequestTrain::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RequestTrain& RequestTrain::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RequestTrain_tradingcore2_2eproto.base);
  return *internal_default_instance();
}


void RequestTrain::Clear() {
// @@protoc_insertion_point(message_clear_start:tradingcore2pb.RequestTrain)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && basicrequest_ != nullptr) {
    delete basicrequest_;
  }
  basicrequest_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && train_ != nullptr) {
    delete train_;
  }
  train_ = nullptr;
  _internal_metadata_.Clear();
}

const char* RequestTrain::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .tradingcore2pb.BasicRequestData basicRequest = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_basicrequest(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tradingcore2pb.TrainData train = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_train(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RequestTrain::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tradingcore2pb.RequestTrain)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tradingcore2pb.BasicRequestData basicRequest = 1;
  if (this->has_basicrequest()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::basicrequest(this), target, stream);
  }

  // .tradingcore2pb.TrainData train = 2;
  if (this->has_train()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::train(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tradingcore2pb.RequestTrain)
  return target;
}

size_t RequestTrain::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tradingcore2pb.RequestTrain)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tradingcore2pb.BasicRequestData basicRequest = 1;
  if (this->has_basicrequest()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *basicrequest_);
  }

  // .tradingcore2pb.TrainData train = 2;
  if (this->has_train()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *train_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestTrain::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tradingcore2pb.RequestTrain)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestTrain* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RequestTrain>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tradingcore2pb.RequestTrain)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tradingcore2pb.RequestTrain)
    MergeFrom(*source);
  }
}

void RequestTrain::MergeFrom(const RequestTrain& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tradingcore2pb.RequestTrain)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_basicrequest()) {
    _internal_mutable_basicrequest()->::tradingcore2pb::BasicRequestData::MergeFrom(from._internal_basicrequest());
  }
  if (from.has_train()) {
    _internal_mutable_train()->::tradingcore2pb::TrainData::MergeFrom(from._internal_train());
  }
}

void RequestTrain::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tradingcore2pb.RequestTrain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestTrain::CopyFrom(const RequestTrain& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tradingcore2pb.RequestTrain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestTrain::IsInitialized() const {
  return true;
}

void RequestTrain::InternalSwap(RequestTrain* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(basicrequest_, other->basicrequest_);
  swap(train_, other->train_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestTrain::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReplyTrain::InitAsDefaultInstance() {
  ::tradingcore2pb::_ReplyTrain_default_instance_._instance.get_mutable()->basicreply_ = const_cast< ::tradingcore2pb::BasicReplyData*>(
      ::tradingcore2pb::BasicReplyData::internal_default_instance());
  ::tradingcore2pb::_ReplyTrain_default_instance_._instance.get_mutable()->train_ = const_cast< ::tradingcore2pb::TrainResult*>(
      ::tradingcore2pb::TrainResult::internal_default_instance());
}
class ReplyTrain::_Internal {
 public:
  static const ::tradingcore2pb::BasicReplyData& basicreply(const ReplyTrain* msg);
  static const ::tradingcore2pb::TrainResult& train(const ReplyTrain* msg);
};

const ::tradingcore2pb::BasicReplyData&
ReplyTrain::_Internal::basicreply(const ReplyTrain* msg) {
  return *msg->basicreply_;
}
const ::tradingcore2pb::TrainResult&
ReplyTrain::_Internal::train(const ReplyTrain* msg) {
  return *msg->train_;
}
ReplyTrain::ReplyTrain()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tradingcore2pb.ReplyTrain)
}
ReplyTrain::ReplyTrain(const ReplyTrain& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_basicreply()) {
    basicreply_ = new ::tradingcore2pb::BasicReplyData(*from.basicreply_);
  } else {
    basicreply_ = nullptr;
  }
  if (from._internal_has_train()) {
    train_ = new ::tradingcore2pb::TrainResult(*from.train_);
  } else {
    train_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:tradingcore2pb.ReplyTrain)
}

void ReplyTrain::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReplyTrain_tradingcore2_2eproto.base);
  ::memset(&basicreply_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&train_) -
      reinterpret_cast<char*>(&basicreply_)) + sizeof(train_));
}

ReplyTrain::~ReplyTrain() {
  // @@protoc_insertion_point(destructor:tradingcore2pb.ReplyTrain)
  SharedDtor();
}

void ReplyTrain::SharedDtor() {
  if (this != internal_default_instance()) delete basicreply_;
  if (this != internal_default_instance()) delete train_;
}

void ReplyTrain::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReplyTrain& ReplyTrain::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReplyTrain_tradingcore2_2eproto.base);
  return *internal_default_instance();
}


void ReplyTrain::Clear() {
// @@protoc_insertion_point(message_clear_start:tradingcore2pb.ReplyTrain)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && basicreply_ != nullptr) {
    delete basicreply_;
  }
  basicreply_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && train_ != nullptr) {
    delete train_;
  }
  train_ = nullptr;
  _internal_metadata_.Clear();
}

const char* ReplyTrain::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .tradingcore2pb.BasicReplyData basicReply = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_basicreply(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tradingcore2pb.TrainResult train = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_train(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReplyTrain::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tradingcore2pb.ReplyTrain)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tradingcore2pb.BasicReplyData basicReply = 1;
  if (this->has_basicreply()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::basicreply(this), target, stream);
  }

  // .tradingcore2pb.TrainResult train = 2;
  if (this->has_train()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::train(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tradingcore2pb.ReplyTrain)
  return target;
}

size_t ReplyTrain::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tradingcore2pb.ReplyTrain)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tradingcore2pb.BasicReplyData basicReply = 1;
  if (this->has_basicreply()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *basicreply_);
  }

  // .tradingcore2pb.TrainResult train = 2;
  if (this->has_train()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *train_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReplyTrain::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tradingcore2pb.ReplyTrain)
  GOOGLE_DCHECK_NE(&from, this);
  const ReplyTrain* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReplyTrain>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tradingcore2pb.ReplyTrain)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tradingcore2pb.ReplyTrain)
    MergeFrom(*source);
  }
}

void ReplyTrain::MergeFrom(const ReplyTrain& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tradingcore2pb.ReplyTrain)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_basicreply()) {
    _internal_mutable_basicreply()->::tradingcore2pb::BasicReplyData::MergeFrom(from._internal_basicreply());
  }
  if (from.has_train()) {
    _internal_mutable_train()->::tradingcore2pb::TrainResult::MergeFrom(from._internal_train());
  }
}

void ReplyTrain::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tradingcore2pb.ReplyTrain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplyTrain::CopyFrom(const ReplyTrain& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tradingcore2pb.ReplyTrain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplyTrain::IsInitialized() const {
  return true;
}

void ReplyTrain::InternalSwap(ReplyTrain* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(basicreply_, other->basicreply_);
  swap(train_, other->train_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReplyTrain::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace tradingcore2pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tradingcore2pb::BasicRequestData* Arena::CreateMaybeMessage< ::tradingcore2pb::BasicRequestData >(Arena* arena) {
  return Arena::CreateInternal< ::tradingcore2pb::BasicRequestData >(arena);
}
template<> PROTOBUF_NOINLINE ::tradingcore2pb::BasicReplyData* Arena::CreateMaybeMessage< ::tradingcore2pb::BasicReplyData >(Arena* arena) {
  return Arena::CreateInternal< ::tradingcore2pb::BasicReplyData >(arena);
}
template<> PROTOBUF_NOINLINE ::tradingcore2pb::TradeData* Arena::CreateMaybeMessage< ::tradingcore2pb::TradeData >(Arena* arena) {
  return Arena::CreateInternal< ::tradingcore2pb::TradeData >(arena);
}
template<> PROTOBUF_NOINLINE ::tradingcore2pb::TrainSingleIndicator2Ex* Arena::CreateMaybeMessage< ::tradingcore2pb::TrainSingleIndicator2Ex >(Arena* arena) {
  return Arena::CreateInternal< ::tradingcore2pb::TrainSingleIndicator2Ex >(arena);
}
template<> PROTOBUF_NOINLINE ::tradingcore2pb::TrainData* Arena::CreateMaybeMessage< ::tradingcore2pb::TrainData >(Arena* arena) {
  return Arena::CreateInternal< ::tradingcore2pb::TrainData >(arena);
}
template<> PROTOBUF_NOINLINE ::tradingcore2pb::TrainNodeResult* Arena::CreateMaybeMessage< ::tradingcore2pb::TrainNodeResult >(Arena* arena) {
  return Arena::CreateInternal< ::tradingcore2pb::TrainNodeResult >(arena);
}
template<> PROTOBUF_NOINLINE ::tradingcore2pb::TrainResult* Arena::CreateMaybeMessage< ::tradingcore2pb::TrainResult >(Arena* arena) {
  return Arena::CreateInternal< ::tradingcore2pb::TrainResult >(arena);
}
template<> PROTOBUF_NOINLINE ::tradingcore2pb::RequestServerInfo* Arena::CreateMaybeMessage< ::tradingcore2pb::RequestServerInfo >(Arena* arena) {
  return Arena::CreateInternal< ::tradingcore2pb::RequestServerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::tradingcore2pb::ReplyServerInfo* Arena::CreateMaybeMessage< ::tradingcore2pb::ReplyServerInfo >(Arena* arena) {
  return Arena::CreateInternal< ::tradingcore2pb::ReplyServerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::tradingcore2pb::RequestTrain* Arena::CreateMaybeMessage< ::tradingcore2pb::RequestTrain >(Arena* arena) {
  return Arena::CreateInternal< ::tradingcore2pb::RequestTrain >(arena);
}
template<> PROTOBUF_NOINLINE ::tradingcore2pb::ReplyTrain* Arena::CreateMaybeMessage< ::tradingcore2pb::ReplyTrain >(Arena* arena) {
  return Arena::CreateInternal< ::tradingcore2pb::ReplyTrain >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

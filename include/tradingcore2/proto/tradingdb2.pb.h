// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tradingdb2.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tradingdb2_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tradingdb2_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tradingdb2_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tradingdb2_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tradingdb2_2eproto;
namespace tradingdb2pb {
class Candle;
class CandleDefaultTypeInternal;
extern CandleDefaultTypeInternal _Candle_default_instance_;
class Candles;
class CandlesDefaultTypeInternal;
extern CandlesDefaultTypeInternal _Candles_default_instance_;
class ReplyGetCandles;
class ReplyGetCandlesDefaultTypeInternal;
extern ReplyGetCandlesDefaultTypeInternal _ReplyGetCandles_default_instance_;
class ReplyUpdCandles;
class ReplyUpdCandlesDefaultTypeInternal;
extern ReplyUpdCandlesDefaultTypeInternal _ReplyUpdCandles_default_instance_;
class RequestGetCandles;
class RequestGetCandlesDefaultTypeInternal;
extern RequestGetCandlesDefaultTypeInternal _RequestGetCandles_default_instance_;
class RequestUpdCandles;
class RequestUpdCandlesDefaultTypeInternal;
extern RequestUpdCandlesDefaultTypeInternal _RequestUpdCandles_default_instance_;
}  // namespace tradingdb2pb
PROTOBUF_NAMESPACE_OPEN
template<> ::tradingdb2pb::Candle* Arena::CreateMaybeMessage<::tradingdb2pb::Candle>(Arena*);
template<> ::tradingdb2pb::Candles* Arena::CreateMaybeMessage<::tradingdb2pb::Candles>(Arena*);
template<> ::tradingdb2pb::ReplyGetCandles* Arena::CreateMaybeMessage<::tradingdb2pb::ReplyGetCandles>(Arena*);
template<> ::tradingdb2pb::ReplyUpdCandles* Arena::CreateMaybeMessage<::tradingdb2pb::ReplyUpdCandles>(Arena*);
template<> ::tradingdb2pb::RequestGetCandles* Arena::CreateMaybeMessage<::tradingdb2pb::RequestGetCandles>(Arena*);
template<> ::tradingdb2pb::RequestUpdCandles* Arena::CreateMaybeMessage<::tradingdb2pb::RequestUpdCandles>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tradingdb2pb {

// ===================================================================

class Candle :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tradingdb2pb.Candle) */ {
 public:
  Candle();
  virtual ~Candle();

  Candle(const Candle& from);
  Candle(Candle&& from) noexcept
    : Candle() {
    *this = ::std::move(from);
  }

  inline Candle& operator=(const Candle& from) {
    CopyFrom(from);
    return *this;
  }
  inline Candle& operator=(Candle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Candle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Candle* internal_default_instance() {
    return reinterpret_cast<const Candle*>(
               &_Candle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Candle& a, Candle& b) {
    a.Swap(&b);
  }
  inline void Swap(Candle* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Candle* New() const final {
    return CreateMaybeMessage<Candle>(nullptr);
  }

  Candle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Candle>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Candle& from);
  void MergeFrom(const Candle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Candle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tradingdb2pb.Candle";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tradingdb2_2eproto);
    return ::descriptor_table_tradingdb2_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTsFieldNumber = 1,
    kOpenFieldNumber = 2,
    kCloseFieldNumber = 3,
    kHighFieldNumber = 4,
    kLowFieldNumber = 5,
    kVolumeFieldNumber = 6,
    kOpenInterestFieldNumber = 7,
    kTradesFieldNumber = 8,
    kVwapFieldNumber = 9,
    kLastSizeFieldNumber = 10,
    kTurnoverFieldNumber = 11,
    kHomeNotionalFieldNumber = 12,
    kForeignNotionalFieldNumber = 13,
  };
  // int64 ts = 1;
  void clear_ts();
  ::PROTOBUF_NAMESPACE_ID::int64 ts() const;
  void set_ts(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_ts() const;
  void _internal_set_ts(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 open = 2;
  void clear_open();
  ::PROTOBUF_NAMESPACE_ID::int64 open() const;
  void set_open(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_open() const;
  void _internal_set_open(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 close = 3;
  void clear_close();
  ::PROTOBUF_NAMESPACE_ID::int64 close() const;
  void set_close(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_close() const;
  void _internal_set_close(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 high = 4;
  void clear_high();
  ::PROTOBUF_NAMESPACE_ID::int64 high() const;
  void set_high(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_high() const;
  void _internal_set_high(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 low = 5;
  void clear_low();
  ::PROTOBUF_NAMESPACE_ID::int64 low() const;
  void set_low(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_low() const;
  void _internal_set_low(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 volume = 6;
  void clear_volume();
  ::PROTOBUF_NAMESPACE_ID::int64 volume() const;
  void set_volume(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_volume() const;
  void _internal_set_volume(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 openInterest = 7;
  void clear_openinterest();
  ::PROTOBUF_NAMESPACE_ID::int64 openinterest() const;
  void set_openinterest(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_openinterest() const;
  void _internal_set_openinterest(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 trades = 8;
  void clear_trades();
  ::PROTOBUF_NAMESPACE_ID::int64 trades() const;
  void set_trades(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_trades() const;
  void _internal_set_trades(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // double vwap = 9;
  void clear_vwap();
  double vwap() const;
  void set_vwap(double value);
  private:
  double _internal_vwap() const;
  void _internal_set_vwap(double value);
  public:

  // int64 lastSize = 10;
  void clear_lastsize();
  ::PROTOBUF_NAMESPACE_ID::int64 lastsize() const;
  void set_lastsize(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_lastsize() const;
  void _internal_set_lastsize(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 turnover = 11;
  void clear_turnover();
  ::PROTOBUF_NAMESPACE_ID::int64 turnover() const;
  void set_turnover(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_turnover() const;
  void _internal_set_turnover(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // double homeNotional = 12;
  void clear_homenotional();
  double homenotional() const;
  void set_homenotional(double value);
  private:
  double _internal_homenotional() const;
  void _internal_set_homenotional(double value);
  public:

  // double foreignNotional = 13;
  void clear_foreignnotional();
  double foreignnotional() const;
  void set_foreignnotional(double value);
  private:
  double _internal_foreignnotional() const;
  void _internal_set_foreignnotional(double value);
  public:

  // @@protoc_insertion_point(class_scope:tradingdb2pb.Candle)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 ts_;
  ::PROTOBUF_NAMESPACE_ID::int64 open_;
  ::PROTOBUF_NAMESPACE_ID::int64 close_;
  ::PROTOBUF_NAMESPACE_ID::int64 high_;
  ::PROTOBUF_NAMESPACE_ID::int64 low_;
  ::PROTOBUF_NAMESPACE_ID::int64 volume_;
  ::PROTOBUF_NAMESPACE_ID::int64 openinterest_;
  ::PROTOBUF_NAMESPACE_ID::int64 trades_;
  double vwap_;
  ::PROTOBUF_NAMESPACE_ID::int64 lastsize_;
  ::PROTOBUF_NAMESPACE_ID::int64 turnover_;
  double homenotional_;
  double foreignnotional_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tradingdb2_2eproto;
};
// -------------------------------------------------------------------

class Candles :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tradingdb2pb.Candles) */ {
 public:
  Candles();
  virtual ~Candles();

  Candles(const Candles& from);
  Candles(Candles&& from) noexcept
    : Candles() {
    *this = ::std::move(from);
  }

  inline Candles& operator=(const Candles& from) {
    CopyFrom(from);
    return *this;
  }
  inline Candles& operator=(Candles&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Candles& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Candles* internal_default_instance() {
    return reinterpret_cast<const Candles*>(
               &_Candles_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Candles& a, Candles& b) {
    a.Swap(&b);
  }
  inline void Swap(Candles* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Candles* New() const final {
    return CreateMaybeMessage<Candles>(nullptr);
  }

  Candles* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Candles>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Candles& from);
  void MergeFrom(const Candles& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Candles* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tradingdb2pb.Candles";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tradingdb2_2eproto);
    return ::descriptor_table_tradingdb2_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCandlesFieldNumber = 4,
    kMarketFieldNumber = 1,
    kSymbolFieldNumber = 2,
    kTagFieldNumber = 3,
  };
  // repeated .tradingdb2pb.Candle candles = 4;
  int candles_size() const;
  private:
  int _internal_candles_size() const;
  public:
  void clear_candles();
  ::tradingdb2pb::Candle* mutable_candles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tradingdb2pb::Candle >*
      mutable_candles();
  private:
  const ::tradingdb2pb::Candle& _internal_candles(int index) const;
  ::tradingdb2pb::Candle* _internal_add_candles();
  public:
  const ::tradingdb2pb::Candle& candles(int index) const;
  ::tradingdb2pb::Candle* add_candles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tradingdb2pb::Candle >&
      candles() const;

  // string market = 1;
  void clear_market();
  const std::string& market() const;
  void set_market(const std::string& value);
  void set_market(std::string&& value);
  void set_market(const char* value);
  void set_market(const char* value, size_t size);
  std::string* mutable_market();
  std::string* release_market();
  void set_allocated_market(std::string* market);
  private:
  const std::string& _internal_market() const;
  void _internal_set_market(const std::string& value);
  std::string* _internal_mutable_market();
  public:

  // string symbol = 2;
  void clear_symbol();
  const std::string& symbol() const;
  void set_symbol(const std::string& value);
  void set_symbol(std::string&& value);
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  std::string* mutable_symbol();
  std::string* release_symbol();
  void set_allocated_symbol(std::string* symbol);
  private:
  const std::string& _internal_symbol() const;
  void _internal_set_symbol(const std::string& value);
  std::string* _internal_mutable_symbol();
  public:

  // string tag = 3;
  void clear_tag();
  const std::string& tag() const;
  void set_tag(const std::string& value);
  void set_tag(std::string&& value);
  void set_tag(const char* value);
  void set_tag(const char* value, size_t size);
  std::string* mutable_tag();
  std::string* release_tag();
  void set_allocated_tag(std::string* tag);
  private:
  const std::string& _internal_tag() const;
  void _internal_set_tag(const std::string& value);
  std::string* _internal_mutable_tag();
  public:

  // @@protoc_insertion_point(class_scope:tradingdb2pb.Candles)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tradingdb2pb::Candle > candles_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr market_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr symbol_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tradingdb2_2eproto;
};
// -------------------------------------------------------------------

class RequestUpdCandles :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tradingdb2pb.RequestUpdCandles) */ {
 public:
  RequestUpdCandles();
  virtual ~RequestUpdCandles();

  RequestUpdCandles(const RequestUpdCandles& from);
  RequestUpdCandles(RequestUpdCandles&& from) noexcept
    : RequestUpdCandles() {
    *this = ::std::move(from);
  }

  inline RequestUpdCandles& operator=(const RequestUpdCandles& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestUpdCandles& operator=(RequestUpdCandles&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RequestUpdCandles& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestUpdCandles* internal_default_instance() {
    return reinterpret_cast<const RequestUpdCandles*>(
               &_RequestUpdCandles_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RequestUpdCandles& a, RequestUpdCandles& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestUpdCandles* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestUpdCandles* New() const final {
    return CreateMaybeMessage<RequestUpdCandles>(nullptr);
  }

  RequestUpdCandles* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestUpdCandles>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestUpdCandles& from);
  void MergeFrom(const RequestUpdCandles& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestUpdCandles* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tradingdb2pb.RequestUpdCandles";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tradingdb2_2eproto);
    return ::descriptor_table_tradingdb2_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
    kCandlesFieldNumber = 2,
  };
  // string token = 1;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // .tradingdb2pb.Candles candles = 2;
  bool has_candles() const;
  private:
  bool _internal_has_candles() const;
  public:
  void clear_candles();
  const ::tradingdb2pb::Candles& candles() const;
  ::tradingdb2pb::Candles* release_candles();
  ::tradingdb2pb::Candles* mutable_candles();
  void set_allocated_candles(::tradingdb2pb::Candles* candles);
  private:
  const ::tradingdb2pb::Candles& _internal_candles() const;
  ::tradingdb2pb::Candles* _internal_mutable_candles();
  public:

  // @@protoc_insertion_point(class_scope:tradingdb2pb.RequestUpdCandles)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::tradingdb2pb::Candles* candles_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tradingdb2_2eproto;
};
// -------------------------------------------------------------------

class ReplyUpdCandles :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tradingdb2pb.ReplyUpdCandles) */ {
 public:
  ReplyUpdCandles();
  virtual ~ReplyUpdCandles();

  ReplyUpdCandles(const ReplyUpdCandles& from);
  ReplyUpdCandles(ReplyUpdCandles&& from) noexcept
    : ReplyUpdCandles() {
    *this = ::std::move(from);
  }

  inline ReplyUpdCandles& operator=(const ReplyUpdCandles& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReplyUpdCandles& operator=(ReplyUpdCandles&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReplyUpdCandles& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReplyUpdCandles* internal_default_instance() {
    return reinterpret_cast<const ReplyUpdCandles*>(
               &_ReplyUpdCandles_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ReplyUpdCandles& a, ReplyUpdCandles& b) {
    a.Swap(&b);
  }
  inline void Swap(ReplyUpdCandles* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReplyUpdCandles* New() const final {
    return CreateMaybeMessage<ReplyUpdCandles>(nullptr);
  }

  ReplyUpdCandles* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReplyUpdCandles>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReplyUpdCandles& from);
  void MergeFrom(const ReplyUpdCandles& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReplyUpdCandles* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tradingdb2pb.ReplyUpdCandles";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tradingdb2_2eproto);
    return ::descriptor_table_tradingdb2_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLengthOKFieldNumber = 1,
  };
  // int32 lengthOK = 1;
  void clear_lengthok();
  ::PROTOBUF_NAMESPACE_ID::int32 lengthok() const;
  void set_lengthok(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lengthok() const;
  void _internal_set_lengthok(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:tradingdb2pb.ReplyUpdCandles)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 lengthok_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tradingdb2_2eproto;
};
// -------------------------------------------------------------------

class RequestGetCandles :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tradingdb2pb.RequestGetCandles) */ {
 public:
  RequestGetCandles();
  virtual ~RequestGetCandles();

  RequestGetCandles(const RequestGetCandles& from);
  RequestGetCandles(RequestGetCandles&& from) noexcept
    : RequestGetCandles() {
    *this = ::std::move(from);
  }

  inline RequestGetCandles& operator=(const RequestGetCandles& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestGetCandles& operator=(RequestGetCandles&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RequestGetCandles& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestGetCandles* internal_default_instance() {
    return reinterpret_cast<const RequestGetCandles*>(
               &_RequestGetCandles_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RequestGetCandles& a, RequestGetCandles& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestGetCandles* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestGetCandles* New() const final {
    return CreateMaybeMessage<RequestGetCandles>(nullptr);
  }

  RequestGetCandles* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestGetCandles>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestGetCandles& from);
  void MergeFrom(const RequestGetCandles& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestGetCandles* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tradingdb2pb.RequestGetCandles";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tradingdb2_2eproto);
    return ::descriptor_table_tradingdb2_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
    kMarketFieldNumber = 2,
    kSymbolFieldNumber = 3,
    kTagFieldNumber = 4,
  };
  // string token = 1;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // string market = 2;
  void clear_market();
  const std::string& market() const;
  void set_market(const std::string& value);
  void set_market(std::string&& value);
  void set_market(const char* value);
  void set_market(const char* value, size_t size);
  std::string* mutable_market();
  std::string* release_market();
  void set_allocated_market(std::string* market);
  private:
  const std::string& _internal_market() const;
  void _internal_set_market(const std::string& value);
  std::string* _internal_mutable_market();
  public:

  // string symbol = 3;
  void clear_symbol();
  const std::string& symbol() const;
  void set_symbol(const std::string& value);
  void set_symbol(std::string&& value);
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  std::string* mutable_symbol();
  std::string* release_symbol();
  void set_allocated_symbol(std::string* symbol);
  private:
  const std::string& _internal_symbol() const;
  void _internal_set_symbol(const std::string& value);
  std::string* _internal_mutable_symbol();
  public:

  // string tag = 4;
  void clear_tag();
  const std::string& tag() const;
  void set_tag(const std::string& value);
  void set_tag(std::string&& value);
  void set_tag(const char* value);
  void set_tag(const char* value, size_t size);
  std::string* mutable_tag();
  std::string* release_tag();
  void set_allocated_tag(std::string* tag);
  private:
  const std::string& _internal_tag() const;
  void _internal_set_tag(const std::string& value);
  std::string* _internal_mutable_tag();
  public:

  // @@protoc_insertion_point(class_scope:tradingdb2pb.RequestGetCandles)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr market_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr symbol_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tradingdb2_2eproto;
};
// -------------------------------------------------------------------

class ReplyGetCandles :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tradingdb2pb.ReplyGetCandles) */ {
 public:
  ReplyGetCandles();
  virtual ~ReplyGetCandles();

  ReplyGetCandles(const ReplyGetCandles& from);
  ReplyGetCandles(ReplyGetCandles&& from) noexcept
    : ReplyGetCandles() {
    *this = ::std::move(from);
  }

  inline ReplyGetCandles& operator=(const ReplyGetCandles& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReplyGetCandles& operator=(ReplyGetCandles&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReplyGetCandles& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReplyGetCandles* internal_default_instance() {
    return reinterpret_cast<const ReplyGetCandles*>(
               &_ReplyGetCandles_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ReplyGetCandles& a, ReplyGetCandles& b) {
    a.Swap(&b);
  }
  inline void Swap(ReplyGetCandles* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReplyGetCandles* New() const final {
    return CreateMaybeMessage<ReplyGetCandles>(nullptr);
  }

  ReplyGetCandles* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReplyGetCandles>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReplyGetCandles& from);
  void MergeFrom(const ReplyGetCandles& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReplyGetCandles* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tradingdb2pb.ReplyGetCandles";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tradingdb2_2eproto);
    return ::descriptor_table_tradingdb2_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCandlesFieldNumber = 1,
  };
  // .tradingdb2pb.Candles candles = 1;
  bool has_candles() const;
  private:
  bool _internal_has_candles() const;
  public:
  void clear_candles();
  const ::tradingdb2pb::Candles& candles() const;
  ::tradingdb2pb::Candles* release_candles();
  ::tradingdb2pb::Candles* mutable_candles();
  void set_allocated_candles(::tradingdb2pb::Candles* candles);
  private:
  const ::tradingdb2pb::Candles& _internal_candles() const;
  ::tradingdb2pb::Candles* _internal_mutable_candles();
  public:

  // @@protoc_insertion_point(class_scope:tradingdb2pb.ReplyGetCandles)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::tradingdb2pb::Candles* candles_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tradingdb2_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Candle

// int64 ts = 1;
inline void Candle::clear_ts() {
  ts_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Candle::_internal_ts() const {
  return ts_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Candle::ts() const {
  // @@protoc_insertion_point(field_get:tradingdb2pb.Candle.ts)
  return _internal_ts();
}
inline void Candle::_internal_set_ts(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  ts_ = value;
}
inline void Candle::set_ts(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_ts(value);
  // @@protoc_insertion_point(field_set:tradingdb2pb.Candle.ts)
}

// int64 open = 2;
inline void Candle::clear_open() {
  open_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Candle::_internal_open() const {
  return open_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Candle::open() const {
  // @@protoc_insertion_point(field_get:tradingdb2pb.Candle.open)
  return _internal_open();
}
inline void Candle::_internal_set_open(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  open_ = value;
}
inline void Candle::set_open(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_open(value);
  // @@protoc_insertion_point(field_set:tradingdb2pb.Candle.open)
}

// int64 close = 3;
inline void Candle::clear_close() {
  close_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Candle::_internal_close() const {
  return close_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Candle::close() const {
  // @@protoc_insertion_point(field_get:tradingdb2pb.Candle.close)
  return _internal_close();
}
inline void Candle::_internal_set_close(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  close_ = value;
}
inline void Candle::set_close(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_close(value);
  // @@protoc_insertion_point(field_set:tradingdb2pb.Candle.close)
}

// int64 high = 4;
inline void Candle::clear_high() {
  high_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Candle::_internal_high() const {
  return high_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Candle::high() const {
  // @@protoc_insertion_point(field_get:tradingdb2pb.Candle.high)
  return _internal_high();
}
inline void Candle::_internal_set_high(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  high_ = value;
}
inline void Candle::set_high(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_high(value);
  // @@protoc_insertion_point(field_set:tradingdb2pb.Candle.high)
}

// int64 low = 5;
inline void Candle::clear_low() {
  low_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Candle::_internal_low() const {
  return low_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Candle::low() const {
  // @@protoc_insertion_point(field_get:tradingdb2pb.Candle.low)
  return _internal_low();
}
inline void Candle::_internal_set_low(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  low_ = value;
}
inline void Candle::set_low(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_low(value);
  // @@protoc_insertion_point(field_set:tradingdb2pb.Candle.low)
}

// int64 volume = 6;
inline void Candle::clear_volume() {
  volume_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Candle::_internal_volume() const {
  return volume_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Candle::volume() const {
  // @@protoc_insertion_point(field_get:tradingdb2pb.Candle.volume)
  return _internal_volume();
}
inline void Candle::_internal_set_volume(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  volume_ = value;
}
inline void Candle::set_volume(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_volume(value);
  // @@protoc_insertion_point(field_set:tradingdb2pb.Candle.volume)
}

// int64 openInterest = 7;
inline void Candle::clear_openinterest() {
  openinterest_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Candle::_internal_openinterest() const {
  return openinterest_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Candle::openinterest() const {
  // @@protoc_insertion_point(field_get:tradingdb2pb.Candle.openInterest)
  return _internal_openinterest();
}
inline void Candle::_internal_set_openinterest(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  openinterest_ = value;
}
inline void Candle::set_openinterest(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_openinterest(value);
  // @@protoc_insertion_point(field_set:tradingdb2pb.Candle.openInterest)
}

// int64 trades = 8;
inline void Candle::clear_trades() {
  trades_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Candle::_internal_trades() const {
  return trades_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Candle::trades() const {
  // @@protoc_insertion_point(field_get:tradingdb2pb.Candle.trades)
  return _internal_trades();
}
inline void Candle::_internal_set_trades(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  trades_ = value;
}
inline void Candle::set_trades(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_trades(value);
  // @@protoc_insertion_point(field_set:tradingdb2pb.Candle.trades)
}

// double vwap = 9;
inline void Candle::clear_vwap() {
  vwap_ = 0;
}
inline double Candle::_internal_vwap() const {
  return vwap_;
}
inline double Candle::vwap() const {
  // @@protoc_insertion_point(field_get:tradingdb2pb.Candle.vwap)
  return _internal_vwap();
}
inline void Candle::_internal_set_vwap(double value) {
  
  vwap_ = value;
}
inline void Candle::set_vwap(double value) {
  _internal_set_vwap(value);
  // @@protoc_insertion_point(field_set:tradingdb2pb.Candle.vwap)
}

// int64 lastSize = 10;
inline void Candle::clear_lastsize() {
  lastsize_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Candle::_internal_lastsize() const {
  return lastsize_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Candle::lastsize() const {
  // @@protoc_insertion_point(field_get:tradingdb2pb.Candle.lastSize)
  return _internal_lastsize();
}
inline void Candle::_internal_set_lastsize(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  lastsize_ = value;
}
inline void Candle::set_lastsize(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_lastsize(value);
  // @@protoc_insertion_point(field_set:tradingdb2pb.Candle.lastSize)
}

// int64 turnover = 11;
inline void Candle::clear_turnover() {
  turnover_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Candle::_internal_turnover() const {
  return turnover_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Candle::turnover() const {
  // @@protoc_insertion_point(field_get:tradingdb2pb.Candle.turnover)
  return _internal_turnover();
}
inline void Candle::_internal_set_turnover(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  turnover_ = value;
}
inline void Candle::set_turnover(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_turnover(value);
  // @@protoc_insertion_point(field_set:tradingdb2pb.Candle.turnover)
}

// double homeNotional = 12;
inline void Candle::clear_homenotional() {
  homenotional_ = 0;
}
inline double Candle::_internal_homenotional() const {
  return homenotional_;
}
inline double Candle::homenotional() const {
  // @@protoc_insertion_point(field_get:tradingdb2pb.Candle.homeNotional)
  return _internal_homenotional();
}
inline void Candle::_internal_set_homenotional(double value) {
  
  homenotional_ = value;
}
inline void Candle::set_homenotional(double value) {
  _internal_set_homenotional(value);
  // @@protoc_insertion_point(field_set:tradingdb2pb.Candle.homeNotional)
}

// double foreignNotional = 13;
inline void Candle::clear_foreignnotional() {
  foreignnotional_ = 0;
}
inline double Candle::_internal_foreignnotional() const {
  return foreignnotional_;
}
inline double Candle::foreignnotional() const {
  // @@protoc_insertion_point(field_get:tradingdb2pb.Candle.foreignNotional)
  return _internal_foreignnotional();
}
inline void Candle::_internal_set_foreignnotional(double value) {
  
  foreignnotional_ = value;
}
inline void Candle::set_foreignnotional(double value) {
  _internal_set_foreignnotional(value);
  // @@protoc_insertion_point(field_set:tradingdb2pb.Candle.foreignNotional)
}

// -------------------------------------------------------------------

// Candles

// string market = 1;
inline void Candles::clear_market() {
  market_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Candles::market() const {
  // @@protoc_insertion_point(field_get:tradingdb2pb.Candles.market)
  return _internal_market();
}
inline void Candles::set_market(const std::string& value) {
  _internal_set_market(value);
  // @@protoc_insertion_point(field_set:tradingdb2pb.Candles.market)
}
inline std::string* Candles::mutable_market() {
  // @@protoc_insertion_point(field_mutable:tradingdb2pb.Candles.market)
  return _internal_mutable_market();
}
inline const std::string& Candles::_internal_market() const {
  return market_.GetNoArena();
}
inline void Candles::_internal_set_market(const std::string& value) {
  
  market_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Candles::set_market(std::string&& value) {
  
  market_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tradingdb2pb.Candles.market)
}
inline void Candles::set_market(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  market_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tradingdb2pb.Candles.market)
}
inline void Candles::set_market(const char* value, size_t size) {
  
  market_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tradingdb2pb.Candles.market)
}
inline std::string* Candles::_internal_mutable_market() {
  
  return market_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Candles::release_market() {
  // @@protoc_insertion_point(field_release:tradingdb2pb.Candles.market)
  
  return market_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Candles::set_allocated_market(std::string* market) {
  if (market != nullptr) {
    
  } else {
    
  }
  market_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), market);
  // @@protoc_insertion_point(field_set_allocated:tradingdb2pb.Candles.market)
}

// string symbol = 2;
inline void Candles::clear_symbol() {
  symbol_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Candles::symbol() const {
  // @@protoc_insertion_point(field_get:tradingdb2pb.Candles.symbol)
  return _internal_symbol();
}
inline void Candles::set_symbol(const std::string& value) {
  _internal_set_symbol(value);
  // @@protoc_insertion_point(field_set:tradingdb2pb.Candles.symbol)
}
inline std::string* Candles::mutable_symbol() {
  // @@protoc_insertion_point(field_mutable:tradingdb2pb.Candles.symbol)
  return _internal_mutable_symbol();
}
inline const std::string& Candles::_internal_symbol() const {
  return symbol_.GetNoArena();
}
inline void Candles::_internal_set_symbol(const std::string& value) {
  
  symbol_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Candles::set_symbol(std::string&& value) {
  
  symbol_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tradingdb2pb.Candles.symbol)
}
inline void Candles::set_symbol(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  symbol_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tradingdb2pb.Candles.symbol)
}
inline void Candles::set_symbol(const char* value, size_t size) {
  
  symbol_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tradingdb2pb.Candles.symbol)
}
inline std::string* Candles::_internal_mutable_symbol() {
  
  return symbol_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Candles::release_symbol() {
  // @@protoc_insertion_point(field_release:tradingdb2pb.Candles.symbol)
  
  return symbol_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Candles::set_allocated_symbol(std::string* symbol) {
  if (symbol != nullptr) {
    
  } else {
    
  }
  symbol_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), symbol);
  // @@protoc_insertion_point(field_set_allocated:tradingdb2pb.Candles.symbol)
}

// string tag = 3;
inline void Candles::clear_tag() {
  tag_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Candles::tag() const {
  // @@protoc_insertion_point(field_get:tradingdb2pb.Candles.tag)
  return _internal_tag();
}
inline void Candles::set_tag(const std::string& value) {
  _internal_set_tag(value);
  // @@protoc_insertion_point(field_set:tradingdb2pb.Candles.tag)
}
inline std::string* Candles::mutable_tag() {
  // @@protoc_insertion_point(field_mutable:tradingdb2pb.Candles.tag)
  return _internal_mutable_tag();
}
inline const std::string& Candles::_internal_tag() const {
  return tag_.GetNoArena();
}
inline void Candles::_internal_set_tag(const std::string& value) {
  
  tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Candles::set_tag(std::string&& value) {
  
  tag_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tradingdb2pb.Candles.tag)
}
inline void Candles::set_tag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tradingdb2pb.Candles.tag)
}
inline void Candles::set_tag(const char* value, size_t size) {
  
  tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tradingdb2pb.Candles.tag)
}
inline std::string* Candles::_internal_mutable_tag() {
  
  return tag_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Candles::release_tag() {
  // @@protoc_insertion_point(field_release:tradingdb2pb.Candles.tag)
  
  return tag_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Candles::set_allocated_tag(std::string* tag) {
  if (tag != nullptr) {
    
  } else {
    
  }
  tag_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tag);
  // @@protoc_insertion_point(field_set_allocated:tradingdb2pb.Candles.tag)
}

// repeated .tradingdb2pb.Candle candles = 4;
inline int Candles::_internal_candles_size() const {
  return candles_.size();
}
inline int Candles::candles_size() const {
  return _internal_candles_size();
}
inline void Candles::clear_candles() {
  candles_.Clear();
}
inline ::tradingdb2pb::Candle* Candles::mutable_candles(int index) {
  // @@protoc_insertion_point(field_mutable:tradingdb2pb.Candles.candles)
  return candles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tradingdb2pb::Candle >*
Candles::mutable_candles() {
  // @@protoc_insertion_point(field_mutable_list:tradingdb2pb.Candles.candles)
  return &candles_;
}
inline const ::tradingdb2pb::Candle& Candles::_internal_candles(int index) const {
  return candles_.Get(index);
}
inline const ::tradingdb2pb::Candle& Candles::candles(int index) const {
  // @@protoc_insertion_point(field_get:tradingdb2pb.Candles.candles)
  return _internal_candles(index);
}
inline ::tradingdb2pb::Candle* Candles::_internal_add_candles() {
  return candles_.Add();
}
inline ::tradingdb2pb::Candle* Candles::add_candles() {
  // @@protoc_insertion_point(field_add:tradingdb2pb.Candles.candles)
  return _internal_add_candles();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tradingdb2pb::Candle >&
Candles::candles() const {
  // @@protoc_insertion_point(field_list:tradingdb2pb.Candles.candles)
  return candles_;
}

// -------------------------------------------------------------------

// RequestUpdCandles

// string token = 1;
inline void RequestUpdCandles::clear_token() {
  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RequestUpdCandles::token() const {
  // @@protoc_insertion_point(field_get:tradingdb2pb.RequestUpdCandles.token)
  return _internal_token();
}
inline void RequestUpdCandles::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:tradingdb2pb.RequestUpdCandles.token)
}
inline std::string* RequestUpdCandles::mutable_token() {
  // @@protoc_insertion_point(field_mutable:tradingdb2pb.RequestUpdCandles.token)
  return _internal_mutable_token();
}
inline const std::string& RequestUpdCandles::_internal_token() const {
  return token_.GetNoArena();
}
inline void RequestUpdCandles::_internal_set_token(const std::string& value) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RequestUpdCandles::set_token(std::string&& value) {
  
  token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tradingdb2pb.RequestUpdCandles.token)
}
inline void RequestUpdCandles::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tradingdb2pb.RequestUpdCandles.token)
}
inline void RequestUpdCandles::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tradingdb2pb.RequestUpdCandles.token)
}
inline std::string* RequestUpdCandles::_internal_mutable_token() {
  
  return token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RequestUpdCandles::release_token() {
  // @@protoc_insertion_point(field_release:tradingdb2pb.RequestUpdCandles.token)
  
  return token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RequestUpdCandles::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:tradingdb2pb.RequestUpdCandles.token)
}

// .tradingdb2pb.Candles candles = 2;
inline bool RequestUpdCandles::_internal_has_candles() const {
  return this != internal_default_instance() && candles_ != nullptr;
}
inline bool RequestUpdCandles::has_candles() const {
  return _internal_has_candles();
}
inline void RequestUpdCandles::clear_candles() {
  if (GetArenaNoVirtual() == nullptr && candles_ != nullptr) {
    delete candles_;
  }
  candles_ = nullptr;
}
inline const ::tradingdb2pb::Candles& RequestUpdCandles::_internal_candles() const {
  const ::tradingdb2pb::Candles* p = candles_;
  return p != nullptr ? *p : *reinterpret_cast<const ::tradingdb2pb::Candles*>(
      &::tradingdb2pb::_Candles_default_instance_);
}
inline const ::tradingdb2pb::Candles& RequestUpdCandles::candles() const {
  // @@protoc_insertion_point(field_get:tradingdb2pb.RequestUpdCandles.candles)
  return _internal_candles();
}
inline ::tradingdb2pb::Candles* RequestUpdCandles::release_candles() {
  // @@protoc_insertion_point(field_release:tradingdb2pb.RequestUpdCandles.candles)
  
  ::tradingdb2pb::Candles* temp = candles_;
  candles_ = nullptr;
  return temp;
}
inline ::tradingdb2pb::Candles* RequestUpdCandles::_internal_mutable_candles() {
  
  if (candles_ == nullptr) {
    auto* p = CreateMaybeMessage<::tradingdb2pb::Candles>(GetArenaNoVirtual());
    candles_ = p;
  }
  return candles_;
}
inline ::tradingdb2pb::Candles* RequestUpdCandles::mutable_candles() {
  // @@protoc_insertion_point(field_mutable:tradingdb2pb.RequestUpdCandles.candles)
  return _internal_mutable_candles();
}
inline void RequestUpdCandles::set_allocated_candles(::tradingdb2pb::Candles* candles) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete candles_;
  }
  if (candles) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      candles = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, candles, submessage_arena);
    }
    
  } else {
    
  }
  candles_ = candles;
  // @@protoc_insertion_point(field_set_allocated:tradingdb2pb.RequestUpdCandles.candles)
}

// -------------------------------------------------------------------

// ReplyUpdCandles

// int32 lengthOK = 1;
inline void ReplyUpdCandles::clear_lengthok() {
  lengthok_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReplyUpdCandles::_internal_lengthok() const {
  return lengthok_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReplyUpdCandles::lengthok() const {
  // @@protoc_insertion_point(field_get:tradingdb2pb.ReplyUpdCandles.lengthOK)
  return _internal_lengthok();
}
inline void ReplyUpdCandles::_internal_set_lengthok(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  lengthok_ = value;
}
inline void ReplyUpdCandles::set_lengthok(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lengthok(value);
  // @@protoc_insertion_point(field_set:tradingdb2pb.ReplyUpdCandles.lengthOK)
}

// -------------------------------------------------------------------

// RequestGetCandles

// string token = 1;
inline void RequestGetCandles::clear_token() {
  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RequestGetCandles::token() const {
  // @@protoc_insertion_point(field_get:tradingdb2pb.RequestGetCandles.token)
  return _internal_token();
}
inline void RequestGetCandles::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:tradingdb2pb.RequestGetCandles.token)
}
inline std::string* RequestGetCandles::mutable_token() {
  // @@protoc_insertion_point(field_mutable:tradingdb2pb.RequestGetCandles.token)
  return _internal_mutable_token();
}
inline const std::string& RequestGetCandles::_internal_token() const {
  return token_.GetNoArena();
}
inline void RequestGetCandles::_internal_set_token(const std::string& value) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RequestGetCandles::set_token(std::string&& value) {
  
  token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tradingdb2pb.RequestGetCandles.token)
}
inline void RequestGetCandles::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tradingdb2pb.RequestGetCandles.token)
}
inline void RequestGetCandles::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tradingdb2pb.RequestGetCandles.token)
}
inline std::string* RequestGetCandles::_internal_mutable_token() {
  
  return token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RequestGetCandles::release_token() {
  // @@protoc_insertion_point(field_release:tradingdb2pb.RequestGetCandles.token)
  
  return token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RequestGetCandles::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:tradingdb2pb.RequestGetCandles.token)
}

// string market = 2;
inline void RequestGetCandles::clear_market() {
  market_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RequestGetCandles::market() const {
  // @@protoc_insertion_point(field_get:tradingdb2pb.RequestGetCandles.market)
  return _internal_market();
}
inline void RequestGetCandles::set_market(const std::string& value) {
  _internal_set_market(value);
  // @@protoc_insertion_point(field_set:tradingdb2pb.RequestGetCandles.market)
}
inline std::string* RequestGetCandles::mutable_market() {
  // @@protoc_insertion_point(field_mutable:tradingdb2pb.RequestGetCandles.market)
  return _internal_mutable_market();
}
inline const std::string& RequestGetCandles::_internal_market() const {
  return market_.GetNoArena();
}
inline void RequestGetCandles::_internal_set_market(const std::string& value) {
  
  market_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RequestGetCandles::set_market(std::string&& value) {
  
  market_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tradingdb2pb.RequestGetCandles.market)
}
inline void RequestGetCandles::set_market(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  market_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tradingdb2pb.RequestGetCandles.market)
}
inline void RequestGetCandles::set_market(const char* value, size_t size) {
  
  market_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tradingdb2pb.RequestGetCandles.market)
}
inline std::string* RequestGetCandles::_internal_mutable_market() {
  
  return market_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RequestGetCandles::release_market() {
  // @@protoc_insertion_point(field_release:tradingdb2pb.RequestGetCandles.market)
  
  return market_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RequestGetCandles::set_allocated_market(std::string* market) {
  if (market != nullptr) {
    
  } else {
    
  }
  market_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), market);
  // @@protoc_insertion_point(field_set_allocated:tradingdb2pb.RequestGetCandles.market)
}

// string symbol = 3;
inline void RequestGetCandles::clear_symbol() {
  symbol_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RequestGetCandles::symbol() const {
  // @@protoc_insertion_point(field_get:tradingdb2pb.RequestGetCandles.symbol)
  return _internal_symbol();
}
inline void RequestGetCandles::set_symbol(const std::string& value) {
  _internal_set_symbol(value);
  // @@protoc_insertion_point(field_set:tradingdb2pb.RequestGetCandles.symbol)
}
inline std::string* RequestGetCandles::mutable_symbol() {
  // @@protoc_insertion_point(field_mutable:tradingdb2pb.RequestGetCandles.symbol)
  return _internal_mutable_symbol();
}
inline const std::string& RequestGetCandles::_internal_symbol() const {
  return symbol_.GetNoArena();
}
inline void RequestGetCandles::_internal_set_symbol(const std::string& value) {
  
  symbol_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RequestGetCandles::set_symbol(std::string&& value) {
  
  symbol_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tradingdb2pb.RequestGetCandles.symbol)
}
inline void RequestGetCandles::set_symbol(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  symbol_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tradingdb2pb.RequestGetCandles.symbol)
}
inline void RequestGetCandles::set_symbol(const char* value, size_t size) {
  
  symbol_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tradingdb2pb.RequestGetCandles.symbol)
}
inline std::string* RequestGetCandles::_internal_mutable_symbol() {
  
  return symbol_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RequestGetCandles::release_symbol() {
  // @@protoc_insertion_point(field_release:tradingdb2pb.RequestGetCandles.symbol)
  
  return symbol_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RequestGetCandles::set_allocated_symbol(std::string* symbol) {
  if (symbol != nullptr) {
    
  } else {
    
  }
  symbol_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), symbol);
  // @@protoc_insertion_point(field_set_allocated:tradingdb2pb.RequestGetCandles.symbol)
}

// string tag = 4;
inline void RequestGetCandles::clear_tag() {
  tag_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RequestGetCandles::tag() const {
  // @@protoc_insertion_point(field_get:tradingdb2pb.RequestGetCandles.tag)
  return _internal_tag();
}
inline void RequestGetCandles::set_tag(const std::string& value) {
  _internal_set_tag(value);
  // @@protoc_insertion_point(field_set:tradingdb2pb.RequestGetCandles.tag)
}
inline std::string* RequestGetCandles::mutable_tag() {
  // @@protoc_insertion_point(field_mutable:tradingdb2pb.RequestGetCandles.tag)
  return _internal_mutable_tag();
}
inline const std::string& RequestGetCandles::_internal_tag() const {
  return tag_.GetNoArena();
}
inline void RequestGetCandles::_internal_set_tag(const std::string& value) {
  
  tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RequestGetCandles::set_tag(std::string&& value) {
  
  tag_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tradingdb2pb.RequestGetCandles.tag)
}
inline void RequestGetCandles::set_tag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tradingdb2pb.RequestGetCandles.tag)
}
inline void RequestGetCandles::set_tag(const char* value, size_t size) {
  
  tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tradingdb2pb.RequestGetCandles.tag)
}
inline std::string* RequestGetCandles::_internal_mutable_tag() {
  
  return tag_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RequestGetCandles::release_tag() {
  // @@protoc_insertion_point(field_release:tradingdb2pb.RequestGetCandles.tag)
  
  return tag_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RequestGetCandles::set_allocated_tag(std::string* tag) {
  if (tag != nullptr) {
    
  } else {
    
  }
  tag_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tag);
  // @@protoc_insertion_point(field_set_allocated:tradingdb2pb.RequestGetCandles.tag)
}

// -------------------------------------------------------------------

// ReplyGetCandles

// .tradingdb2pb.Candles candles = 1;
inline bool ReplyGetCandles::_internal_has_candles() const {
  return this != internal_default_instance() && candles_ != nullptr;
}
inline bool ReplyGetCandles::has_candles() const {
  return _internal_has_candles();
}
inline void ReplyGetCandles::clear_candles() {
  if (GetArenaNoVirtual() == nullptr && candles_ != nullptr) {
    delete candles_;
  }
  candles_ = nullptr;
}
inline const ::tradingdb2pb::Candles& ReplyGetCandles::_internal_candles() const {
  const ::tradingdb2pb::Candles* p = candles_;
  return p != nullptr ? *p : *reinterpret_cast<const ::tradingdb2pb::Candles*>(
      &::tradingdb2pb::_Candles_default_instance_);
}
inline const ::tradingdb2pb::Candles& ReplyGetCandles::candles() const {
  // @@protoc_insertion_point(field_get:tradingdb2pb.ReplyGetCandles.candles)
  return _internal_candles();
}
inline ::tradingdb2pb::Candles* ReplyGetCandles::release_candles() {
  // @@protoc_insertion_point(field_release:tradingdb2pb.ReplyGetCandles.candles)
  
  ::tradingdb2pb::Candles* temp = candles_;
  candles_ = nullptr;
  return temp;
}
inline ::tradingdb2pb::Candles* ReplyGetCandles::_internal_mutable_candles() {
  
  if (candles_ == nullptr) {
    auto* p = CreateMaybeMessage<::tradingdb2pb::Candles>(GetArenaNoVirtual());
    candles_ = p;
  }
  return candles_;
}
inline ::tradingdb2pb::Candles* ReplyGetCandles::mutable_candles() {
  // @@protoc_insertion_point(field_mutable:tradingdb2pb.ReplyGetCandles.candles)
  return _internal_mutable_candles();
}
inline void ReplyGetCandles::set_allocated_candles(::tradingdb2pb::Candles* candles) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete candles_;
  }
  if (candles) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      candles = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, candles, submessage_arena);
    }
    
  } else {
    
  }
  candles_ = candles;
  // @@protoc_insertion_point(field_set_allocated:tradingdb2pb.ReplyGetCandles.candles)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace tradingdb2pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tradingdb2_2eproto

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tradingdb2.proto

#include "tradingdb2.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_tradingdb2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Candle_tradingdb2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tradingdb2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Candles_tradingdb2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tradingdb2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Fund_tradingdb2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tradingdb2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FundManager_tradingdb2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tradingdb2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FundResult_tradingdb2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tradingdb2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FundSize_tradingdb2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tradingdb2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SymbolInfo_tradingdb2_2eproto;
namespace tradingdb2pb {
class CandleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Candle> _instance;
} _Candle_default_instance_;
class CandlesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Candles> _instance;
} _Candles_default_instance_;
class FundSizeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FundSize> _instance;
} _FundSize_default_instance_;
class FundManagerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FundManager> _instance;
} _FundManager_default_instance_;
class FundResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FundResult> _instance;
} _FundResult_default_instance_;
class FundDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Fund> _instance;
} _Fund_default_instance_;
class SymbolInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SymbolInfo> _instance;
} _SymbolInfo_default_instance_;
class RequestUpdCandlesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RequestUpdCandles> _instance;
} _RequestUpdCandles_default_instance_;
class ReplyUpdCandlesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReplyUpdCandles> _instance;
} _ReplyUpdCandles_default_instance_;
class RequestGetCandlesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RequestGetCandles> _instance;
} _RequestGetCandles_default_instance_;
class ReplyGetCandlesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReplyGetCandles> _instance;
} _ReplyGetCandles_default_instance_;
class RequestUpdSymbolDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RequestUpdSymbol> _instance;
} _RequestUpdSymbol_default_instance_;
class ReplyUpdSymbolDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReplyUpdSymbol> _instance;
} _ReplyUpdSymbol_default_instance_;
class RequestGetSymbolDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RequestGetSymbol> _instance;
} _RequestGetSymbol_default_instance_;
class ReplyGetSymbolDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReplyGetSymbol> _instance;
} _ReplyGetSymbol_default_instance_;
class RequestGetSymbolsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RequestGetSymbols> _instance;
} _RequestGetSymbols_default_instance_;
}  // namespace tradingdb2pb
static void InitDefaultsscc_info_Candle_tradingdb2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tradingdb2pb::_Candle_default_instance_;
    new (ptr) ::tradingdb2pb::Candle();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tradingdb2pb::Candle::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Candle_tradingdb2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Candle_tradingdb2_2eproto}, {}};

static void InitDefaultsscc_info_Candles_tradingdb2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tradingdb2pb::_Candles_default_instance_;
    new (ptr) ::tradingdb2pb::Candles();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tradingdb2pb::Candles::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Candles_tradingdb2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Candles_tradingdb2_2eproto}, {
      &scc_info_Candle_tradingdb2_2eproto.base,}};

static void InitDefaultsscc_info_Fund_tradingdb2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tradingdb2pb::_Fund_default_instance_;
    new (ptr) ::tradingdb2pb::Fund();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tradingdb2pb::Fund::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Fund_tradingdb2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_Fund_tradingdb2_2eproto}, {
      &scc_info_FundSize_tradingdb2_2eproto.base,
      &scc_info_FundManager_tradingdb2_2eproto.base,
      &scc_info_FundResult_tradingdb2_2eproto.base,}};

static void InitDefaultsscc_info_FundManager_tradingdb2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tradingdb2pb::_FundManager_default_instance_;
    new (ptr) ::tradingdb2pb::FundManager();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tradingdb2pb::FundManager::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FundManager_tradingdb2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FundManager_tradingdb2_2eproto}, {
      &scc_info_FundResult_tradingdb2_2eproto.base,}};

static void InitDefaultsscc_info_FundResult_tradingdb2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tradingdb2pb::_FundResult_default_instance_;
    new (ptr) ::tradingdb2pb::FundResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tradingdb2pb::FundResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FundResult_tradingdb2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FundResult_tradingdb2_2eproto}, {}};

static void InitDefaultsscc_info_FundSize_tradingdb2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tradingdb2pb::_FundSize_default_instance_;
    new (ptr) ::tradingdb2pb::FundSize();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tradingdb2pb::FundSize::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FundSize_tradingdb2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FundSize_tradingdb2_2eproto}, {}};

static void InitDefaultsscc_info_ReplyGetCandles_tradingdb2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tradingdb2pb::_ReplyGetCandles_default_instance_;
    new (ptr) ::tradingdb2pb::ReplyGetCandles();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tradingdb2pb::ReplyGetCandles::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReplyGetCandles_tradingdb2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ReplyGetCandles_tradingdb2_2eproto}, {
      &scc_info_Candles_tradingdb2_2eproto.base,}};

static void InitDefaultsscc_info_ReplyGetSymbol_tradingdb2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tradingdb2pb::_ReplyGetSymbol_default_instance_;
    new (ptr) ::tradingdb2pb::ReplyGetSymbol();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tradingdb2pb::ReplyGetSymbol::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReplyGetSymbol_tradingdb2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ReplyGetSymbol_tradingdb2_2eproto}, {
      &scc_info_SymbolInfo_tradingdb2_2eproto.base,}};

static void InitDefaultsscc_info_ReplyUpdCandles_tradingdb2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tradingdb2pb::_ReplyUpdCandles_default_instance_;
    new (ptr) ::tradingdb2pb::ReplyUpdCandles();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tradingdb2pb::ReplyUpdCandles::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReplyUpdCandles_tradingdb2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ReplyUpdCandles_tradingdb2_2eproto}, {}};

static void InitDefaultsscc_info_ReplyUpdSymbol_tradingdb2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tradingdb2pb::_ReplyUpdSymbol_default_instance_;
    new (ptr) ::tradingdb2pb::ReplyUpdSymbol();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tradingdb2pb::ReplyUpdSymbol::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReplyUpdSymbol_tradingdb2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ReplyUpdSymbol_tradingdb2_2eproto}, {}};

static void InitDefaultsscc_info_RequestGetCandles_tradingdb2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tradingdb2pb::_RequestGetCandles_default_instance_;
    new (ptr) ::tradingdb2pb::RequestGetCandles();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tradingdb2pb::RequestGetCandles::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RequestGetCandles_tradingdb2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RequestGetCandles_tradingdb2_2eproto}, {}};

static void InitDefaultsscc_info_RequestGetSymbol_tradingdb2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tradingdb2pb::_RequestGetSymbol_default_instance_;
    new (ptr) ::tradingdb2pb::RequestGetSymbol();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tradingdb2pb::RequestGetSymbol::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RequestGetSymbol_tradingdb2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RequestGetSymbol_tradingdb2_2eproto}, {}};

static void InitDefaultsscc_info_RequestGetSymbols_tradingdb2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tradingdb2pb::_RequestGetSymbols_default_instance_;
    new (ptr) ::tradingdb2pb::RequestGetSymbols();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tradingdb2pb::RequestGetSymbols::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RequestGetSymbols_tradingdb2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RequestGetSymbols_tradingdb2_2eproto}, {}};

static void InitDefaultsscc_info_RequestUpdCandles_tradingdb2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tradingdb2pb::_RequestUpdCandles_default_instance_;
    new (ptr) ::tradingdb2pb::RequestUpdCandles();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tradingdb2pb::RequestUpdCandles::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RequestUpdCandles_tradingdb2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RequestUpdCandles_tradingdb2_2eproto}, {
      &scc_info_Candles_tradingdb2_2eproto.base,}};

static void InitDefaultsscc_info_RequestUpdSymbol_tradingdb2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tradingdb2pb::_RequestUpdSymbol_default_instance_;
    new (ptr) ::tradingdb2pb::RequestUpdSymbol();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tradingdb2pb::RequestUpdSymbol::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RequestUpdSymbol_tradingdb2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RequestUpdSymbol_tradingdb2_2eproto}, {
      &scc_info_SymbolInfo_tradingdb2_2eproto.base,}};

static void InitDefaultsscc_info_SymbolInfo_tradingdb2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tradingdb2pb::_SymbolInfo_default_instance_;
    new (ptr) ::tradingdb2pb::SymbolInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tradingdb2pb::SymbolInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SymbolInfo_tradingdb2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SymbolInfo_tradingdb2_2eproto}, {
      &scc_info_Fund_tradingdb2_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_tradingdb2_2eproto[16];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_tradingdb2_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_tradingdb2_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_tradingdb2_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tradingdb2pb::Candle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tradingdb2pb::Candle, ts_),
  PROTOBUF_FIELD_OFFSET(::tradingdb2pb::Candle, open_),
  PROTOBUF_FIELD_OFFSET(::tradingdb2pb::Candle, close_),
  PROTOBUF_FIELD_OFFSET(::tradingdb2pb::Candle, high_),
  PROTOBUF_FIELD_OFFSET(::tradingdb2pb::Candle, low_),
  PROTOBUF_FIELD_OFFSET(::tradingdb2pb::Candle, volume_),
  PROTOBUF_FIELD_OFFSET(::tradingdb2pb::Candle, openinterest_),
  PROTOBUF_FIELD_OFFSET(::tradingdb2pb::Candle, trades_),
  PROTOBUF_FIELD_OFFSET(::tradingdb2pb::Candle, vwap_),
  PROTOBUF_FIELD_OFFSET(::tradingdb2pb::Candle, lastsize_),
  PROTOBUF_FIELD_OFFSET(::tradingdb2pb::Candle, turnover_),
  PROTOBUF_FIELD_OFFSET(::tradingdb2pb::Candle, homenotional_),
  PROTOBUF_FIELD_OFFSET(::tradingdb2pb::Candle, foreignnotional_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tradingdb2pb::Candles, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tradingdb2pb::Candles, market_),
  PROTOBUF_FIELD_OFFSET(::tradingdb2pb::Candles, symbol_),
  PROTOBUF_FIELD_OFFSET(::tradingdb2pb::Candles, tag_),
  PROTOBUF_FIELD_OFFSET(::tradingdb2pb::Candles, candles_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tradingdb2pb::FundSize, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tradingdb2pb::FundSize, size_),
  PROTOBUF_FIELD_OFFSET(::tradingdb2pb::FundSize, time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tradingdb2pb::FundManager, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tradingdb2pb::FundManager, name_),
  PROTOBUF_FIELD_OFFSET(::tradingdb2pb::FundManager, starttime_),
  PROTOBUF_FIELD_OFFSET(::tradingdb2pb::FundManager, endtime_),
  PROTOBUF_FIELD_OFFSET(::tradingdb2pb::FundManager, birthyear_),
  PROTOBUF_FIELD_OFFSET(::tradingdb2pb::FundManager, sex_),
  PROTOBUF_FIELD_OFFSET(::tradingdb2pb::FundManager, education_),
  PROTOBUF_FIELD_OFFSET(::tradingdb2pb::FundManager, country_),
  PROTOBUF_FIELD_OFFSET(::tradingdb2pb::FundManager, resume_),
  PROTOBUF_FIELD_OFFSET(::tradingdb2pb::FundManager, results_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tradingdb2pb::FundResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tradingdb2pb::FundResult, maxdrawdown_),
  PROTOBUF_FIELD_OFFSET(::tradingdb2pb::FundResult, sharpe_),
  PROTOBUF_FIELD_OFFSET(::tradingdb2pb::FundResult, annualizedreturns_),
  PROTOBUF_FIELD_OFFSET(::tradingdb2pb::FundResult, annualizedvolatility_),
  PROTOBUF_FIELD_OFFSET(::tradingdb2pb::FundResult, totalreturns_),
  PROTOBUF_FIELD_OFFSET(::tradingdb2pb::FundResult, starttime_),
  PROTOBUF_FIELD_OFFSET(::tradingdb2pb::FundResult, endtime_),
  PROTOBUF_FIELD_OFFSET(::tradingdb2pb::FundResult, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tradingdb2pb::Fund, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tradingdb2pb::Fund, code_),
  PROTOBUF_FIELD_OFFSET(::tradingdb2pb::Fund, name_),
  PROTOBUF_FIELD_OFFSET(::tradingdb2pb::Fund, tags_),
  PROTOBUF_FIELD_OFFSET(::tradingdb2pb::Fund, createtime_),
  PROTOBUF_FIELD_OFFSET(::tradingdb2pb::Fund, size_),
  PROTOBUF_FIELD_OFFSET(::tradingdb2pb::Fund, company_),
  PROTOBUF_FIELD_OFFSET(::tradingdb2pb::Fund, managers_),
  PROTOBUF_FIELD_OFFSET(::tradingdb2pb::Fund, results_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tradingdb2pb::SymbolInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tradingdb2pb::SymbolInfo, market_),
  PROTOBUF_FIELD_OFFSET(::tradingdb2pb::SymbolInfo, symbol_),
  PROTOBUF_FIELD_OFFSET(::tradingdb2pb::SymbolInfo, fund_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tradingdb2pb::RequestUpdCandles, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tradingdb2pb::RequestUpdCandles, token_),
  PROTOBUF_FIELD_OFFSET(::tradingdb2pb::RequestUpdCandles, candles_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tradingdb2pb::ReplyUpdCandles, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tradingdb2pb::ReplyUpdCandles, lengthok_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tradingdb2pb::RequestGetCandles, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tradingdb2pb::RequestGetCandles, token_),
  PROTOBUF_FIELD_OFFSET(::tradingdb2pb::RequestGetCandles, market_),
  PROTOBUF_FIELD_OFFSET(::tradingdb2pb::RequestGetCandles, symbol_),
  PROTOBUF_FIELD_OFFSET(::tradingdb2pb::RequestGetCandles, tag_),
  PROTOBUF_FIELD_OFFSET(::tradingdb2pb::RequestGetCandles, tsstart_),
  PROTOBUF_FIELD_OFFSET(::tradingdb2pb::RequestGetCandles, tsend_),
  PROTOBUF_FIELD_OFFSET(::tradingdb2pb::RequestGetCandles, tags_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tradingdb2pb::ReplyGetCandles, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tradingdb2pb::ReplyGetCandles, candles_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tradingdb2pb::RequestUpdSymbol, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tradingdb2pb::RequestUpdSymbol, token_),
  PROTOBUF_FIELD_OFFSET(::tradingdb2pb::RequestUpdSymbol, symbol_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tradingdb2pb::ReplyUpdSymbol, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tradingdb2pb::ReplyUpdSymbol, isok_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tradingdb2pb::RequestGetSymbol, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tradingdb2pb::RequestGetSymbol, token_),
  PROTOBUF_FIELD_OFFSET(::tradingdb2pb::RequestGetSymbol, market_),
  PROTOBUF_FIELD_OFFSET(::tradingdb2pb::RequestGetSymbol, symbol_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tradingdb2pb::ReplyGetSymbol, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tradingdb2pb::ReplyGetSymbol, symbol_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tradingdb2pb::RequestGetSymbols, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tradingdb2pb::RequestGetSymbols, token_),
  PROTOBUF_FIELD_OFFSET(::tradingdb2pb::RequestGetSymbols, market_),
  PROTOBUF_FIELD_OFFSET(::tradingdb2pb::RequestGetSymbols, symbols_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::tradingdb2pb::Candle)},
  { 18, -1, sizeof(::tradingdb2pb::Candles)},
  { 27, -1, sizeof(::tradingdb2pb::FundSize)},
  { 34, -1, sizeof(::tradingdb2pb::FundManager)},
  { 48, -1, sizeof(::tradingdb2pb::FundResult)},
  { 61, -1, sizeof(::tradingdb2pb::Fund)},
  { 74, -1, sizeof(::tradingdb2pb::SymbolInfo)},
  { 82, -1, sizeof(::tradingdb2pb::RequestUpdCandles)},
  { 89, -1, sizeof(::tradingdb2pb::ReplyUpdCandles)},
  { 95, -1, sizeof(::tradingdb2pb::RequestGetCandles)},
  { 107, -1, sizeof(::tradingdb2pb::ReplyGetCandles)},
  { 113, -1, sizeof(::tradingdb2pb::RequestUpdSymbol)},
  { 120, -1, sizeof(::tradingdb2pb::ReplyUpdSymbol)},
  { 126, -1, sizeof(::tradingdb2pb::RequestGetSymbol)},
  { 134, -1, sizeof(::tradingdb2pb::ReplyGetSymbol)},
  { 140, -1, sizeof(::tradingdb2pb::RequestGetSymbols)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tradingdb2pb::_Candle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tradingdb2pb::_Candles_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tradingdb2pb::_FundSize_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tradingdb2pb::_FundManager_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tradingdb2pb::_FundResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tradingdb2pb::_Fund_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tradingdb2pb::_SymbolInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tradingdb2pb::_RequestUpdCandles_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tradingdb2pb::_ReplyUpdCandles_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tradingdb2pb::_RequestGetCandles_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tradingdb2pb::_ReplyGetCandles_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tradingdb2pb::_RequestUpdSymbol_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tradingdb2pb::_ReplyUpdSymbol_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tradingdb2pb::_RequestGetSymbol_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tradingdb2pb::_ReplyGetSymbol_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tradingdb2pb::_RequestGetSymbols_default_instance_),
};

const char descriptor_table_protodef_tradingdb2_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020tradingdb2.proto\022\014tradingdb2pb\"\343\001\n\006Can"
  "dle\022\n\n\002ts\030\001 \001(\003\022\014\n\004open\030\002 \001(\003\022\r\n\005close\030\003"
  " \001(\003\022\014\n\004high\030\004 \001(\003\022\013\n\003low\030\005 \001(\003\022\016\n\006volum"
  "e\030\006 \001(\003\022\024\n\014openInterest\030\007 \001(\003\022\016\n\006trades\030"
  "\010 \001(\003\022\014\n\004vwap\030\t \001(\001\022\020\n\010lastSize\030\n \001(\003\022\020\n"
  "\010turnover\030\013 \001(\003\022\024\n\014homeNotional\030\014 \001(\001\022\027\n"
  "\017foreignNotional\030\r \001(\001\"]\n\007Candles\022\016\n\006mar"
  "ket\030\001 \001(\t\022\016\n\006symbol\030\002 \001(\t\022\013\n\003tag\030\003 \001(\t\022%"
  "\n\007candles\030\004 \003(\0132\024.tradingdb2pb.Candle\"&\n"
  "\010FundSize\022\014\n\004size\030\001 \001(\002\022\014\n\004time\030\002 \001(\003\"\276\001"
  "\n\013FundManager\022\014\n\004name\030\001 \001(\t\022\021\n\tstartTime"
  "\030\002 \001(\003\022\017\n\007endTime\030\003 \001(\003\022\021\n\tbirthYear\030\004 \001"
  "(\003\022\013\n\003sex\030\005 \001(\010\022\021\n\teducation\030\006 \001(\t\022\017\n\007co"
  "untry\030\007 \001(\t\022\016\n\006resume\030\010 \001(\t\022)\n\007results\030\t"
  " \003(\0132\030.tradingdb2pb.FundResult\"\262\001\n\nFundR"
  "esult\022\023\n\013maxDrawdown\030\001 \001(\002\022\016\n\006sharpe\030\002 \001"
  "(\002\022\031\n\021annualizedReturns\030\003 \001(\002\022\034\n\024annuali"
  "zedVolatility\030\004 \001(\002\022\024\n\014totalReturns\030\005 \001("
  "\002\022\021\n\tstartTime\030\006 \001(\003\022\017\n\007endTime\030\007 \001(\003\022\014\n"
  "\004name\030\010 \001(\t\"\323\001\n\004Fund\022\014\n\004code\030\001 \001(\t\022\014\n\004na"
  "me\030\002 \001(\t\022\014\n\004tags\030\003 \003(\t\022\022\n\ncreateTime\030\004 \001"
  "(\003\022$\n\004size\030\005 \003(\0132\026.tradingdb2pb.FundSize"
  "\022\017\n\007company\030\006 \001(\t\022+\n\010managers\030\007 \003(\0132\031.tr"
  "adingdb2pb.FundManager\022)\n\007results\030\010 \003(\0132"
  "\030.tradingdb2pb.FundResult\"N\n\nSymbolInfo\022"
  "\016\n\006market\030\001 \001(\t\022\016\n\006symbol\030\002 \001(\t\022 \n\004fund\030"
  "\003 \001(\0132\022.tradingdb2pb.Fund\"J\n\021RequestUpdC"
  "andles\022\r\n\005token\030\001 \001(\t\022&\n\007candles\030\002 \001(\0132\025"
  ".tradingdb2pb.Candles\"#\n\017ReplyUpdCandles"
  "\022\020\n\010lengthOK\030\001 \001(\005\"\201\001\n\021RequestGetCandles"
  "\022\r\n\005token\030\001 \001(\t\022\016\n\006market\030\002 \001(\t\022\016\n\006symbo"
  "l\030\003 \001(\t\022\017\n\003tag\030\004 \001(\tB\002\030\001\022\017\n\007tsStart\030\005 \001("
  "\003\022\r\n\005tsEnd\030\006 \001(\003\022\014\n\004tags\030\007 \003(\t\"9\n\017ReplyG"
  "etCandles\022&\n\007candles\030\001 \001(\0132\025.tradingdb2p"
  "b.Candles\"K\n\020RequestUpdSymbol\022\r\n\005token\030\001"
  " \001(\t\022(\n\006symbol\030\002 \001(\0132\030.tradingdb2pb.Symb"
  "olInfo\"\036\n\016ReplyUpdSymbol\022\014\n\004isOK\030\001 \001(\010\"A"
  "\n\020RequestGetSymbol\022\r\n\005token\030\001 \001(\t\022\016\n\006mar"
  "ket\030\002 \001(\t\022\016\n\006symbol\030\003 \001(\t\":\n\016ReplyGetSym"
  "bol\022(\n\006symbol\030\001 \001(\0132\030.tradingdb2pb.Symbo"
  "lInfo\"C\n\021RequestGetSymbols\022\r\n\005token\030\001 \001("
  "\t\022\016\n\006market\030\002 \001(\t\022\017\n\007symbols\030\003 \003(\t2\242\003\n\021T"
  "radingDB2Service\022P\n\nupdCandles\022\037.trading"
  "db2pb.RequestUpdCandles\032\035.tradingdb2pb.R"
  "eplyUpdCandles\"\000(\001\022P\n\ngetCandles\022\037.tradi"
  "ngdb2pb.RequestGetCandles\032\035.tradingdb2pb"
  ".ReplyGetCandles\"\0000\001\022K\n\tupdSymbol\022\036.trad"
  "ingdb2pb.RequestUpdSymbol\032\034.tradingdb2pb"
  ".ReplyUpdSymbol\"\000\022K\n\tgetSymbol\022\036.trading"
  "db2pb.RequestGetSymbol\032\034.tradingdb2pb.Re"
  "plyGetSymbol\"\000\022O\n\ngetSymbols\022\037.tradingdb"
  "2pb.RequestGetSymbols\032\034.tradingdb2pb.Rep"
  "lyGetSymbol\"\0000\001B+Z)github.com/zhs007/tra"
  "dingdb2/tradingdb2pbb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_tradingdb2_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_tradingdb2_2eproto_sccs[16] = {
  &scc_info_Candle_tradingdb2_2eproto.base,
  &scc_info_Candles_tradingdb2_2eproto.base,
  &scc_info_Fund_tradingdb2_2eproto.base,
  &scc_info_FundManager_tradingdb2_2eproto.base,
  &scc_info_FundResult_tradingdb2_2eproto.base,
  &scc_info_FundSize_tradingdb2_2eproto.base,
  &scc_info_ReplyGetCandles_tradingdb2_2eproto.base,
  &scc_info_ReplyGetSymbol_tradingdb2_2eproto.base,
  &scc_info_ReplyUpdCandles_tradingdb2_2eproto.base,
  &scc_info_ReplyUpdSymbol_tradingdb2_2eproto.base,
  &scc_info_RequestGetCandles_tradingdb2_2eproto.base,
  &scc_info_RequestGetSymbol_tradingdb2_2eproto.base,
  &scc_info_RequestGetSymbols_tradingdb2_2eproto.base,
  &scc_info_RequestUpdCandles_tradingdb2_2eproto.base,
  &scc_info_RequestUpdSymbol_tradingdb2_2eproto.base,
  &scc_info_SymbolInfo_tradingdb2_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_tradingdb2_2eproto_once;
static bool descriptor_table_tradingdb2_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tradingdb2_2eproto = {
  &descriptor_table_tradingdb2_2eproto_initialized, descriptor_table_protodef_tradingdb2_2eproto, "tradingdb2.proto", 2148,
  &descriptor_table_tradingdb2_2eproto_once, descriptor_table_tradingdb2_2eproto_sccs, descriptor_table_tradingdb2_2eproto_deps, 16, 0,
  schemas, file_default_instances, TableStruct_tradingdb2_2eproto::offsets,
  file_level_metadata_tradingdb2_2eproto, 16, file_level_enum_descriptors_tradingdb2_2eproto, file_level_service_descriptors_tradingdb2_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_tradingdb2_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_tradingdb2_2eproto), true);
namespace tradingdb2pb {

// ===================================================================

void Candle::InitAsDefaultInstance() {
}
class Candle::_Internal {
 public:
};

Candle::Candle()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tradingdb2pb.Candle)
}
Candle::Candle(const Candle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ts_, &from.ts_,
    static_cast<size_t>(reinterpret_cast<char*>(&foreignnotional_) -
    reinterpret_cast<char*>(&ts_)) + sizeof(foreignnotional_));
  // @@protoc_insertion_point(copy_constructor:tradingdb2pb.Candle)
}

void Candle::SharedCtor() {
  ::memset(&ts_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&foreignnotional_) -
      reinterpret_cast<char*>(&ts_)) + sizeof(foreignnotional_));
}

Candle::~Candle() {
  // @@protoc_insertion_point(destructor:tradingdb2pb.Candle)
  SharedDtor();
}

void Candle::SharedDtor() {
}

void Candle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Candle& Candle::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Candle_tradingdb2_2eproto.base);
  return *internal_default_instance();
}


void Candle::Clear() {
// @@protoc_insertion_point(message_clear_start:tradingdb2pb.Candle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&ts_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&foreignnotional_) -
      reinterpret_cast<char*>(&ts_)) + sizeof(foreignnotional_));
  _internal_metadata_.Clear();
}

const char* Candle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 ts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 open = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          open_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 close = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          close_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 high = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          high_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 low = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          low_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 volume = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 openInterest = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          openinterest_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 trades = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          trades_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double vwap = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          vwap_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int64 lastSize = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          lastsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 turnover = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          turnover_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double homeNotional = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          homenotional_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double foreignNotional = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          foreignnotional_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Candle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tradingdb2pb.Candle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 ts = 1;
  if (this->ts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_ts(), target);
  }

  // int64 open = 2;
  if (this->open() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_open(), target);
  }

  // int64 close = 3;
  if (this->close() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_close(), target);
  }

  // int64 high = 4;
  if (this->high() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_high(), target);
  }

  // int64 low = 5;
  if (this->low() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_low(), target);
  }

  // int64 volume = 6;
  if (this->volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_volume(), target);
  }

  // int64 openInterest = 7;
  if (this->openinterest() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_openinterest(), target);
  }

  // int64 trades = 8;
  if (this->trades() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_trades(), target);
  }

  // double vwap = 9;
  if (!(this->vwap() <= 0 && this->vwap() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_vwap(), target);
  }

  // int64 lastSize = 10;
  if (this->lastsize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(10, this->_internal_lastsize(), target);
  }

  // int64 turnover = 11;
  if (this->turnover() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(11, this->_internal_turnover(), target);
  }

  // double homeNotional = 12;
  if (!(this->homenotional() <= 0 && this->homenotional() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_homenotional(), target);
  }

  // double foreignNotional = 13;
  if (!(this->foreignnotional() <= 0 && this->foreignnotional() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->_internal_foreignnotional(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tradingdb2pb.Candle)
  return target;
}

size_t Candle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tradingdb2pb.Candle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 ts = 1;
  if (this->ts() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ts());
  }

  // int64 open = 2;
  if (this->open() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_open());
  }

  // int64 close = 3;
  if (this->close() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_close());
  }

  // int64 high = 4;
  if (this->high() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_high());
  }

  // int64 low = 5;
  if (this->low() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_low());
  }

  // int64 volume = 6;
  if (this->volume() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_volume());
  }

  // int64 openInterest = 7;
  if (this->openinterest() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_openinterest());
  }

  // int64 trades = 8;
  if (this->trades() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_trades());
  }

  // double vwap = 9;
  if (!(this->vwap() <= 0 && this->vwap() >= 0)) {
    total_size += 1 + 8;
  }

  // int64 lastSize = 10;
  if (this->lastsize() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_lastsize());
  }

  // int64 turnover = 11;
  if (this->turnover() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_turnover());
  }

  // double homeNotional = 12;
  if (!(this->homenotional() <= 0 && this->homenotional() >= 0)) {
    total_size += 1 + 8;
  }

  // double foreignNotional = 13;
  if (!(this->foreignnotional() <= 0 && this->foreignnotional() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Candle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tradingdb2pb.Candle)
  GOOGLE_DCHECK_NE(&from, this);
  const Candle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Candle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tradingdb2pb.Candle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tradingdb2pb.Candle)
    MergeFrom(*source);
  }
}

void Candle::MergeFrom(const Candle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tradingdb2pb.Candle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ts() != 0) {
    _internal_set_ts(from._internal_ts());
  }
  if (from.open() != 0) {
    _internal_set_open(from._internal_open());
  }
  if (from.close() != 0) {
    _internal_set_close(from._internal_close());
  }
  if (from.high() != 0) {
    _internal_set_high(from._internal_high());
  }
  if (from.low() != 0) {
    _internal_set_low(from._internal_low());
  }
  if (from.volume() != 0) {
    _internal_set_volume(from._internal_volume());
  }
  if (from.openinterest() != 0) {
    _internal_set_openinterest(from._internal_openinterest());
  }
  if (from.trades() != 0) {
    _internal_set_trades(from._internal_trades());
  }
  if (!(from.vwap() <= 0 && from.vwap() >= 0)) {
    _internal_set_vwap(from._internal_vwap());
  }
  if (from.lastsize() != 0) {
    _internal_set_lastsize(from._internal_lastsize());
  }
  if (from.turnover() != 0) {
    _internal_set_turnover(from._internal_turnover());
  }
  if (!(from.homenotional() <= 0 && from.homenotional() >= 0)) {
    _internal_set_homenotional(from._internal_homenotional());
  }
  if (!(from.foreignnotional() <= 0 && from.foreignnotional() >= 0)) {
    _internal_set_foreignnotional(from._internal_foreignnotional());
  }
}

void Candle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tradingdb2pb.Candle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Candle::CopyFrom(const Candle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tradingdb2pb.Candle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Candle::IsInitialized() const {
  return true;
}

void Candle::InternalSwap(Candle* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(ts_, other->ts_);
  swap(open_, other->open_);
  swap(close_, other->close_);
  swap(high_, other->high_);
  swap(low_, other->low_);
  swap(volume_, other->volume_);
  swap(openinterest_, other->openinterest_);
  swap(trades_, other->trades_);
  swap(vwap_, other->vwap_);
  swap(lastsize_, other->lastsize_);
  swap(turnover_, other->turnover_);
  swap(homenotional_, other->homenotional_);
  swap(foreignnotional_, other->foreignnotional_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Candle::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Candles::InitAsDefaultInstance() {
}
class Candles::_Internal {
 public:
};

Candles::Candles()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tradingdb2pb.Candles)
}
Candles::Candles(const Candles& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      candles_(from.candles_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  market_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_market().empty()) {
    market_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.market_);
  }
  symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_symbol().empty()) {
    symbol_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tag().empty()) {
    tag_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tag_);
  }
  // @@protoc_insertion_point(copy_constructor:tradingdb2pb.Candles)
}

void Candles::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Candles_tradingdb2_2eproto.base);
  market_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Candles::~Candles() {
  // @@protoc_insertion_point(destructor:tradingdb2pb.Candles)
  SharedDtor();
}

void Candles::SharedDtor() {
  market_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  symbol_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Candles::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Candles& Candles::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Candles_tradingdb2_2eproto.base);
  return *internal_default_instance();
}


void Candles::Clear() {
// @@protoc_insertion_point(message_clear_start:tradingdb2pb.Candles)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  candles_.Clear();
  market_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  symbol_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tag_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* Candles::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string market = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_market();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tradingdb2pb.Candles.market"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string symbol = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_symbol();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tradingdb2pb.Candles.symbol"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string tag = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_tag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tradingdb2pb.Candles.tag"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .tradingdb2pb.Candle candles = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_candles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Candles::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tradingdb2pb.Candles)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string market = 1;
  if (this->market().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_market().data(), static_cast<int>(this->_internal_market().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tradingdb2pb.Candles.market");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_market(), target);
  }

  // string symbol = 2;
  if (this->symbol().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_symbol().data(), static_cast<int>(this->_internal_symbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tradingdb2pb.Candles.symbol");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_symbol(), target);
  }

  // string tag = 3;
  if (this->tag().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tag().data(), static_cast<int>(this->_internal_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tradingdb2pb.Candles.tag");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_tag(), target);
  }

  // repeated .tradingdb2pb.Candle candles = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_candles_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_candles(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tradingdb2pb.Candles)
  return target;
}

size_t Candles::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tradingdb2pb.Candles)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tradingdb2pb.Candle candles = 4;
  total_size += 1UL * this->_internal_candles_size();
  for (const auto& msg : this->candles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string market = 1;
  if (this->market().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_market());
  }

  // string symbol = 2;
  if (this->symbol().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_symbol());
  }

  // string tag = 3;
  if (this->tag().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tag());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Candles::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tradingdb2pb.Candles)
  GOOGLE_DCHECK_NE(&from, this);
  const Candles* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Candles>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tradingdb2pb.Candles)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tradingdb2pb.Candles)
    MergeFrom(*source);
  }
}

void Candles::MergeFrom(const Candles& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tradingdb2pb.Candles)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  candles_.MergeFrom(from.candles_);
  if (from.market().size() > 0) {

    market_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.market_);
  }
  if (from.symbol().size() > 0) {

    symbol_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
  if (from.tag().size() > 0) {

    tag_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tag_);
  }
}

void Candles::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tradingdb2pb.Candles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Candles::CopyFrom(const Candles& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tradingdb2pb.Candles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Candles::IsInitialized() const {
  return true;
}

void Candles::InternalSwap(Candles* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  candles_.InternalSwap(&other->candles_);
  market_.Swap(&other->market_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  symbol_.Swap(&other->symbol_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  tag_.Swap(&other->tag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata Candles::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FundSize::InitAsDefaultInstance() {
}
class FundSize::_Internal {
 public:
};

FundSize::FundSize()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tradingdb2pb.FundSize)
}
FundSize::FundSize(const FundSize& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&time_)) + sizeof(size_));
  // @@protoc_insertion_point(copy_constructor:tradingdb2pb.FundSize)
}

void FundSize::SharedCtor() {
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&time_)) + sizeof(size_));
}

FundSize::~FundSize() {
  // @@protoc_insertion_point(destructor:tradingdb2pb.FundSize)
  SharedDtor();
}

void FundSize::SharedDtor() {
}

void FundSize::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FundSize& FundSize::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FundSize_tradingdb2_2eproto.base);
  return *internal_default_instance();
}


void FundSize::Clear() {
// @@protoc_insertion_point(message_clear_start:tradingdb2pb.FundSize)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&time_)) + sizeof(size_));
  _internal_metadata_.Clear();
}

const char* FundSize::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int64 time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FundSize::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tradingdb2pb.FundSize)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float size = 1;
  if (!(this->size() <= 0 && this->size() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_size(), target);
  }

  // int64 time = 2;
  if (this->time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tradingdb2pb.FundSize)
  return target;
}

size_t FundSize::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tradingdb2pb.FundSize)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 time = 2;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_time());
  }

  // float size = 1;
  if (!(this->size() <= 0 && this->size() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FundSize::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tradingdb2pb.FundSize)
  GOOGLE_DCHECK_NE(&from, this);
  const FundSize* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FundSize>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tradingdb2pb.FundSize)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tradingdb2pb.FundSize)
    MergeFrom(*source);
  }
}

void FundSize::MergeFrom(const FundSize& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tradingdb2pb.FundSize)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
  if (!(from.size() <= 0 && from.size() >= 0)) {
    _internal_set_size(from._internal_size());
  }
}

void FundSize::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tradingdb2pb.FundSize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FundSize::CopyFrom(const FundSize& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tradingdb2pb.FundSize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FundSize::IsInitialized() const {
  return true;
}

void FundSize::InternalSwap(FundSize* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(time_, other->time_);
  swap(size_, other->size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FundSize::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FundManager::InitAsDefaultInstance() {
}
class FundManager::_Internal {
 public:
};

FundManager::FundManager()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tradingdb2pb.FundManager)
}
FundManager::FundManager(const FundManager& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      results_(from.results_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  education_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_education().empty()) {
    education_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.education_);
  }
  country_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_country().empty()) {
    country_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.country_);
  }
  resume_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_resume().empty()) {
    resume_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.resume_);
  }
  ::memcpy(&starttime_, &from.starttime_,
    static_cast<size_t>(reinterpret_cast<char*>(&sex_) -
    reinterpret_cast<char*>(&starttime_)) + sizeof(sex_));
  // @@protoc_insertion_point(copy_constructor:tradingdb2pb.FundManager)
}

void FundManager::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FundManager_tradingdb2_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  education_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  country_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resume_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&starttime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sex_) -
      reinterpret_cast<char*>(&starttime_)) + sizeof(sex_));
}

FundManager::~FundManager() {
  // @@protoc_insertion_point(destructor:tradingdb2pb.FundManager)
  SharedDtor();
}

void FundManager::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  education_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  country_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resume_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FundManager::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FundManager& FundManager::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FundManager_tradingdb2_2eproto.base);
  return *internal_default_instance();
}


void FundManager::Clear() {
// @@protoc_insertion_point(message_clear_start:tradingdb2pb.FundManager)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  results_.Clear();
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  education_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  country_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resume_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&starttime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sex_) -
      reinterpret_cast<char*>(&starttime_)) + sizeof(sex_));
  _internal_metadata_.Clear();
}

const char* FundManager::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tradingdb2pb.FundManager.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 startTime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          starttime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 endTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          endtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 birthYear = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          birthyear_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool sex = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          sex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string education = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_education();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tradingdb2pb.FundManager.education"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string country = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_country();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tradingdb2pb.FundManager.country"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string resume = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_resume();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tradingdb2pb.FundManager.resume"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .tradingdb2pb.FundResult results = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FundManager::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tradingdb2pb.FundManager)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tradingdb2pb.FundManager.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // int64 startTime = 2;
  if (this->starttime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_starttime(), target);
  }

  // int64 endTime = 3;
  if (this->endtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_endtime(), target);
  }

  // int64 birthYear = 4;
  if (this->birthyear() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_birthyear(), target);
  }

  // bool sex = 5;
  if (this->sex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_sex(), target);
  }

  // string education = 6;
  if (this->education().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_education().data(), static_cast<int>(this->_internal_education().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tradingdb2pb.FundManager.education");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_education(), target);
  }

  // string country = 7;
  if (this->country().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_country().data(), static_cast<int>(this->_internal_country().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tradingdb2pb.FundManager.country");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_country(), target);
  }

  // string resume = 8;
  if (this->resume().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_resume().data(), static_cast<int>(this->_internal_resume().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tradingdb2pb.FundManager.resume");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_resume(), target);
  }

  // repeated .tradingdb2pb.FundResult results = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_results_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_results(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tradingdb2pb.FundManager)
  return target;
}

size_t FundManager::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tradingdb2pb.FundManager)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tradingdb2pb.FundResult results = 9;
  total_size += 1UL * this->_internal_results_size();
  for (const auto& msg : this->results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string education = 6;
  if (this->education().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_education());
  }

  // string country = 7;
  if (this->country().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_country());
  }

  // string resume = 8;
  if (this->resume().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_resume());
  }

  // int64 startTime = 2;
  if (this->starttime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_starttime());
  }

  // int64 endTime = 3;
  if (this->endtime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_endtime());
  }

  // int64 birthYear = 4;
  if (this->birthyear() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_birthyear());
  }

  // bool sex = 5;
  if (this->sex() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FundManager::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tradingdb2pb.FundManager)
  GOOGLE_DCHECK_NE(&from, this);
  const FundManager* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FundManager>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tradingdb2pb.FundManager)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tradingdb2pb.FundManager)
    MergeFrom(*source);
  }
}

void FundManager::MergeFrom(const FundManager& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tradingdb2pb.FundManager)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  results_.MergeFrom(from.results_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.education().size() > 0) {

    education_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.education_);
  }
  if (from.country().size() > 0) {

    country_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.country_);
  }
  if (from.resume().size() > 0) {

    resume_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.resume_);
  }
  if (from.starttime() != 0) {
    _internal_set_starttime(from._internal_starttime());
  }
  if (from.endtime() != 0) {
    _internal_set_endtime(from._internal_endtime());
  }
  if (from.birthyear() != 0) {
    _internal_set_birthyear(from._internal_birthyear());
  }
  if (from.sex() != 0) {
    _internal_set_sex(from._internal_sex());
  }
}

void FundManager::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tradingdb2pb.FundManager)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FundManager::CopyFrom(const FundManager& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tradingdb2pb.FundManager)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FundManager::IsInitialized() const {
  return true;
}

void FundManager::InternalSwap(FundManager* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  results_.InternalSwap(&other->results_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  education_.Swap(&other->education_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  country_.Swap(&other->country_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  resume_.Swap(&other->resume_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(starttime_, other->starttime_);
  swap(endtime_, other->endtime_);
  swap(birthyear_, other->birthyear_);
  swap(sex_, other->sex_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FundManager::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FundResult::InitAsDefaultInstance() {
}
class FundResult::_Internal {
 public:
};

FundResult::FundResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tradingdb2pb.FundResult)
}
FundResult::FundResult(const FundResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&maxdrawdown_, &from.maxdrawdown_,
    static_cast<size_t>(reinterpret_cast<char*>(&totalreturns_) -
    reinterpret_cast<char*>(&maxdrawdown_)) + sizeof(totalreturns_));
  // @@protoc_insertion_point(copy_constructor:tradingdb2pb.FundResult)
}

void FundResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FundResult_tradingdb2_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&maxdrawdown_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&totalreturns_) -
      reinterpret_cast<char*>(&maxdrawdown_)) + sizeof(totalreturns_));
}

FundResult::~FundResult() {
  // @@protoc_insertion_point(destructor:tradingdb2pb.FundResult)
  SharedDtor();
}

void FundResult::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FundResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FundResult& FundResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FundResult_tradingdb2_2eproto.base);
  return *internal_default_instance();
}


void FundResult::Clear() {
// @@protoc_insertion_point(message_clear_start:tradingdb2pb.FundResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&maxdrawdown_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&totalreturns_) -
      reinterpret_cast<char*>(&maxdrawdown_)) + sizeof(totalreturns_));
  _internal_metadata_.Clear();
}

const char* FundResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float maxDrawdown = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          maxdrawdown_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float sharpe = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          sharpe_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float annualizedReturns = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          annualizedreturns_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float annualizedVolatility = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          annualizedvolatility_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float totalReturns = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          totalreturns_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int64 startTime = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          starttime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 endTime = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          endtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tradingdb2pb.FundResult.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FundResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tradingdb2pb.FundResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float maxDrawdown = 1;
  if (!(this->maxdrawdown() <= 0 && this->maxdrawdown() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_maxdrawdown(), target);
  }

  // float sharpe = 2;
  if (!(this->sharpe() <= 0 && this->sharpe() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_sharpe(), target);
  }

  // float annualizedReturns = 3;
  if (!(this->annualizedreturns() <= 0 && this->annualizedreturns() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_annualizedreturns(), target);
  }

  // float annualizedVolatility = 4;
  if (!(this->annualizedvolatility() <= 0 && this->annualizedvolatility() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_annualizedvolatility(), target);
  }

  // float totalReturns = 5;
  if (!(this->totalreturns() <= 0 && this->totalreturns() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_totalreturns(), target);
  }

  // int64 startTime = 6;
  if (this->starttime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_starttime(), target);
  }

  // int64 endTime = 7;
  if (this->endtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_endtime(), target);
  }

  // string name = 8;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tradingdb2pb.FundResult.name");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tradingdb2pb.FundResult)
  return target;
}

size_t FundResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tradingdb2pb.FundResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 8;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // float maxDrawdown = 1;
  if (!(this->maxdrawdown() <= 0 && this->maxdrawdown() >= 0)) {
    total_size += 1 + 4;
  }

  // float sharpe = 2;
  if (!(this->sharpe() <= 0 && this->sharpe() >= 0)) {
    total_size += 1 + 4;
  }

  // float annualizedReturns = 3;
  if (!(this->annualizedreturns() <= 0 && this->annualizedreturns() >= 0)) {
    total_size += 1 + 4;
  }

  // float annualizedVolatility = 4;
  if (!(this->annualizedvolatility() <= 0 && this->annualizedvolatility() >= 0)) {
    total_size += 1 + 4;
  }

  // int64 startTime = 6;
  if (this->starttime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_starttime());
  }

  // int64 endTime = 7;
  if (this->endtime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_endtime());
  }

  // float totalReturns = 5;
  if (!(this->totalreturns() <= 0 && this->totalreturns() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FundResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tradingdb2pb.FundResult)
  GOOGLE_DCHECK_NE(&from, this);
  const FundResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FundResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tradingdb2pb.FundResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tradingdb2pb.FundResult)
    MergeFrom(*source);
  }
}

void FundResult::MergeFrom(const FundResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tradingdb2pb.FundResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (!(from.maxdrawdown() <= 0 && from.maxdrawdown() >= 0)) {
    _internal_set_maxdrawdown(from._internal_maxdrawdown());
  }
  if (!(from.sharpe() <= 0 && from.sharpe() >= 0)) {
    _internal_set_sharpe(from._internal_sharpe());
  }
  if (!(from.annualizedreturns() <= 0 && from.annualizedreturns() >= 0)) {
    _internal_set_annualizedreturns(from._internal_annualizedreturns());
  }
  if (!(from.annualizedvolatility() <= 0 && from.annualizedvolatility() >= 0)) {
    _internal_set_annualizedvolatility(from._internal_annualizedvolatility());
  }
  if (from.starttime() != 0) {
    _internal_set_starttime(from._internal_starttime());
  }
  if (from.endtime() != 0) {
    _internal_set_endtime(from._internal_endtime());
  }
  if (!(from.totalreturns() <= 0 && from.totalreturns() >= 0)) {
    _internal_set_totalreturns(from._internal_totalreturns());
  }
}

void FundResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tradingdb2pb.FundResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FundResult::CopyFrom(const FundResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tradingdb2pb.FundResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FundResult::IsInitialized() const {
  return true;
}

void FundResult::InternalSwap(FundResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(maxdrawdown_, other->maxdrawdown_);
  swap(sharpe_, other->sharpe_);
  swap(annualizedreturns_, other->annualizedreturns_);
  swap(annualizedvolatility_, other->annualizedvolatility_);
  swap(starttime_, other->starttime_);
  swap(endtime_, other->endtime_);
  swap(totalreturns_, other->totalreturns_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FundResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Fund::InitAsDefaultInstance() {
}
class Fund::_Internal {
 public:
};

Fund::Fund()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tradingdb2pb.Fund)
}
Fund::Fund(const Fund& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      tags_(from.tags_),
      size_(from.size_),
      managers_(from.managers_),
      results_(from.results_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_code().empty()) {
    code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  company_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_company().empty()) {
    company_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.company_);
  }
  createtime_ = from.createtime_;
  // @@protoc_insertion_point(copy_constructor:tradingdb2pb.Fund)
}

void Fund::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Fund_tradingdb2_2eproto.base);
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  company_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  createtime_ = PROTOBUF_LONGLONG(0);
}

Fund::~Fund() {
  // @@protoc_insertion_point(destructor:tradingdb2pb.Fund)
  SharedDtor();
}

void Fund::SharedDtor() {
  code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  company_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Fund::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Fund& Fund::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Fund_tradingdb2_2eproto.base);
  return *internal_default_instance();
}


void Fund::Clear() {
// @@protoc_insertion_point(message_clear_start:tradingdb2pb.Fund)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tags_.Clear();
  size_.Clear();
  managers_.Clear();
  results_.Clear();
  code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  company_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  createtime_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* Fund::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tradingdb2pb.Fund.code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tradingdb2pb.Fund.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string tags = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_tags();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tradingdb2pb.Fund.tags"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // int64 createTime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          createtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .tradingdb2pb.FundSize size = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_size(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // string company = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_company();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tradingdb2pb.Fund.company"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .tradingdb2pb.FundManager managers = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_managers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .tradingdb2pb.FundResult results = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Fund::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tradingdb2pb.Fund)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string code = 1;
  if (this->code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tradingdb2pb.Fund.code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_code(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tradingdb2pb.Fund.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // repeated string tags = 3;
  for (int i = 0, n = this->_internal_tags_size(); i < n; i++) {
    const auto& s = this->_internal_tags(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tradingdb2pb.Fund.tags");
    target = stream->WriteString(3, s, target);
  }

  // int64 createTime = 4;
  if (this->createtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_createtime(), target);
  }

  // repeated .tradingdb2pb.FundSize size = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_size_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_size(i), target, stream);
  }

  // string company = 6;
  if (this->company().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_company().data(), static_cast<int>(this->_internal_company().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tradingdb2pb.Fund.company");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_company(), target);
  }

  // repeated .tradingdb2pb.FundManager managers = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_managers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_managers(i), target, stream);
  }

  // repeated .tradingdb2pb.FundResult results = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_results_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_results(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tradingdb2pb.Fund)
  return target;
}

size_t Fund::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tradingdb2pb.Fund)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string tags = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(tags_.size());
  for (int i = 0, n = tags_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      tags_.Get(i));
  }

  // repeated .tradingdb2pb.FundSize size = 5;
  total_size += 1UL * this->_internal_size_size();
  for (const auto& msg : this->size_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .tradingdb2pb.FundManager managers = 7;
  total_size += 1UL * this->_internal_managers_size();
  for (const auto& msg : this->managers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .tradingdb2pb.FundResult results = 8;
  total_size += 1UL * this->_internal_results_size();
  for (const auto& msg : this->results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string code = 1;
  if (this->code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string company = 6;
  if (this->company().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_company());
  }

  // int64 createTime = 4;
  if (this->createtime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_createtime());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Fund::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tradingdb2pb.Fund)
  GOOGLE_DCHECK_NE(&from, this);
  const Fund* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Fund>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tradingdb2pb.Fund)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tradingdb2pb.Fund)
    MergeFrom(*source);
  }
}

void Fund::MergeFrom(const Fund& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tradingdb2pb.Fund)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tags_.MergeFrom(from.tags_);
  size_.MergeFrom(from.size_);
  managers_.MergeFrom(from.managers_);
  results_.MergeFrom(from.results_);
  if (from.code().size() > 0) {

    code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.company().size() > 0) {

    company_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.company_);
  }
  if (from.createtime() != 0) {
    _internal_set_createtime(from._internal_createtime());
  }
}

void Fund::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tradingdb2pb.Fund)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Fund::CopyFrom(const Fund& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tradingdb2pb.Fund)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fund::IsInitialized() const {
  return true;
}

void Fund::InternalSwap(Fund* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tags_.InternalSwap(&other->tags_);
  size_.InternalSwap(&other->size_);
  managers_.InternalSwap(&other->managers_);
  results_.InternalSwap(&other->results_);
  code_.Swap(&other->code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  company_.Swap(&other->company_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(createtime_, other->createtime_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Fund::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SymbolInfo::InitAsDefaultInstance() {
  ::tradingdb2pb::_SymbolInfo_default_instance_._instance.get_mutable()->fund_ = const_cast< ::tradingdb2pb::Fund*>(
      ::tradingdb2pb::Fund::internal_default_instance());
}
class SymbolInfo::_Internal {
 public:
  static const ::tradingdb2pb::Fund& fund(const SymbolInfo* msg);
};

const ::tradingdb2pb::Fund&
SymbolInfo::_Internal::fund(const SymbolInfo* msg) {
  return *msg->fund_;
}
SymbolInfo::SymbolInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tradingdb2pb.SymbolInfo)
}
SymbolInfo::SymbolInfo(const SymbolInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  market_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_market().empty()) {
    market_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.market_);
  }
  symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_symbol().empty()) {
    symbol_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
  if (from._internal_has_fund()) {
    fund_ = new ::tradingdb2pb::Fund(*from.fund_);
  } else {
    fund_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:tradingdb2pb.SymbolInfo)
}

void SymbolInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SymbolInfo_tradingdb2_2eproto.base);
  market_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fund_ = nullptr;
}

SymbolInfo::~SymbolInfo() {
  // @@protoc_insertion_point(destructor:tradingdb2pb.SymbolInfo)
  SharedDtor();
}

void SymbolInfo::SharedDtor() {
  market_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  symbol_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete fund_;
}

void SymbolInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SymbolInfo& SymbolInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SymbolInfo_tradingdb2_2eproto.base);
  return *internal_default_instance();
}


void SymbolInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:tradingdb2pb.SymbolInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  market_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  symbol_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && fund_ != nullptr) {
    delete fund_;
  }
  fund_ = nullptr;
  _internal_metadata_.Clear();
}

const char* SymbolInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string market = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_market();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tradingdb2pb.SymbolInfo.market"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string symbol = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_symbol();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tradingdb2pb.SymbolInfo.symbol"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tradingdb2pb.Fund fund = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_fund(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SymbolInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tradingdb2pb.SymbolInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string market = 1;
  if (this->market().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_market().data(), static_cast<int>(this->_internal_market().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tradingdb2pb.SymbolInfo.market");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_market(), target);
  }

  // string symbol = 2;
  if (this->symbol().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_symbol().data(), static_cast<int>(this->_internal_symbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tradingdb2pb.SymbolInfo.symbol");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_symbol(), target);
  }

  // .tradingdb2pb.Fund fund = 3;
  if (this->has_fund()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::fund(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tradingdb2pb.SymbolInfo)
  return target;
}

size_t SymbolInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tradingdb2pb.SymbolInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string market = 1;
  if (this->market().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_market());
  }

  // string symbol = 2;
  if (this->symbol().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_symbol());
  }

  // .tradingdb2pb.Fund fund = 3;
  if (this->has_fund()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fund_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SymbolInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tradingdb2pb.SymbolInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SymbolInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SymbolInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tradingdb2pb.SymbolInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tradingdb2pb.SymbolInfo)
    MergeFrom(*source);
  }
}

void SymbolInfo::MergeFrom(const SymbolInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tradingdb2pb.SymbolInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.market().size() > 0) {

    market_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.market_);
  }
  if (from.symbol().size() > 0) {

    symbol_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
  if (from.has_fund()) {
    _internal_mutable_fund()->::tradingdb2pb::Fund::MergeFrom(from._internal_fund());
  }
}

void SymbolInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tradingdb2pb.SymbolInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SymbolInfo::CopyFrom(const SymbolInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tradingdb2pb.SymbolInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SymbolInfo::IsInitialized() const {
  return true;
}

void SymbolInfo::InternalSwap(SymbolInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  market_.Swap(&other->market_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  symbol_.Swap(&other->symbol_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(fund_, other->fund_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SymbolInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RequestUpdCandles::InitAsDefaultInstance() {
  ::tradingdb2pb::_RequestUpdCandles_default_instance_._instance.get_mutable()->candles_ = const_cast< ::tradingdb2pb::Candles*>(
      ::tradingdb2pb::Candles::internal_default_instance());
}
class RequestUpdCandles::_Internal {
 public:
  static const ::tradingdb2pb::Candles& candles(const RequestUpdCandles* msg);
};

const ::tradingdb2pb::Candles&
RequestUpdCandles::_Internal::candles(const RequestUpdCandles* msg) {
  return *msg->candles_;
}
RequestUpdCandles::RequestUpdCandles()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tradingdb2pb.RequestUpdCandles)
}
RequestUpdCandles::RequestUpdCandles(const RequestUpdCandles& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from._internal_has_candles()) {
    candles_ = new ::tradingdb2pb::Candles(*from.candles_);
  } else {
    candles_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:tradingdb2pb.RequestUpdCandles)
}

void RequestUpdCandles::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RequestUpdCandles_tradingdb2_2eproto.base);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  candles_ = nullptr;
}

RequestUpdCandles::~RequestUpdCandles() {
  // @@protoc_insertion_point(destructor:tradingdb2pb.RequestUpdCandles)
  SharedDtor();
}

void RequestUpdCandles::SharedDtor() {
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete candles_;
}

void RequestUpdCandles::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RequestUpdCandles& RequestUpdCandles::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RequestUpdCandles_tradingdb2_2eproto.base);
  return *internal_default_instance();
}


void RequestUpdCandles::Clear() {
// @@protoc_insertion_point(message_clear_start:tradingdb2pb.RequestUpdCandles)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && candles_ != nullptr) {
    delete candles_;
  }
  candles_ = nullptr;
  _internal_metadata_.Clear();
}

const char* RequestUpdCandles::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tradingdb2pb.RequestUpdCandles.token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tradingdb2pb.Candles candles = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_candles(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RequestUpdCandles::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tradingdb2pb.RequestUpdCandles)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tradingdb2pb.RequestUpdCandles.token");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_token(), target);
  }

  // .tradingdb2pb.Candles candles = 2;
  if (this->has_candles()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::candles(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tradingdb2pb.RequestUpdCandles)
  return target;
}

size_t RequestUpdCandles::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tradingdb2pb.RequestUpdCandles)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  // .tradingdb2pb.Candles candles = 2;
  if (this->has_candles()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *candles_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestUpdCandles::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tradingdb2pb.RequestUpdCandles)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestUpdCandles* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RequestUpdCandles>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tradingdb2pb.RequestUpdCandles)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tradingdb2pb.RequestUpdCandles)
    MergeFrom(*source);
  }
}

void RequestUpdCandles::MergeFrom(const RequestUpdCandles& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tradingdb2pb.RequestUpdCandles)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.has_candles()) {
    _internal_mutable_candles()->::tradingdb2pb::Candles::MergeFrom(from._internal_candles());
  }
}

void RequestUpdCandles::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tradingdb2pb.RequestUpdCandles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestUpdCandles::CopyFrom(const RequestUpdCandles& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tradingdb2pb.RequestUpdCandles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestUpdCandles::IsInitialized() const {
  return true;
}

void RequestUpdCandles::InternalSwap(RequestUpdCandles* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(candles_, other->candles_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestUpdCandles::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReplyUpdCandles::InitAsDefaultInstance() {
}
class ReplyUpdCandles::_Internal {
 public:
};

ReplyUpdCandles::ReplyUpdCandles()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tradingdb2pb.ReplyUpdCandles)
}
ReplyUpdCandles::ReplyUpdCandles(const ReplyUpdCandles& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  lengthok_ = from.lengthok_;
  // @@protoc_insertion_point(copy_constructor:tradingdb2pb.ReplyUpdCandles)
}

void ReplyUpdCandles::SharedCtor() {
  lengthok_ = 0;
}

ReplyUpdCandles::~ReplyUpdCandles() {
  // @@protoc_insertion_point(destructor:tradingdb2pb.ReplyUpdCandles)
  SharedDtor();
}

void ReplyUpdCandles::SharedDtor() {
}

void ReplyUpdCandles::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReplyUpdCandles& ReplyUpdCandles::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReplyUpdCandles_tradingdb2_2eproto.base);
  return *internal_default_instance();
}


void ReplyUpdCandles::Clear() {
// @@protoc_insertion_point(message_clear_start:tradingdb2pb.ReplyUpdCandles)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lengthok_ = 0;
  _internal_metadata_.Clear();
}

const char* ReplyUpdCandles::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 lengthOK = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          lengthok_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReplyUpdCandles::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tradingdb2pb.ReplyUpdCandles)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 lengthOK = 1;
  if (this->lengthok() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_lengthok(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tradingdb2pb.ReplyUpdCandles)
  return target;
}

size_t ReplyUpdCandles::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tradingdb2pb.ReplyUpdCandles)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 lengthOK = 1;
  if (this->lengthok() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lengthok());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReplyUpdCandles::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tradingdb2pb.ReplyUpdCandles)
  GOOGLE_DCHECK_NE(&from, this);
  const ReplyUpdCandles* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReplyUpdCandles>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tradingdb2pb.ReplyUpdCandles)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tradingdb2pb.ReplyUpdCandles)
    MergeFrom(*source);
  }
}

void ReplyUpdCandles::MergeFrom(const ReplyUpdCandles& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tradingdb2pb.ReplyUpdCandles)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.lengthok() != 0) {
    _internal_set_lengthok(from._internal_lengthok());
  }
}

void ReplyUpdCandles::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tradingdb2pb.ReplyUpdCandles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplyUpdCandles::CopyFrom(const ReplyUpdCandles& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tradingdb2pb.ReplyUpdCandles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplyUpdCandles::IsInitialized() const {
  return true;
}

void ReplyUpdCandles::InternalSwap(ReplyUpdCandles* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(lengthok_, other->lengthok_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReplyUpdCandles::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RequestGetCandles::InitAsDefaultInstance() {
}
class RequestGetCandles::_Internal {
 public:
};

RequestGetCandles::RequestGetCandles()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tradingdb2pb.RequestGetCandles)
}
RequestGetCandles::RequestGetCandles(const RequestGetCandles& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      tags_(from.tags_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  market_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_market().empty()) {
    market_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.market_);
  }
  symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_symbol().empty()) {
    symbol_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tag().empty()) {
    tag_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tag_);
  }
  ::memcpy(&tsstart_, &from.tsstart_,
    static_cast<size_t>(reinterpret_cast<char*>(&tsend_) -
    reinterpret_cast<char*>(&tsstart_)) + sizeof(tsend_));
  // @@protoc_insertion_point(copy_constructor:tradingdb2pb.RequestGetCandles)
}

void RequestGetCandles::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RequestGetCandles_tradingdb2_2eproto.base);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  market_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&tsstart_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tsend_) -
      reinterpret_cast<char*>(&tsstart_)) + sizeof(tsend_));
}

RequestGetCandles::~RequestGetCandles() {
  // @@protoc_insertion_point(destructor:tradingdb2pb.RequestGetCandles)
  SharedDtor();
}

void RequestGetCandles::SharedDtor() {
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  market_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  symbol_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RequestGetCandles::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RequestGetCandles& RequestGetCandles::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RequestGetCandles_tradingdb2_2eproto.base);
  return *internal_default_instance();
}


void RequestGetCandles::Clear() {
// @@protoc_insertion_point(message_clear_start:tradingdb2pb.RequestGetCandles)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tags_.Clear();
  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  market_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  symbol_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tag_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&tsstart_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tsend_) -
      reinterpret_cast<char*>(&tsstart_)) + sizeof(tsend_));
  _internal_metadata_.Clear();
}

const char* RequestGetCandles::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tradingdb2pb.RequestGetCandles.token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string market = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_market();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tradingdb2pb.RequestGetCandles.market"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string symbol = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_symbol();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tradingdb2pb.RequestGetCandles.symbol"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string tag = 4 [deprecated = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_tag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tradingdb2pb.RequestGetCandles.tag"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 tsStart = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          tsstart_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 tsEnd = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          tsend_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string tags = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_tags();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tradingdb2pb.RequestGetCandles.tags"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RequestGetCandles::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tradingdb2pb.RequestGetCandles)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tradingdb2pb.RequestGetCandles.token");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_token(), target);
  }

  // string market = 2;
  if (this->market().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_market().data(), static_cast<int>(this->_internal_market().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tradingdb2pb.RequestGetCandles.market");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_market(), target);
  }

  // string symbol = 3;
  if (this->symbol().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_symbol().data(), static_cast<int>(this->_internal_symbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tradingdb2pb.RequestGetCandles.symbol");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_symbol(), target);
  }

  // string tag = 4 [deprecated = true];
  if (this->tag().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tag().data(), static_cast<int>(this->_internal_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tradingdb2pb.RequestGetCandles.tag");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_tag(), target);
  }

  // int64 tsStart = 5;
  if (this->tsstart() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_tsstart(), target);
  }

  // int64 tsEnd = 6;
  if (this->tsend() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_tsend(), target);
  }

  // repeated string tags = 7;
  for (int i = 0, n = this->_internal_tags_size(); i < n; i++) {
    const auto& s = this->_internal_tags(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tradingdb2pb.RequestGetCandles.tags");
    target = stream->WriteString(7, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tradingdb2pb.RequestGetCandles)
  return target;
}

size_t RequestGetCandles::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tradingdb2pb.RequestGetCandles)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string tags = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(tags_.size());
  for (int i = 0, n = tags_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      tags_.Get(i));
  }

  // string token = 1;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  // string market = 2;
  if (this->market().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_market());
  }

  // string symbol = 3;
  if (this->symbol().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_symbol());
  }

  // string tag = 4 [deprecated = true];
  if (this->tag().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tag());
  }

  // int64 tsStart = 5;
  if (this->tsstart() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_tsstart());
  }

  // int64 tsEnd = 6;
  if (this->tsend() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_tsend());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestGetCandles::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tradingdb2pb.RequestGetCandles)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestGetCandles* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RequestGetCandles>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tradingdb2pb.RequestGetCandles)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tradingdb2pb.RequestGetCandles)
    MergeFrom(*source);
  }
}

void RequestGetCandles::MergeFrom(const RequestGetCandles& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tradingdb2pb.RequestGetCandles)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tags_.MergeFrom(from.tags_);
  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.market().size() > 0) {

    market_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.market_);
  }
  if (from.symbol().size() > 0) {

    symbol_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
  if (from.tag().size() > 0) {

    tag_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tag_);
  }
  if (from.tsstart() != 0) {
    _internal_set_tsstart(from._internal_tsstart());
  }
  if (from.tsend() != 0) {
    _internal_set_tsend(from._internal_tsend());
  }
}

void RequestGetCandles::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tradingdb2pb.RequestGetCandles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestGetCandles::CopyFrom(const RequestGetCandles& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tradingdb2pb.RequestGetCandles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestGetCandles::IsInitialized() const {
  return true;
}

void RequestGetCandles::InternalSwap(RequestGetCandles* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tags_.InternalSwap(&other->tags_);
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  market_.Swap(&other->market_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  symbol_.Swap(&other->symbol_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  tag_.Swap(&other->tag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(tsstart_, other->tsstart_);
  swap(tsend_, other->tsend_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestGetCandles::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReplyGetCandles::InitAsDefaultInstance() {
  ::tradingdb2pb::_ReplyGetCandles_default_instance_._instance.get_mutable()->candles_ = const_cast< ::tradingdb2pb::Candles*>(
      ::tradingdb2pb::Candles::internal_default_instance());
}
class ReplyGetCandles::_Internal {
 public:
  static const ::tradingdb2pb::Candles& candles(const ReplyGetCandles* msg);
};

const ::tradingdb2pb::Candles&
ReplyGetCandles::_Internal::candles(const ReplyGetCandles* msg) {
  return *msg->candles_;
}
ReplyGetCandles::ReplyGetCandles()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tradingdb2pb.ReplyGetCandles)
}
ReplyGetCandles::ReplyGetCandles(const ReplyGetCandles& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_candles()) {
    candles_ = new ::tradingdb2pb::Candles(*from.candles_);
  } else {
    candles_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:tradingdb2pb.ReplyGetCandles)
}

void ReplyGetCandles::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReplyGetCandles_tradingdb2_2eproto.base);
  candles_ = nullptr;
}

ReplyGetCandles::~ReplyGetCandles() {
  // @@protoc_insertion_point(destructor:tradingdb2pb.ReplyGetCandles)
  SharedDtor();
}

void ReplyGetCandles::SharedDtor() {
  if (this != internal_default_instance()) delete candles_;
}

void ReplyGetCandles::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReplyGetCandles& ReplyGetCandles::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReplyGetCandles_tradingdb2_2eproto.base);
  return *internal_default_instance();
}


void ReplyGetCandles::Clear() {
// @@protoc_insertion_point(message_clear_start:tradingdb2pb.ReplyGetCandles)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && candles_ != nullptr) {
    delete candles_;
  }
  candles_ = nullptr;
  _internal_metadata_.Clear();
}

const char* ReplyGetCandles::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .tradingdb2pb.Candles candles = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_candles(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReplyGetCandles::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tradingdb2pb.ReplyGetCandles)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tradingdb2pb.Candles candles = 1;
  if (this->has_candles()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::candles(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tradingdb2pb.ReplyGetCandles)
  return target;
}

size_t ReplyGetCandles::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tradingdb2pb.ReplyGetCandles)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tradingdb2pb.Candles candles = 1;
  if (this->has_candles()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *candles_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReplyGetCandles::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tradingdb2pb.ReplyGetCandles)
  GOOGLE_DCHECK_NE(&from, this);
  const ReplyGetCandles* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReplyGetCandles>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tradingdb2pb.ReplyGetCandles)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tradingdb2pb.ReplyGetCandles)
    MergeFrom(*source);
  }
}

void ReplyGetCandles::MergeFrom(const ReplyGetCandles& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tradingdb2pb.ReplyGetCandles)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_candles()) {
    _internal_mutable_candles()->::tradingdb2pb::Candles::MergeFrom(from._internal_candles());
  }
}

void ReplyGetCandles::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tradingdb2pb.ReplyGetCandles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplyGetCandles::CopyFrom(const ReplyGetCandles& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tradingdb2pb.ReplyGetCandles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplyGetCandles::IsInitialized() const {
  return true;
}

void ReplyGetCandles::InternalSwap(ReplyGetCandles* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(candles_, other->candles_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReplyGetCandles::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RequestUpdSymbol::InitAsDefaultInstance() {
  ::tradingdb2pb::_RequestUpdSymbol_default_instance_._instance.get_mutable()->symbol_ = const_cast< ::tradingdb2pb::SymbolInfo*>(
      ::tradingdb2pb::SymbolInfo::internal_default_instance());
}
class RequestUpdSymbol::_Internal {
 public:
  static const ::tradingdb2pb::SymbolInfo& symbol(const RequestUpdSymbol* msg);
};

const ::tradingdb2pb::SymbolInfo&
RequestUpdSymbol::_Internal::symbol(const RequestUpdSymbol* msg) {
  return *msg->symbol_;
}
RequestUpdSymbol::RequestUpdSymbol()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tradingdb2pb.RequestUpdSymbol)
}
RequestUpdSymbol::RequestUpdSymbol(const RequestUpdSymbol& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from._internal_has_symbol()) {
    symbol_ = new ::tradingdb2pb::SymbolInfo(*from.symbol_);
  } else {
    symbol_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:tradingdb2pb.RequestUpdSymbol)
}

void RequestUpdSymbol::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RequestUpdSymbol_tradingdb2_2eproto.base);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  symbol_ = nullptr;
}

RequestUpdSymbol::~RequestUpdSymbol() {
  // @@protoc_insertion_point(destructor:tradingdb2pb.RequestUpdSymbol)
  SharedDtor();
}

void RequestUpdSymbol::SharedDtor() {
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete symbol_;
}

void RequestUpdSymbol::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RequestUpdSymbol& RequestUpdSymbol::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RequestUpdSymbol_tradingdb2_2eproto.base);
  return *internal_default_instance();
}


void RequestUpdSymbol::Clear() {
// @@protoc_insertion_point(message_clear_start:tradingdb2pb.RequestUpdSymbol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && symbol_ != nullptr) {
    delete symbol_;
  }
  symbol_ = nullptr;
  _internal_metadata_.Clear();
}

const char* RequestUpdSymbol::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tradingdb2pb.RequestUpdSymbol.token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tradingdb2pb.SymbolInfo symbol = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_symbol(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RequestUpdSymbol::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tradingdb2pb.RequestUpdSymbol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tradingdb2pb.RequestUpdSymbol.token");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_token(), target);
  }

  // .tradingdb2pb.SymbolInfo symbol = 2;
  if (this->has_symbol()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::symbol(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tradingdb2pb.RequestUpdSymbol)
  return target;
}

size_t RequestUpdSymbol::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tradingdb2pb.RequestUpdSymbol)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  // .tradingdb2pb.SymbolInfo symbol = 2;
  if (this->has_symbol()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *symbol_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestUpdSymbol::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tradingdb2pb.RequestUpdSymbol)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestUpdSymbol* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RequestUpdSymbol>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tradingdb2pb.RequestUpdSymbol)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tradingdb2pb.RequestUpdSymbol)
    MergeFrom(*source);
  }
}

void RequestUpdSymbol::MergeFrom(const RequestUpdSymbol& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tradingdb2pb.RequestUpdSymbol)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.has_symbol()) {
    _internal_mutable_symbol()->::tradingdb2pb::SymbolInfo::MergeFrom(from._internal_symbol());
  }
}

void RequestUpdSymbol::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tradingdb2pb.RequestUpdSymbol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestUpdSymbol::CopyFrom(const RequestUpdSymbol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tradingdb2pb.RequestUpdSymbol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestUpdSymbol::IsInitialized() const {
  return true;
}

void RequestUpdSymbol::InternalSwap(RequestUpdSymbol* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(symbol_, other->symbol_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestUpdSymbol::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReplyUpdSymbol::InitAsDefaultInstance() {
}
class ReplyUpdSymbol::_Internal {
 public:
};

ReplyUpdSymbol::ReplyUpdSymbol()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tradingdb2pb.ReplyUpdSymbol)
}
ReplyUpdSymbol::ReplyUpdSymbol(const ReplyUpdSymbol& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  isok_ = from.isok_;
  // @@protoc_insertion_point(copy_constructor:tradingdb2pb.ReplyUpdSymbol)
}

void ReplyUpdSymbol::SharedCtor() {
  isok_ = false;
}

ReplyUpdSymbol::~ReplyUpdSymbol() {
  // @@protoc_insertion_point(destructor:tradingdb2pb.ReplyUpdSymbol)
  SharedDtor();
}

void ReplyUpdSymbol::SharedDtor() {
}

void ReplyUpdSymbol::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReplyUpdSymbol& ReplyUpdSymbol::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReplyUpdSymbol_tradingdb2_2eproto.base);
  return *internal_default_instance();
}


void ReplyUpdSymbol::Clear() {
// @@protoc_insertion_point(message_clear_start:tradingdb2pb.ReplyUpdSymbol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  isok_ = false;
  _internal_metadata_.Clear();
}

const char* ReplyUpdSymbol::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool isOK = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          isok_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReplyUpdSymbol::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tradingdb2pb.ReplyUpdSymbol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool isOK = 1;
  if (this->isok() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_isok(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tradingdb2pb.ReplyUpdSymbol)
  return target;
}

size_t ReplyUpdSymbol::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tradingdb2pb.ReplyUpdSymbol)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool isOK = 1;
  if (this->isok() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReplyUpdSymbol::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tradingdb2pb.ReplyUpdSymbol)
  GOOGLE_DCHECK_NE(&from, this);
  const ReplyUpdSymbol* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReplyUpdSymbol>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tradingdb2pb.ReplyUpdSymbol)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tradingdb2pb.ReplyUpdSymbol)
    MergeFrom(*source);
  }
}

void ReplyUpdSymbol::MergeFrom(const ReplyUpdSymbol& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tradingdb2pb.ReplyUpdSymbol)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.isok() != 0) {
    _internal_set_isok(from._internal_isok());
  }
}

void ReplyUpdSymbol::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tradingdb2pb.ReplyUpdSymbol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplyUpdSymbol::CopyFrom(const ReplyUpdSymbol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tradingdb2pb.ReplyUpdSymbol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplyUpdSymbol::IsInitialized() const {
  return true;
}

void ReplyUpdSymbol::InternalSwap(ReplyUpdSymbol* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(isok_, other->isok_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReplyUpdSymbol::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RequestGetSymbol::InitAsDefaultInstance() {
}
class RequestGetSymbol::_Internal {
 public:
};

RequestGetSymbol::RequestGetSymbol()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tradingdb2pb.RequestGetSymbol)
}
RequestGetSymbol::RequestGetSymbol(const RequestGetSymbol& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  market_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_market().empty()) {
    market_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.market_);
  }
  symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_symbol().empty()) {
    symbol_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
  // @@protoc_insertion_point(copy_constructor:tradingdb2pb.RequestGetSymbol)
}

void RequestGetSymbol::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RequestGetSymbol_tradingdb2_2eproto.base);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  market_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RequestGetSymbol::~RequestGetSymbol() {
  // @@protoc_insertion_point(destructor:tradingdb2pb.RequestGetSymbol)
  SharedDtor();
}

void RequestGetSymbol::SharedDtor() {
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  market_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  symbol_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RequestGetSymbol::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RequestGetSymbol& RequestGetSymbol::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RequestGetSymbol_tradingdb2_2eproto.base);
  return *internal_default_instance();
}


void RequestGetSymbol::Clear() {
// @@protoc_insertion_point(message_clear_start:tradingdb2pb.RequestGetSymbol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  market_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  symbol_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* RequestGetSymbol::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tradingdb2pb.RequestGetSymbol.token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string market = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_market();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tradingdb2pb.RequestGetSymbol.market"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string symbol = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_symbol();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tradingdb2pb.RequestGetSymbol.symbol"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RequestGetSymbol::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tradingdb2pb.RequestGetSymbol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tradingdb2pb.RequestGetSymbol.token");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_token(), target);
  }

  // string market = 2;
  if (this->market().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_market().data(), static_cast<int>(this->_internal_market().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tradingdb2pb.RequestGetSymbol.market");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_market(), target);
  }

  // string symbol = 3;
  if (this->symbol().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_symbol().data(), static_cast<int>(this->_internal_symbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tradingdb2pb.RequestGetSymbol.symbol");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_symbol(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tradingdb2pb.RequestGetSymbol)
  return target;
}

size_t RequestGetSymbol::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tradingdb2pb.RequestGetSymbol)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  // string market = 2;
  if (this->market().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_market());
  }

  // string symbol = 3;
  if (this->symbol().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_symbol());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestGetSymbol::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tradingdb2pb.RequestGetSymbol)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestGetSymbol* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RequestGetSymbol>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tradingdb2pb.RequestGetSymbol)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tradingdb2pb.RequestGetSymbol)
    MergeFrom(*source);
  }
}

void RequestGetSymbol::MergeFrom(const RequestGetSymbol& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tradingdb2pb.RequestGetSymbol)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.market().size() > 0) {

    market_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.market_);
  }
  if (from.symbol().size() > 0) {

    symbol_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
}

void RequestGetSymbol::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tradingdb2pb.RequestGetSymbol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestGetSymbol::CopyFrom(const RequestGetSymbol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tradingdb2pb.RequestGetSymbol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestGetSymbol::IsInitialized() const {
  return true;
}

void RequestGetSymbol::InternalSwap(RequestGetSymbol* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  market_.Swap(&other->market_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  symbol_.Swap(&other->symbol_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestGetSymbol::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReplyGetSymbol::InitAsDefaultInstance() {
  ::tradingdb2pb::_ReplyGetSymbol_default_instance_._instance.get_mutable()->symbol_ = const_cast< ::tradingdb2pb::SymbolInfo*>(
      ::tradingdb2pb::SymbolInfo::internal_default_instance());
}
class ReplyGetSymbol::_Internal {
 public:
  static const ::tradingdb2pb::SymbolInfo& symbol(const ReplyGetSymbol* msg);
};

const ::tradingdb2pb::SymbolInfo&
ReplyGetSymbol::_Internal::symbol(const ReplyGetSymbol* msg) {
  return *msg->symbol_;
}
ReplyGetSymbol::ReplyGetSymbol()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tradingdb2pb.ReplyGetSymbol)
}
ReplyGetSymbol::ReplyGetSymbol(const ReplyGetSymbol& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_symbol()) {
    symbol_ = new ::tradingdb2pb::SymbolInfo(*from.symbol_);
  } else {
    symbol_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:tradingdb2pb.ReplyGetSymbol)
}

void ReplyGetSymbol::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReplyGetSymbol_tradingdb2_2eproto.base);
  symbol_ = nullptr;
}

ReplyGetSymbol::~ReplyGetSymbol() {
  // @@protoc_insertion_point(destructor:tradingdb2pb.ReplyGetSymbol)
  SharedDtor();
}

void ReplyGetSymbol::SharedDtor() {
  if (this != internal_default_instance()) delete symbol_;
}

void ReplyGetSymbol::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReplyGetSymbol& ReplyGetSymbol::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReplyGetSymbol_tradingdb2_2eproto.base);
  return *internal_default_instance();
}


void ReplyGetSymbol::Clear() {
// @@protoc_insertion_point(message_clear_start:tradingdb2pb.ReplyGetSymbol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && symbol_ != nullptr) {
    delete symbol_;
  }
  symbol_ = nullptr;
  _internal_metadata_.Clear();
}

const char* ReplyGetSymbol::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .tradingdb2pb.SymbolInfo symbol = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_symbol(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReplyGetSymbol::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tradingdb2pb.ReplyGetSymbol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tradingdb2pb.SymbolInfo symbol = 1;
  if (this->has_symbol()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::symbol(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tradingdb2pb.ReplyGetSymbol)
  return target;
}

size_t ReplyGetSymbol::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tradingdb2pb.ReplyGetSymbol)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tradingdb2pb.SymbolInfo symbol = 1;
  if (this->has_symbol()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *symbol_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReplyGetSymbol::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tradingdb2pb.ReplyGetSymbol)
  GOOGLE_DCHECK_NE(&from, this);
  const ReplyGetSymbol* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReplyGetSymbol>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tradingdb2pb.ReplyGetSymbol)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tradingdb2pb.ReplyGetSymbol)
    MergeFrom(*source);
  }
}

void ReplyGetSymbol::MergeFrom(const ReplyGetSymbol& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tradingdb2pb.ReplyGetSymbol)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_symbol()) {
    _internal_mutable_symbol()->::tradingdb2pb::SymbolInfo::MergeFrom(from._internal_symbol());
  }
}

void ReplyGetSymbol::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tradingdb2pb.ReplyGetSymbol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplyGetSymbol::CopyFrom(const ReplyGetSymbol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tradingdb2pb.ReplyGetSymbol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplyGetSymbol::IsInitialized() const {
  return true;
}

void ReplyGetSymbol::InternalSwap(ReplyGetSymbol* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(symbol_, other->symbol_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReplyGetSymbol::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RequestGetSymbols::InitAsDefaultInstance() {
}
class RequestGetSymbols::_Internal {
 public:
};

RequestGetSymbols::RequestGetSymbols()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tradingdb2pb.RequestGetSymbols)
}
RequestGetSymbols::RequestGetSymbols(const RequestGetSymbols& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      symbols_(from.symbols_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  market_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_market().empty()) {
    market_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.market_);
  }
  // @@protoc_insertion_point(copy_constructor:tradingdb2pb.RequestGetSymbols)
}

void RequestGetSymbols::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RequestGetSymbols_tradingdb2_2eproto.base);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  market_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RequestGetSymbols::~RequestGetSymbols() {
  // @@protoc_insertion_point(destructor:tradingdb2pb.RequestGetSymbols)
  SharedDtor();
}

void RequestGetSymbols::SharedDtor() {
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  market_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RequestGetSymbols::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RequestGetSymbols& RequestGetSymbols::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RequestGetSymbols_tradingdb2_2eproto.base);
  return *internal_default_instance();
}


void RequestGetSymbols::Clear() {
// @@protoc_insertion_point(message_clear_start:tradingdb2pb.RequestGetSymbols)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  symbols_.Clear();
  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  market_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* RequestGetSymbols::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tradingdb2pb.RequestGetSymbols.token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string market = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_market();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tradingdb2pb.RequestGetSymbols.market"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string symbols = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_symbols();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tradingdb2pb.RequestGetSymbols.symbols"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RequestGetSymbols::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tradingdb2pb.RequestGetSymbols)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tradingdb2pb.RequestGetSymbols.token");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_token(), target);
  }

  // string market = 2;
  if (this->market().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_market().data(), static_cast<int>(this->_internal_market().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tradingdb2pb.RequestGetSymbols.market");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_market(), target);
  }

  // repeated string symbols = 3;
  for (int i = 0, n = this->_internal_symbols_size(); i < n; i++) {
    const auto& s = this->_internal_symbols(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tradingdb2pb.RequestGetSymbols.symbols");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tradingdb2pb.RequestGetSymbols)
  return target;
}

size_t RequestGetSymbols::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tradingdb2pb.RequestGetSymbols)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string symbols = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(symbols_.size());
  for (int i = 0, n = symbols_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      symbols_.Get(i));
  }

  // string token = 1;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  // string market = 2;
  if (this->market().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_market());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestGetSymbols::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tradingdb2pb.RequestGetSymbols)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestGetSymbols* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RequestGetSymbols>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tradingdb2pb.RequestGetSymbols)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tradingdb2pb.RequestGetSymbols)
    MergeFrom(*source);
  }
}

void RequestGetSymbols::MergeFrom(const RequestGetSymbols& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tradingdb2pb.RequestGetSymbols)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  symbols_.MergeFrom(from.symbols_);
  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.market().size() > 0) {

    market_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.market_);
  }
}

void RequestGetSymbols::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tradingdb2pb.RequestGetSymbols)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestGetSymbols::CopyFrom(const RequestGetSymbols& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tradingdb2pb.RequestGetSymbols)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestGetSymbols::IsInitialized() const {
  return true;
}

void RequestGetSymbols::InternalSwap(RequestGetSymbols* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  symbols_.InternalSwap(&other->symbols_);
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  market_.Swap(&other->market_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestGetSymbols::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace tradingdb2pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tradingdb2pb::Candle* Arena::CreateMaybeMessage< ::tradingdb2pb::Candle >(Arena* arena) {
  return Arena::CreateInternal< ::tradingdb2pb::Candle >(arena);
}
template<> PROTOBUF_NOINLINE ::tradingdb2pb::Candles* Arena::CreateMaybeMessage< ::tradingdb2pb::Candles >(Arena* arena) {
  return Arena::CreateInternal< ::tradingdb2pb::Candles >(arena);
}
template<> PROTOBUF_NOINLINE ::tradingdb2pb::FundSize* Arena::CreateMaybeMessage< ::tradingdb2pb::FundSize >(Arena* arena) {
  return Arena::CreateInternal< ::tradingdb2pb::FundSize >(arena);
}
template<> PROTOBUF_NOINLINE ::tradingdb2pb::FundManager* Arena::CreateMaybeMessage< ::tradingdb2pb::FundManager >(Arena* arena) {
  return Arena::CreateInternal< ::tradingdb2pb::FundManager >(arena);
}
template<> PROTOBUF_NOINLINE ::tradingdb2pb::FundResult* Arena::CreateMaybeMessage< ::tradingdb2pb::FundResult >(Arena* arena) {
  return Arena::CreateInternal< ::tradingdb2pb::FundResult >(arena);
}
template<> PROTOBUF_NOINLINE ::tradingdb2pb::Fund* Arena::CreateMaybeMessage< ::tradingdb2pb::Fund >(Arena* arena) {
  return Arena::CreateInternal< ::tradingdb2pb::Fund >(arena);
}
template<> PROTOBUF_NOINLINE ::tradingdb2pb::SymbolInfo* Arena::CreateMaybeMessage< ::tradingdb2pb::SymbolInfo >(Arena* arena) {
  return Arena::CreateInternal< ::tradingdb2pb::SymbolInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::tradingdb2pb::RequestUpdCandles* Arena::CreateMaybeMessage< ::tradingdb2pb::RequestUpdCandles >(Arena* arena) {
  return Arena::CreateInternal< ::tradingdb2pb::RequestUpdCandles >(arena);
}
template<> PROTOBUF_NOINLINE ::tradingdb2pb::ReplyUpdCandles* Arena::CreateMaybeMessage< ::tradingdb2pb::ReplyUpdCandles >(Arena* arena) {
  return Arena::CreateInternal< ::tradingdb2pb::ReplyUpdCandles >(arena);
}
template<> PROTOBUF_NOINLINE ::tradingdb2pb::RequestGetCandles* Arena::CreateMaybeMessage< ::tradingdb2pb::RequestGetCandles >(Arena* arena) {
  return Arena::CreateInternal< ::tradingdb2pb::RequestGetCandles >(arena);
}
template<> PROTOBUF_NOINLINE ::tradingdb2pb::ReplyGetCandles* Arena::CreateMaybeMessage< ::tradingdb2pb::ReplyGetCandles >(Arena* arena) {
  return Arena::CreateInternal< ::tradingdb2pb::ReplyGetCandles >(arena);
}
template<> PROTOBUF_NOINLINE ::tradingdb2pb::RequestUpdSymbol* Arena::CreateMaybeMessage< ::tradingdb2pb::RequestUpdSymbol >(Arena* arena) {
  return Arena::CreateInternal< ::tradingdb2pb::RequestUpdSymbol >(arena);
}
template<> PROTOBUF_NOINLINE ::tradingdb2pb::ReplyUpdSymbol* Arena::CreateMaybeMessage< ::tradingdb2pb::ReplyUpdSymbol >(Arena* arena) {
  return Arena::CreateInternal< ::tradingdb2pb::ReplyUpdSymbol >(arena);
}
template<> PROTOBUF_NOINLINE ::tradingdb2pb::RequestGetSymbol* Arena::CreateMaybeMessage< ::tradingdb2pb::RequestGetSymbol >(Arena* arena) {
  return Arena::CreateInternal< ::tradingdb2pb::RequestGetSymbol >(arena);
}
template<> PROTOBUF_NOINLINE ::tradingdb2pb::ReplyGetSymbol* Arena::CreateMaybeMessage< ::tradingdb2pb::ReplyGetSymbol >(Arena* arena) {
  return Arena::CreateInternal< ::tradingdb2pb::ReplyGetSymbol >(arena);
}
template<> PROTOBUF_NOINLINE ::tradingdb2pb::RequestGetSymbols* Arena::CreateMaybeMessage< ::tradingdb2pb::RequestGetSymbols >(Arena* arena) {
  return Arena::CreateInternal< ::tradingdb2pb::RequestGetSymbols >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

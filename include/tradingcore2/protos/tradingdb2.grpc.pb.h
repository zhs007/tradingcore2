// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: tradingdb2.proto
#ifndef GRPC_tradingdb2_2eproto__INCLUDED
#define GRPC_tradingdb2_2eproto__INCLUDED

#include "tradingdb2.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace tradingpb {

// TradingDB2 - TradingDB2 service
class TradingDB2 final {
 public:
  static constexpr char const* service_full_name() {
    return "tradingpb.TradingDB2";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // updCandles - update candles
    std::unique_ptr< ::grpc::ClientWriterInterface< ::tradingpb::RequestUpdCandles>> updCandles(::grpc::ClientContext* context, ::tradingpb::ReplyUpdCandles* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::tradingpb::RequestUpdCandles>>(updCandlesRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::tradingpb::RequestUpdCandles>> AsyncupdCandles(::grpc::ClientContext* context, ::tradingpb::ReplyUpdCandles* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::tradingpb::RequestUpdCandles>>(AsyncupdCandlesRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::tradingpb::RequestUpdCandles>> PrepareAsyncupdCandles(::grpc::ClientContext* context, ::tradingpb::ReplyUpdCandles* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::tradingpb::RequestUpdCandles>>(PrepareAsyncupdCandlesRaw(context, response, cq));
    }
    // getCandles - get candles
    std::unique_ptr< ::grpc::ClientReaderInterface< ::tradingpb::ReplyGetCandles>> getCandles(::grpc::ClientContext* context, const ::tradingpb::RequestGetCandles& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::tradingpb::ReplyGetCandles>>(getCandlesRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::tradingpb::ReplyGetCandles>> AsyncgetCandles(::grpc::ClientContext* context, const ::tradingpb::RequestGetCandles& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::tradingpb::ReplyGetCandles>>(AsyncgetCandlesRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::tradingpb::ReplyGetCandles>> PrepareAsyncgetCandles(::grpc::ClientContext* context, const ::tradingpb::RequestGetCandles& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::tradingpb::ReplyGetCandles>>(PrepareAsyncgetCandlesRaw(context, request, cq));
    }
    // updSymbol - update symbol
    virtual ::grpc::Status updSymbol(::grpc::ClientContext* context, const ::tradingpb::RequestUpdSymbol& request, ::tradingpb::ReplyUpdSymbol* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tradingpb::ReplyUpdSymbol>> AsyncupdSymbol(::grpc::ClientContext* context, const ::tradingpb::RequestUpdSymbol& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tradingpb::ReplyUpdSymbol>>(AsyncupdSymbolRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tradingpb::ReplyUpdSymbol>> PrepareAsyncupdSymbol(::grpc::ClientContext* context, const ::tradingpb::RequestUpdSymbol& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tradingpb::ReplyUpdSymbol>>(PrepareAsyncupdSymbolRaw(context, request, cq));
    }
    // getSymbol - get symbol
    virtual ::grpc::Status getSymbol(::grpc::ClientContext* context, const ::tradingpb::RequestGetSymbol& request, ::tradingpb::ReplyGetSymbol* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tradingpb::ReplyGetSymbol>> AsyncgetSymbol(::grpc::ClientContext* context, const ::tradingpb::RequestGetSymbol& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tradingpb::ReplyGetSymbol>>(AsyncgetSymbolRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tradingpb::ReplyGetSymbol>> PrepareAsyncgetSymbol(::grpc::ClientContext* context, const ::tradingpb::RequestGetSymbol& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tradingpb::ReplyGetSymbol>>(PrepareAsyncgetSymbolRaw(context, request, cq));
    }
    // getSymbols - get symbols
    std::unique_ptr< ::grpc::ClientReaderInterface< ::tradingpb::ReplyGetSymbol>> getSymbols(::grpc::ClientContext* context, const ::tradingpb::RequestGetSymbols& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::tradingpb::ReplyGetSymbol>>(getSymbolsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::tradingpb::ReplyGetSymbol>> AsyncgetSymbols(::grpc::ClientContext* context, const ::tradingpb::RequestGetSymbols& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::tradingpb::ReplyGetSymbol>>(AsyncgetSymbolsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::tradingpb::ReplyGetSymbol>> PrepareAsyncgetSymbols(::grpc::ClientContext* context, const ::tradingpb::RequestGetSymbols& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::tradingpb::ReplyGetSymbol>>(PrepareAsyncgetSymbolsRaw(context, request, cq));
    }
    // simTrading - simulation trading
    virtual ::grpc::Status simTrading(::grpc::ClientContext* context, const ::tradingpb::RequestSimTrading& request, ::tradingpb::ReplySimTrading* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tradingpb::ReplySimTrading>> AsyncsimTrading(::grpc::ClientContext* context, const ::tradingpb::RequestSimTrading& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tradingpb::ReplySimTrading>>(AsyncsimTradingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tradingpb::ReplySimTrading>> PrepareAsyncsimTrading(::grpc::ClientContext* context, const ::tradingpb::RequestSimTrading& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tradingpb::ReplySimTrading>>(PrepareAsyncsimTradingRaw(context, request, cq));
    }
    // simTrading2 - simulation trading
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::tradingpb::RequestSimTrading, ::tradingpb::ReplySimTrading>> simTrading2(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::tradingpb::RequestSimTrading, ::tradingpb::ReplySimTrading>>(simTrading2Raw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::tradingpb::RequestSimTrading, ::tradingpb::ReplySimTrading>> AsyncsimTrading2(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::tradingpb::RequestSimTrading, ::tradingpb::ReplySimTrading>>(AsyncsimTrading2Raw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::tradingpb::RequestSimTrading, ::tradingpb::ReplySimTrading>> PrepareAsyncsimTrading2(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::tradingpb::RequestSimTrading, ::tradingpb::ReplySimTrading>>(PrepareAsyncsimTrading2Raw(context, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // updCandles - update candles
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void updCandles(::grpc::ClientContext* context, ::tradingpb::ReplyUpdCandles* response, ::grpc::ClientWriteReactor< ::tradingpb::RequestUpdCandles>* reactor) = 0;
      #else
      virtual void updCandles(::grpc::ClientContext* context, ::tradingpb::ReplyUpdCandles* response, ::grpc::experimental::ClientWriteReactor< ::tradingpb::RequestUpdCandles>* reactor) = 0;
      #endif
      // getCandles - get candles
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void getCandles(::grpc::ClientContext* context, ::tradingpb::RequestGetCandles* request, ::grpc::ClientReadReactor< ::tradingpb::ReplyGetCandles>* reactor) = 0;
      #else
      virtual void getCandles(::grpc::ClientContext* context, ::tradingpb::RequestGetCandles* request, ::grpc::experimental::ClientReadReactor< ::tradingpb::ReplyGetCandles>* reactor) = 0;
      #endif
      // updSymbol - update symbol
      virtual void updSymbol(::grpc::ClientContext* context, const ::tradingpb::RequestUpdSymbol* request, ::tradingpb::ReplyUpdSymbol* response, std::function<void(::grpc::Status)>) = 0;
      virtual void updSymbol(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tradingpb::ReplyUpdSymbol* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void updSymbol(::grpc::ClientContext* context, const ::tradingpb::RequestUpdSymbol* request, ::tradingpb::ReplyUpdSymbol* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void updSymbol(::grpc::ClientContext* context, const ::tradingpb::RequestUpdSymbol* request, ::tradingpb::ReplyUpdSymbol* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void updSymbol(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tradingpb::ReplyUpdSymbol* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void updSymbol(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tradingpb::ReplyUpdSymbol* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // getSymbol - get symbol
      virtual void getSymbol(::grpc::ClientContext* context, const ::tradingpb::RequestGetSymbol* request, ::tradingpb::ReplyGetSymbol* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getSymbol(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tradingpb::ReplyGetSymbol* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void getSymbol(::grpc::ClientContext* context, const ::tradingpb::RequestGetSymbol* request, ::tradingpb::ReplyGetSymbol* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void getSymbol(::grpc::ClientContext* context, const ::tradingpb::RequestGetSymbol* request, ::tradingpb::ReplyGetSymbol* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void getSymbol(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tradingpb::ReplyGetSymbol* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void getSymbol(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tradingpb::ReplyGetSymbol* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // getSymbols - get symbols
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void getSymbols(::grpc::ClientContext* context, ::tradingpb::RequestGetSymbols* request, ::grpc::ClientReadReactor< ::tradingpb::ReplyGetSymbol>* reactor) = 0;
      #else
      virtual void getSymbols(::grpc::ClientContext* context, ::tradingpb::RequestGetSymbols* request, ::grpc::experimental::ClientReadReactor< ::tradingpb::ReplyGetSymbol>* reactor) = 0;
      #endif
      // simTrading - simulation trading
      virtual void simTrading(::grpc::ClientContext* context, const ::tradingpb::RequestSimTrading* request, ::tradingpb::ReplySimTrading* response, std::function<void(::grpc::Status)>) = 0;
      virtual void simTrading(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tradingpb::ReplySimTrading* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void simTrading(::grpc::ClientContext* context, const ::tradingpb::RequestSimTrading* request, ::tradingpb::ReplySimTrading* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void simTrading(::grpc::ClientContext* context, const ::tradingpb::RequestSimTrading* request, ::tradingpb::ReplySimTrading* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void simTrading(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tradingpb::ReplySimTrading* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void simTrading(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tradingpb::ReplySimTrading* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // simTrading2 - simulation trading
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void simTrading2(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::tradingpb::RequestSimTrading,::tradingpb::ReplySimTrading>* reactor) = 0;
      #else
      virtual void simTrading2(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::tradingpb::RequestSimTrading,::tradingpb::ReplySimTrading>* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientWriterInterface< ::tradingpb::RequestUpdCandles>* updCandlesRaw(::grpc::ClientContext* context, ::tradingpb::ReplyUpdCandles* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::tradingpb::RequestUpdCandles>* AsyncupdCandlesRaw(::grpc::ClientContext* context, ::tradingpb::ReplyUpdCandles* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::tradingpb::RequestUpdCandles>* PrepareAsyncupdCandlesRaw(::grpc::ClientContext* context, ::tradingpb::ReplyUpdCandles* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::tradingpb::ReplyGetCandles>* getCandlesRaw(::grpc::ClientContext* context, const ::tradingpb::RequestGetCandles& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::tradingpb::ReplyGetCandles>* AsyncgetCandlesRaw(::grpc::ClientContext* context, const ::tradingpb::RequestGetCandles& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::tradingpb::ReplyGetCandles>* PrepareAsyncgetCandlesRaw(::grpc::ClientContext* context, const ::tradingpb::RequestGetCandles& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tradingpb::ReplyUpdSymbol>* AsyncupdSymbolRaw(::grpc::ClientContext* context, const ::tradingpb::RequestUpdSymbol& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tradingpb::ReplyUpdSymbol>* PrepareAsyncupdSymbolRaw(::grpc::ClientContext* context, const ::tradingpb::RequestUpdSymbol& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tradingpb::ReplyGetSymbol>* AsyncgetSymbolRaw(::grpc::ClientContext* context, const ::tradingpb::RequestGetSymbol& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tradingpb::ReplyGetSymbol>* PrepareAsyncgetSymbolRaw(::grpc::ClientContext* context, const ::tradingpb::RequestGetSymbol& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::tradingpb::ReplyGetSymbol>* getSymbolsRaw(::grpc::ClientContext* context, const ::tradingpb::RequestGetSymbols& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::tradingpb::ReplyGetSymbol>* AsyncgetSymbolsRaw(::grpc::ClientContext* context, const ::tradingpb::RequestGetSymbols& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::tradingpb::ReplyGetSymbol>* PrepareAsyncgetSymbolsRaw(::grpc::ClientContext* context, const ::tradingpb::RequestGetSymbols& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tradingpb::ReplySimTrading>* AsyncsimTradingRaw(::grpc::ClientContext* context, const ::tradingpb::RequestSimTrading& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tradingpb::ReplySimTrading>* PrepareAsyncsimTradingRaw(::grpc::ClientContext* context, const ::tradingpb::RequestSimTrading& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::tradingpb::RequestSimTrading, ::tradingpb::ReplySimTrading>* simTrading2Raw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::tradingpb::RequestSimTrading, ::tradingpb::ReplySimTrading>* AsyncsimTrading2Raw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::tradingpb::RequestSimTrading, ::tradingpb::ReplySimTrading>* PrepareAsyncsimTrading2Raw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    std::unique_ptr< ::grpc::ClientWriter< ::tradingpb::RequestUpdCandles>> updCandles(::grpc::ClientContext* context, ::tradingpb::ReplyUpdCandles* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::tradingpb::RequestUpdCandles>>(updCandlesRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::tradingpb::RequestUpdCandles>> AsyncupdCandles(::grpc::ClientContext* context, ::tradingpb::ReplyUpdCandles* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::tradingpb::RequestUpdCandles>>(AsyncupdCandlesRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::tradingpb::RequestUpdCandles>> PrepareAsyncupdCandles(::grpc::ClientContext* context, ::tradingpb::ReplyUpdCandles* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::tradingpb::RequestUpdCandles>>(PrepareAsyncupdCandlesRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::tradingpb::ReplyGetCandles>> getCandles(::grpc::ClientContext* context, const ::tradingpb::RequestGetCandles& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::tradingpb::ReplyGetCandles>>(getCandlesRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::tradingpb::ReplyGetCandles>> AsyncgetCandles(::grpc::ClientContext* context, const ::tradingpb::RequestGetCandles& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::tradingpb::ReplyGetCandles>>(AsyncgetCandlesRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::tradingpb::ReplyGetCandles>> PrepareAsyncgetCandles(::grpc::ClientContext* context, const ::tradingpb::RequestGetCandles& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::tradingpb::ReplyGetCandles>>(PrepareAsyncgetCandlesRaw(context, request, cq));
    }
    ::grpc::Status updSymbol(::grpc::ClientContext* context, const ::tradingpb::RequestUpdSymbol& request, ::tradingpb::ReplyUpdSymbol* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tradingpb::ReplyUpdSymbol>> AsyncupdSymbol(::grpc::ClientContext* context, const ::tradingpb::RequestUpdSymbol& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tradingpb::ReplyUpdSymbol>>(AsyncupdSymbolRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tradingpb::ReplyUpdSymbol>> PrepareAsyncupdSymbol(::grpc::ClientContext* context, const ::tradingpb::RequestUpdSymbol& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tradingpb::ReplyUpdSymbol>>(PrepareAsyncupdSymbolRaw(context, request, cq));
    }
    ::grpc::Status getSymbol(::grpc::ClientContext* context, const ::tradingpb::RequestGetSymbol& request, ::tradingpb::ReplyGetSymbol* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tradingpb::ReplyGetSymbol>> AsyncgetSymbol(::grpc::ClientContext* context, const ::tradingpb::RequestGetSymbol& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tradingpb::ReplyGetSymbol>>(AsyncgetSymbolRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tradingpb::ReplyGetSymbol>> PrepareAsyncgetSymbol(::grpc::ClientContext* context, const ::tradingpb::RequestGetSymbol& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tradingpb::ReplyGetSymbol>>(PrepareAsyncgetSymbolRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::tradingpb::ReplyGetSymbol>> getSymbols(::grpc::ClientContext* context, const ::tradingpb::RequestGetSymbols& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::tradingpb::ReplyGetSymbol>>(getSymbolsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::tradingpb::ReplyGetSymbol>> AsyncgetSymbols(::grpc::ClientContext* context, const ::tradingpb::RequestGetSymbols& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::tradingpb::ReplyGetSymbol>>(AsyncgetSymbolsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::tradingpb::ReplyGetSymbol>> PrepareAsyncgetSymbols(::grpc::ClientContext* context, const ::tradingpb::RequestGetSymbols& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::tradingpb::ReplyGetSymbol>>(PrepareAsyncgetSymbolsRaw(context, request, cq));
    }
    ::grpc::Status simTrading(::grpc::ClientContext* context, const ::tradingpb::RequestSimTrading& request, ::tradingpb::ReplySimTrading* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tradingpb::ReplySimTrading>> AsyncsimTrading(::grpc::ClientContext* context, const ::tradingpb::RequestSimTrading& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tradingpb::ReplySimTrading>>(AsyncsimTradingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tradingpb::ReplySimTrading>> PrepareAsyncsimTrading(::grpc::ClientContext* context, const ::tradingpb::RequestSimTrading& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tradingpb::ReplySimTrading>>(PrepareAsyncsimTradingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::tradingpb::RequestSimTrading, ::tradingpb::ReplySimTrading>> simTrading2(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::tradingpb::RequestSimTrading, ::tradingpb::ReplySimTrading>>(simTrading2Raw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::tradingpb::RequestSimTrading, ::tradingpb::ReplySimTrading>> AsyncsimTrading2(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::tradingpb::RequestSimTrading, ::tradingpb::ReplySimTrading>>(AsyncsimTrading2Raw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::tradingpb::RequestSimTrading, ::tradingpb::ReplySimTrading>> PrepareAsyncsimTrading2(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::tradingpb::RequestSimTrading, ::tradingpb::ReplySimTrading>>(PrepareAsyncsimTrading2Raw(context, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void updCandles(::grpc::ClientContext* context, ::tradingpb::ReplyUpdCandles* response, ::grpc::ClientWriteReactor< ::tradingpb::RequestUpdCandles>* reactor) override;
      #else
      void updCandles(::grpc::ClientContext* context, ::tradingpb::ReplyUpdCandles* response, ::grpc::experimental::ClientWriteReactor< ::tradingpb::RequestUpdCandles>* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void getCandles(::grpc::ClientContext* context, ::tradingpb::RequestGetCandles* request, ::grpc::ClientReadReactor< ::tradingpb::ReplyGetCandles>* reactor) override;
      #else
      void getCandles(::grpc::ClientContext* context, ::tradingpb::RequestGetCandles* request, ::grpc::experimental::ClientReadReactor< ::tradingpb::ReplyGetCandles>* reactor) override;
      #endif
      void updSymbol(::grpc::ClientContext* context, const ::tradingpb::RequestUpdSymbol* request, ::tradingpb::ReplyUpdSymbol* response, std::function<void(::grpc::Status)>) override;
      void updSymbol(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tradingpb::ReplyUpdSymbol* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void updSymbol(::grpc::ClientContext* context, const ::tradingpb::RequestUpdSymbol* request, ::tradingpb::ReplyUpdSymbol* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void updSymbol(::grpc::ClientContext* context, const ::tradingpb::RequestUpdSymbol* request, ::tradingpb::ReplyUpdSymbol* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void updSymbol(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tradingpb::ReplyUpdSymbol* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void updSymbol(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tradingpb::ReplyUpdSymbol* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void getSymbol(::grpc::ClientContext* context, const ::tradingpb::RequestGetSymbol* request, ::tradingpb::ReplyGetSymbol* response, std::function<void(::grpc::Status)>) override;
      void getSymbol(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tradingpb::ReplyGetSymbol* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void getSymbol(::grpc::ClientContext* context, const ::tradingpb::RequestGetSymbol* request, ::tradingpb::ReplyGetSymbol* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void getSymbol(::grpc::ClientContext* context, const ::tradingpb::RequestGetSymbol* request, ::tradingpb::ReplyGetSymbol* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void getSymbol(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tradingpb::ReplyGetSymbol* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void getSymbol(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tradingpb::ReplyGetSymbol* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void getSymbols(::grpc::ClientContext* context, ::tradingpb::RequestGetSymbols* request, ::grpc::ClientReadReactor< ::tradingpb::ReplyGetSymbol>* reactor) override;
      #else
      void getSymbols(::grpc::ClientContext* context, ::tradingpb::RequestGetSymbols* request, ::grpc::experimental::ClientReadReactor< ::tradingpb::ReplyGetSymbol>* reactor) override;
      #endif
      void simTrading(::grpc::ClientContext* context, const ::tradingpb::RequestSimTrading* request, ::tradingpb::ReplySimTrading* response, std::function<void(::grpc::Status)>) override;
      void simTrading(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tradingpb::ReplySimTrading* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void simTrading(::grpc::ClientContext* context, const ::tradingpb::RequestSimTrading* request, ::tradingpb::ReplySimTrading* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void simTrading(::grpc::ClientContext* context, const ::tradingpb::RequestSimTrading* request, ::tradingpb::ReplySimTrading* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void simTrading(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tradingpb::ReplySimTrading* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void simTrading(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tradingpb::ReplySimTrading* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void simTrading2(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::tradingpb::RequestSimTrading,::tradingpb::ReplySimTrading>* reactor) override;
      #else
      void simTrading2(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::tradingpb::RequestSimTrading,::tradingpb::ReplySimTrading>* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientWriter< ::tradingpb::RequestUpdCandles>* updCandlesRaw(::grpc::ClientContext* context, ::tradingpb::ReplyUpdCandles* response) override;
    ::grpc::ClientAsyncWriter< ::tradingpb::RequestUpdCandles>* AsyncupdCandlesRaw(::grpc::ClientContext* context, ::tradingpb::ReplyUpdCandles* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::tradingpb::RequestUpdCandles>* PrepareAsyncupdCandlesRaw(::grpc::ClientContext* context, ::tradingpb::ReplyUpdCandles* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::tradingpb::ReplyGetCandles>* getCandlesRaw(::grpc::ClientContext* context, const ::tradingpb::RequestGetCandles& request) override;
    ::grpc::ClientAsyncReader< ::tradingpb::ReplyGetCandles>* AsyncgetCandlesRaw(::grpc::ClientContext* context, const ::tradingpb::RequestGetCandles& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::tradingpb::ReplyGetCandles>* PrepareAsyncgetCandlesRaw(::grpc::ClientContext* context, const ::tradingpb::RequestGetCandles& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tradingpb::ReplyUpdSymbol>* AsyncupdSymbolRaw(::grpc::ClientContext* context, const ::tradingpb::RequestUpdSymbol& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tradingpb::ReplyUpdSymbol>* PrepareAsyncupdSymbolRaw(::grpc::ClientContext* context, const ::tradingpb::RequestUpdSymbol& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tradingpb::ReplyGetSymbol>* AsyncgetSymbolRaw(::grpc::ClientContext* context, const ::tradingpb::RequestGetSymbol& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tradingpb::ReplyGetSymbol>* PrepareAsyncgetSymbolRaw(::grpc::ClientContext* context, const ::tradingpb::RequestGetSymbol& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::tradingpb::ReplyGetSymbol>* getSymbolsRaw(::grpc::ClientContext* context, const ::tradingpb::RequestGetSymbols& request) override;
    ::grpc::ClientAsyncReader< ::tradingpb::ReplyGetSymbol>* AsyncgetSymbolsRaw(::grpc::ClientContext* context, const ::tradingpb::RequestGetSymbols& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::tradingpb::ReplyGetSymbol>* PrepareAsyncgetSymbolsRaw(::grpc::ClientContext* context, const ::tradingpb::RequestGetSymbols& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tradingpb::ReplySimTrading>* AsyncsimTradingRaw(::grpc::ClientContext* context, const ::tradingpb::RequestSimTrading& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tradingpb::ReplySimTrading>* PrepareAsyncsimTradingRaw(::grpc::ClientContext* context, const ::tradingpb::RequestSimTrading& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::tradingpb::RequestSimTrading, ::tradingpb::ReplySimTrading>* simTrading2Raw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::tradingpb::RequestSimTrading, ::tradingpb::ReplySimTrading>* AsyncsimTrading2Raw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::tradingpb::RequestSimTrading, ::tradingpb::ReplySimTrading>* PrepareAsyncsimTrading2Raw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_updCandles_;
    const ::grpc::internal::RpcMethod rpcmethod_getCandles_;
    const ::grpc::internal::RpcMethod rpcmethod_updSymbol_;
    const ::grpc::internal::RpcMethod rpcmethod_getSymbol_;
    const ::grpc::internal::RpcMethod rpcmethod_getSymbols_;
    const ::grpc::internal::RpcMethod rpcmethod_simTrading_;
    const ::grpc::internal::RpcMethod rpcmethod_simTrading2_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // updCandles - update candles
    virtual ::grpc::Status updCandles(::grpc::ServerContext* context, ::grpc::ServerReader< ::tradingpb::RequestUpdCandles>* reader, ::tradingpb::ReplyUpdCandles* response);
    // getCandles - get candles
    virtual ::grpc::Status getCandles(::grpc::ServerContext* context, const ::tradingpb::RequestGetCandles* request, ::grpc::ServerWriter< ::tradingpb::ReplyGetCandles>* writer);
    // updSymbol - update symbol
    virtual ::grpc::Status updSymbol(::grpc::ServerContext* context, const ::tradingpb::RequestUpdSymbol* request, ::tradingpb::ReplyUpdSymbol* response);
    // getSymbol - get symbol
    virtual ::grpc::Status getSymbol(::grpc::ServerContext* context, const ::tradingpb::RequestGetSymbol* request, ::tradingpb::ReplyGetSymbol* response);
    // getSymbols - get symbols
    virtual ::grpc::Status getSymbols(::grpc::ServerContext* context, const ::tradingpb::RequestGetSymbols* request, ::grpc::ServerWriter< ::tradingpb::ReplyGetSymbol>* writer);
    // simTrading - simulation trading
    virtual ::grpc::Status simTrading(::grpc::ServerContext* context, const ::tradingpb::RequestSimTrading* request, ::tradingpb::ReplySimTrading* response);
    // simTrading2 - simulation trading
    virtual ::grpc::Status simTrading2(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::tradingpb::ReplySimTrading, ::tradingpb::RequestSimTrading>* stream);
  };
  template <class BaseClass>
  class WithAsyncMethod_updCandles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_updCandles() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_updCandles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status updCandles(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::tradingpb::RequestUpdCandles>* /*reader*/, ::tradingpb::ReplyUpdCandles* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestupdCandles(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::tradingpb::ReplyUpdCandles, ::tradingpb::RequestUpdCandles>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(0, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getCandles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getCandles() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_getCandles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getCandles(::grpc::ServerContext* /*context*/, const ::tradingpb::RequestGetCandles* /*request*/, ::grpc::ServerWriter< ::tradingpb::ReplyGetCandles>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetCandles(::grpc::ServerContext* context, ::tradingpb::RequestGetCandles* request, ::grpc::ServerAsyncWriter< ::tradingpb::ReplyGetCandles>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_updSymbol : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_updSymbol() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_updSymbol() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status updSymbol(::grpc::ServerContext* /*context*/, const ::tradingpb::RequestUpdSymbol* /*request*/, ::tradingpb::ReplyUpdSymbol* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestupdSymbol(::grpc::ServerContext* context, ::tradingpb::RequestUpdSymbol* request, ::grpc::ServerAsyncResponseWriter< ::tradingpb::ReplyUpdSymbol>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getSymbol : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getSymbol() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_getSymbol() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getSymbol(::grpc::ServerContext* /*context*/, const ::tradingpb::RequestGetSymbol* /*request*/, ::tradingpb::ReplyGetSymbol* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetSymbol(::grpc::ServerContext* context, ::tradingpb::RequestGetSymbol* request, ::grpc::ServerAsyncResponseWriter< ::tradingpb::ReplyGetSymbol>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getSymbols : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getSymbols() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_getSymbols() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getSymbols(::grpc::ServerContext* /*context*/, const ::tradingpb::RequestGetSymbols* /*request*/, ::grpc::ServerWriter< ::tradingpb::ReplyGetSymbol>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetSymbols(::grpc::ServerContext* context, ::tradingpb::RequestGetSymbols* request, ::grpc::ServerAsyncWriter< ::tradingpb::ReplyGetSymbol>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(4, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_simTrading : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_simTrading() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_simTrading() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status simTrading(::grpc::ServerContext* /*context*/, const ::tradingpb::RequestSimTrading* /*request*/, ::tradingpb::ReplySimTrading* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsimTrading(::grpc::ServerContext* context, ::tradingpb::RequestSimTrading* request, ::grpc::ServerAsyncResponseWriter< ::tradingpb::ReplySimTrading>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_simTrading2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_simTrading2() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_simTrading2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status simTrading2(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::tradingpb::ReplySimTrading, ::tradingpb::RequestSimTrading>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsimTrading2(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::tradingpb::ReplySimTrading, ::tradingpb::RequestSimTrading>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(6, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_updCandles<WithAsyncMethod_getCandles<WithAsyncMethod_updSymbol<WithAsyncMethod_getSymbol<WithAsyncMethod_getSymbols<WithAsyncMethod_simTrading<WithAsyncMethod_simTrading2<Service > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_updCandles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_updCandles() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackClientStreamingHandler< ::tradingpb::RequestUpdCandles, ::tradingpb::ReplyUpdCandles>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, ::tradingpb::ReplyUpdCandles* response) { return this->updCandles(context, response); }));
    }
    ~ExperimentalWithCallbackMethod_updCandles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status updCandles(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::tradingpb::RequestUpdCandles>* /*reader*/, ::tradingpb::ReplyUpdCandles* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerReadReactor< ::tradingpb::RequestUpdCandles>* updCandles(
      ::grpc::CallbackServerContext* /*context*/, ::tradingpb::ReplyUpdCandles* /*response*/)
    #else
    virtual ::grpc::experimental::ServerReadReactor< ::tradingpb::RequestUpdCandles>* updCandles(
      ::grpc::experimental::CallbackServerContext* /*context*/, ::tradingpb::ReplyUpdCandles* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_getCandles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_getCandles() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::tradingpb::RequestGetCandles, ::tradingpb::ReplyGetCandles>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::tradingpb::RequestGetCandles* request) { return this->getCandles(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_getCandles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getCandles(::grpc::ServerContext* /*context*/, const ::tradingpb::RequestGetCandles* /*request*/, ::grpc::ServerWriter< ::tradingpb::ReplyGetCandles>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::tradingpb::ReplyGetCandles>* getCandles(
      ::grpc::CallbackServerContext* /*context*/, const ::tradingpb::RequestGetCandles* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::tradingpb::ReplyGetCandles>* getCandles(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::tradingpb::RequestGetCandles* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_updSymbol : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_updSymbol() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::tradingpb::RequestUpdSymbol, ::tradingpb::ReplyUpdSymbol>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::tradingpb::RequestUpdSymbol* request, ::tradingpb::ReplyUpdSymbol* response) { return this->updSymbol(context, request, response); }));}
    void SetMessageAllocatorFor_updSymbol(
        ::grpc::experimental::MessageAllocator< ::tradingpb::RequestUpdSymbol, ::tradingpb::ReplyUpdSymbol>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::tradingpb::RequestUpdSymbol, ::tradingpb::ReplyUpdSymbol>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_updSymbol() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status updSymbol(::grpc::ServerContext* /*context*/, const ::tradingpb::RequestUpdSymbol* /*request*/, ::tradingpb::ReplyUpdSymbol* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* updSymbol(
      ::grpc::CallbackServerContext* /*context*/, const ::tradingpb::RequestUpdSymbol* /*request*/, ::tradingpb::ReplyUpdSymbol* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* updSymbol(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::tradingpb::RequestUpdSymbol* /*request*/, ::tradingpb::ReplyUpdSymbol* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_getSymbol : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_getSymbol() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::tradingpb::RequestGetSymbol, ::tradingpb::ReplyGetSymbol>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::tradingpb::RequestGetSymbol* request, ::tradingpb::ReplyGetSymbol* response) { return this->getSymbol(context, request, response); }));}
    void SetMessageAllocatorFor_getSymbol(
        ::grpc::experimental::MessageAllocator< ::tradingpb::RequestGetSymbol, ::tradingpb::ReplyGetSymbol>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::tradingpb::RequestGetSymbol, ::tradingpb::ReplyGetSymbol>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_getSymbol() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getSymbol(::grpc::ServerContext* /*context*/, const ::tradingpb::RequestGetSymbol* /*request*/, ::tradingpb::ReplyGetSymbol* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* getSymbol(
      ::grpc::CallbackServerContext* /*context*/, const ::tradingpb::RequestGetSymbol* /*request*/, ::tradingpb::ReplyGetSymbol* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* getSymbol(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::tradingpb::RequestGetSymbol* /*request*/, ::tradingpb::ReplyGetSymbol* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_getSymbols : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_getSymbols() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::tradingpb::RequestGetSymbols, ::tradingpb::ReplyGetSymbol>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::tradingpb::RequestGetSymbols* request) { return this->getSymbols(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_getSymbols() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getSymbols(::grpc::ServerContext* /*context*/, const ::tradingpb::RequestGetSymbols* /*request*/, ::grpc::ServerWriter< ::tradingpb::ReplyGetSymbol>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::tradingpb::ReplyGetSymbol>* getSymbols(
      ::grpc::CallbackServerContext* /*context*/, const ::tradingpb::RequestGetSymbols* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::tradingpb::ReplyGetSymbol>* getSymbols(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::tradingpb::RequestGetSymbols* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_simTrading : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_simTrading() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(5,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::tradingpb::RequestSimTrading, ::tradingpb::ReplySimTrading>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::tradingpb::RequestSimTrading* request, ::tradingpb::ReplySimTrading* response) { return this->simTrading(context, request, response); }));}
    void SetMessageAllocatorFor_simTrading(
        ::grpc::experimental::MessageAllocator< ::tradingpb::RequestSimTrading, ::tradingpb::ReplySimTrading>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(5);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::tradingpb::RequestSimTrading, ::tradingpb::ReplySimTrading>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_simTrading() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status simTrading(::grpc::ServerContext* /*context*/, const ::tradingpb::RequestSimTrading* /*request*/, ::tradingpb::ReplySimTrading* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* simTrading(
      ::grpc::CallbackServerContext* /*context*/, const ::tradingpb::RequestSimTrading* /*request*/, ::tradingpb::ReplySimTrading* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* simTrading(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::tradingpb::RequestSimTrading* /*request*/, ::tradingpb::ReplySimTrading* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_simTrading2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_simTrading2() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(6,
          new ::grpc_impl::internal::CallbackBidiHandler< ::tradingpb::RequestSimTrading, ::tradingpb::ReplySimTrading>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context) { return this->simTrading2(context); }));
    }
    ~ExperimentalWithCallbackMethod_simTrading2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status simTrading2(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::tradingpb::ReplySimTrading, ::tradingpb::RequestSimTrading>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerBidiReactor< ::tradingpb::RequestSimTrading, ::tradingpb::ReplySimTrading>* simTrading2(
      ::grpc::CallbackServerContext* /*context*/)
    #else
    virtual ::grpc::experimental::ServerBidiReactor< ::tradingpb::RequestSimTrading, ::tradingpb::ReplySimTrading>* simTrading2(
      ::grpc::experimental::CallbackServerContext* /*context*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_updCandles<ExperimentalWithCallbackMethod_getCandles<ExperimentalWithCallbackMethod_updSymbol<ExperimentalWithCallbackMethod_getSymbol<ExperimentalWithCallbackMethod_getSymbols<ExperimentalWithCallbackMethod_simTrading<ExperimentalWithCallbackMethod_simTrading2<Service > > > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_updCandles<ExperimentalWithCallbackMethod_getCandles<ExperimentalWithCallbackMethod_updSymbol<ExperimentalWithCallbackMethod_getSymbol<ExperimentalWithCallbackMethod_getSymbols<ExperimentalWithCallbackMethod_simTrading<ExperimentalWithCallbackMethod_simTrading2<Service > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_updCandles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_updCandles() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_updCandles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status updCandles(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::tradingpb::RequestUpdCandles>* /*reader*/, ::tradingpb::ReplyUpdCandles* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getCandles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getCandles() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_getCandles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getCandles(::grpc::ServerContext* /*context*/, const ::tradingpb::RequestGetCandles* /*request*/, ::grpc::ServerWriter< ::tradingpb::ReplyGetCandles>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_updSymbol : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_updSymbol() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_updSymbol() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status updSymbol(::grpc::ServerContext* /*context*/, const ::tradingpb::RequestUpdSymbol* /*request*/, ::tradingpb::ReplyUpdSymbol* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getSymbol : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getSymbol() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_getSymbol() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getSymbol(::grpc::ServerContext* /*context*/, const ::tradingpb::RequestGetSymbol* /*request*/, ::tradingpb::ReplyGetSymbol* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getSymbols : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getSymbols() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_getSymbols() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getSymbols(::grpc::ServerContext* /*context*/, const ::tradingpb::RequestGetSymbols* /*request*/, ::grpc::ServerWriter< ::tradingpb::ReplyGetSymbol>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_simTrading : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_simTrading() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_simTrading() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status simTrading(::grpc::ServerContext* /*context*/, const ::tradingpb::RequestSimTrading* /*request*/, ::tradingpb::ReplySimTrading* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_simTrading2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_simTrading2() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_simTrading2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status simTrading2(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::tradingpb::ReplySimTrading, ::tradingpb::RequestSimTrading>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_updCandles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_updCandles() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_updCandles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status updCandles(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::tradingpb::RequestUpdCandles>* /*reader*/, ::tradingpb::ReplyUpdCandles* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestupdCandles(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(0, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getCandles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getCandles() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_getCandles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getCandles(::grpc::ServerContext* /*context*/, const ::tradingpb::RequestGetCandles* /*request*/, ::grpc::ServerWriter< ::tradingpb::ReplyGetCandles>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetCandles(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_updSymbol : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_updSymbol() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_updSymbol() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status updSymbol(::grpc::ServerContext* /*context*/, const ::tradingpb::RequestUpdSymbol* /*request*/, ::tradingpb::ReplyUpdSymbol* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestupdSymbol(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getSymbol : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getSymbol() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_getSymbol() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getSymbol(::grpc::ServerContext* /*context*/, const ::tradingpb::RequestGetSymbol* /*request*/, ::tradingpb::ReplyGetSymbol* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetSymbol(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getSymbols : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getSymbols() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_getSymbols() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getSymbols(::grpc::ServerContext* /*context*/, const ::tradingpb::RequestGetSymbols* /*request*/, ::grpc::ServerWriter< ::tradingpb::ReplyGetSymbol>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetSymbols(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(4, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_simTrading : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_simTrading() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_simTrading() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status simTrading(::grpc::ServerContext* /*context*/, const ::tradingpb::RequestSimTrading* /*request*/, ::tradingpb::ReplySimTrading* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsimTrading(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_simTrading2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_simTrading2() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_simTrading2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status simTrading2(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::tradingpb::ReplySimTrading, ::tradingpb::RequestSimTrading>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsimTrading2(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(6, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_updCandles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_updCandles() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, ::grpc::ByteBuffer* response) { return this->updCandles(context, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_updCandles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status updCandles(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::tradingpb::RequestUpdCandles>* /*reader*/, ::tradingpb::ReplyUpdCandles* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* updCandles(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerReadReactor< ::grpc::ByteBuffer>* updCandles(
      ::grpc::experimental::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_getCandles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_getCandles() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->getCandles(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_getCandles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getCandles(::grpc::ServerContext* /*context*/, const ::tradingpb::RequestGetCandles* /*request*/, ::grpc::ServerWriter< ::tradingpb::ReplyGetCandles>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* getCandles(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* getCandles(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_updSymbol : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_updSymbol() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->updSymbol(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_updSymbol() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status updSymbol(::grpc::ServerContext* /*context*/, const ::tradingpb::RequestUpdSymbol* /*request*/, ::tradingpb::ReplyUpdSymbol* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* updSymbol(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* updSymbol(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_getSymbol : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_getSymbol() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getSymbol(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_getSymbol() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getSymbol(::grpc::ServerContext* /*context*/, const ::tradingpb::RequestGetSymbol* /*request*/, ::tradingpb::ReplyGetSymbol* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* getSymbol(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* getSymbol(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_getSymbols : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_getSymbols() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->getSymbols(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_getSymbols() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getSymbols(::grpc::ServerContext* /*context*/, const ::tradingpb::RequestGetSymbols* /*request*/, ::grpc::ServerWriter< ::tradingpb::ReplyGetSymbol>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* getSymbols(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* getSymbols(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_simTrading : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_simTrading() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(5,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->simTrading(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_simTrading() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status simTrading(::grpc::ServerContext* /*context*/, const ::tradingpb::RequestSimTrading* /*request*/, ::tradingpb::ReplySimTrading* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* simTrading(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* simTrading(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_simTrading2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_simTrading2() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(6,
          new ::grpc_impl::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context) { return this->simTrading2(context); }));
    }
    ~ExperimentalWithRawCallbackMethod_simTrading2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status simTrading2(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::tradingpb::ReplySimTrading, ::tradingpb::RequestSimTrading>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* simTrading2(
      ::grpc::CallbackServerContext* /*context*/)
    #else
    virtual ::grpc::experimental::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* simTrading2(
      ::grpc::experimental::CallbackServerContext* /*context*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_updSymbol : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_updSymbol() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::tradingpb::RequestUpdSymbol, ::tradingpb::ReplyUpdSymbol>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::tradingpb::RequestUpdSymbol, ::tradingpb::ReplyUpdSymbol>* streamer) {
                       return this->StreamedupdSymbol(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_updSymbol() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status updSymbol(::grpc::ServerContext* /*context*/, const ::tradingpb::RequestUpdSymbol* /*request*/, ::tradingpb::ReplyUpdSymbol* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedupdSymbol(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tradingpb::RequestUpdSymbol,::tradingpb::ReplyUpdSymbol>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getSymbol : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getSymbol() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::tradingpb::RequestGetSymbol, ::tradingpb::ReplyGetSymbol>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::tradingpb::RequestGetSymbol, ::tradingpb::ReplyGetSymbol>* streamer) {
                       return this->StreamedgetSymbol(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getSymbol() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getSymbol(::grpc::ServerContext* /*context*/, const ::tradingpb::RequestGetSymbol* /*request*/, ::tradingpb::ReplyGetSymbol* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetSymbol(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tradingpb::RequestGetSymbol,::tradingpb::ReplyGetSymbol>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_simTrading : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_simTrading() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::tradingpb::RequestSimTrading, ::tradingpb::ReplySimTrading>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::tradingpb::RequestSimTrading, ::tradingpb::ReplySimTrading>* streamer) {
                       return this->StreamedsimTrading(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_simTrading() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status simTrading(::grpc::ServerContext* /*context*/, const ::tradingpb::RequestSimTrading* /*request*/, ::tradingpb::ReplySimTrading* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsimTrading(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tradingpb::RequestSimTrading,::tradingpb::ReplySimTrading>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_updSymbol<WithStreamedUnaryMethod_getSymbol<WithStreamedUnaryMethod_simTrading<Service > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_getCandles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_getCandles() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::tradingpb::RequestGetCandles, ::tradingpb::ReplyGetCandles>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerSplitStreamer<
                     ::tradingpb::RequestGetCandles, ::tradingpb::ReplyGetCandles>* streamer) {
                       return this->StreamedgetCandles(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_getCandles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getCandles(::grpc::ServerContext* /*context*/, const ::tradingpb::RequestGetCandles* /*request*/, ::grpc::ServerWriter< ::tradingpb::ReplyGetCandles>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedgetCandles(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::tradingpb::RequestGetCandles,::tradingpb::ReplyGetCandles>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_getSymbols : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_getSymbols() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::tradingpb::RequestGetSymbols, ::tradingpb::ReplyGetSymbol>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerSplitStreamer<
                     ::tradingpb::RequestGetSymbols, ::tradingpb::ReplyGetSymbol>* streamer) {
                       return this->StreamedgetSymbols(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_getSymbols() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getSymbols(::grpc::ServerContext* /*context*/, const ::tradingpb::RequestGetSymbols* /*request*/, ::grpc::ServerWriter< ::tradingpb::ReplyGetSymbol>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedgetSymbols(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::tradingpb::RequestGetSymbols,::tradingpb::ReplyGetSymbol>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_getCandles<WithSplitStreamingMethod_getSymbols<Service > > SplitStreamedService;
  typedef WithSplitStreamingMethod_getCandles<WithStreamedUnaryMethod_updSymbol<WithStreamedUnaryMethod_getSymbol<WithSplitStreamingMethod_getSymbols<WithStreamedUnaryMethod_simTrading<Service > > > > > StreamedService;
};

}  // namespace tradingpb


#endif  // GRPC_tradingdb2_2eproto__INCLUDED

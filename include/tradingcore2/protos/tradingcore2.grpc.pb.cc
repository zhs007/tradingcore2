// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: tradingcore2.proto

#include "tradingcore2.pb.h"
#include "tradingcore2.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace tradingcore2pb {

static const char* TradingCore2Service_method_names[] = {
  "/tradingcore2pb.TradingCore2Service/getServerInfo",
  "/tradingcore2pb.TradingCore2Service/train",
};

std::unique_ptr< TradingCore2Service::Stub> TradingCore2Service::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< TradingCore2Service::Stub> stub(new TradingCore2Service::Stub(channel));
  return stub;
}

TradingCore2Service::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_getServerInfo_(TradingCore2Service_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_train_(TradingCore2Service_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status TradingCore2Service::Stub::getServerInfo(::grpc::ClientContext* context, const ::tradingcore2pb::RequestServerInfo& request, ::tradingcore2pb::ReplyServerInfo* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_getServerInfo_, context, request, response);
}

void TradingCore2Service::Stub::experimental_async::getServerInfo(::grpc::ClientContext* context, const ::tradingcore2pb::RequestServerInfo* request, ::tradingcore2pb::ReplyServerInfo* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_getServerInfo_, context, request, response, std::move(f));
}

void TradingCore2Service::Stub::experimental_async::getServerInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tradingcore2pb::ReplyServerInfo* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_getServerInfo_, context, request, response, std::move(f));
}

void TradingCore2Service::Stub::experimental_async::getServerInfo(::grpc::ClientContext* context, const ::tradingcore2pb::RequestServerInfo* request, ::tradingcore2pb::ReplyServerInfo* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_getServerInfo_, context, request, response, reactor);
}

void TradingCore2Service::Stub::experimental_async::getServerInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tradingcore2pb::ReplyServerInfo* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_getServerInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tradingcore2pb::ReplyServerInfo>* TradingCore2Service::Stub::AsyncgetServerInfoRaw(::grpc::ClientContext* context, const ::tradingcore2pb::RequestServerInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::tradingcore2pb::ReplyServerInfo>::Create(channel_.get(), cq, rpcmethod_getServerInfo_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::tradingcore2pb::ReplyServerInfo>* TradingCore2Service::Stub::PrepareAsyncgetServerInfoRaw(::grpc::ClientContext* context, const ::tradingcore2pb::RequestServerInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::tradingcore2pb::ReplyServerInfo>::Create(channel_.get(), cq, rpcmethod_getServerInfo_, context, request, false);
}

::grpc::Status TradingCore2Service::Stub::train(::grpc::ClientContext* context, const ::tradingcore2pb::RequestTrain& request, ::tradingcore2pb::ReplyTrain* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_train_, context, request, response);
}

void TradingCore2Service::Stub::experimental_async::train(::grpc::ClientContext* context, const ::tradingcore2pb::RequestTrain* request, ::tradingcore2pb::ReplyTrain* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_train_, context, request, response, std::move(f));
}

void TradingCore2Service::Stub::experimental_async::train(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tradingcore2pb::ReplyTrain* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_train_, context, request, response, std::move(f));
}

void TradingCore2Service::Stub::experimental_async::train(::grpc::ClientContext* context, const ::tradingcore2pb::RequestTrain* request, ::tradingcore2pb::ReplyTrain* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_train_, context, request, response, reactor);
}

void TradingCore2Service::Stub::experimental_async::train(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tradingcore2pb::ReplyTrain* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_train_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tradingcore2pb::ReplyTrain>* TradingCore2Service::Stub::AsynctrainRaw(::grpc::ClientContext* context, const ::tradingcore2pb::RequestTrain& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::tradingcore2pb::ReplyTrain>::Create(channel_.get(), cq, rpcmethod_train_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::tradingcore2pb::ReplyTrain>* TradingCore2Service::Stub::PrepareAsynctrainRaw(::grpc::ClientContext* context, const ::tradingcore2pb::RequestTrain& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::tradingcore2pb::ReplyTrain>::Create(channel_.get(), cq, rpcmethod_train_, context, request, false);
}

TradingCore2Service::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TradingCore2Service_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TradingCore2Service::Service, ::tradingcore2pb::RequestServerInfo, ::tradingcore2pb::ReplyServerInfo>(
          [](TradingCore2Service::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::tradingcore2pb::RequestServerInfo* req,
             ::tradingcore2pb::ReplyServerInfo* resp) {
               return service->getServerInfo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TradingCore2Service_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TradingCore2Service::Service, ::tradingcore2pb::RequestTrain, ::tradingcore2pb::ReplyTrain>(
          [](TradingCore2Service::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::tradingcore2pb::RequestTrain* req,
             ::tradingcore2pb::ReplyTrain* resp) {
               return service->train(ctx, req, resp);
             }, this)));
}

TradingCore2Service::Service::~Service() {
}

::grpc::Status TradingCore2Service::Service::getServerInfo(::grpc::ServerContext* context, const ::tradingcore2pb::RequestServerInfo* request, ::tradingcore2pb::ReplyServerInfo* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TradingCore2Service::Service::train(::grpc::ServerContext* context, const ::tradingcore2pb::RequestTrain* request, ::tradingcore2pb::ReplyTrain* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace tradingcore2pb


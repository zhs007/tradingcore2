// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: trading2.proto

#include "trading2.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_trading2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AIPParams_trading2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_trading2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Asset_trading2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_trading2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BuyParams_trading2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_trading2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Candle_trading2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_trading2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Candles_trading2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_trading2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Candles_MapCandlesEntry_DoNotUse_trading2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_trading2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CtrlCondition_trading2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_trading2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CtrlNode_trading2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_trading2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CtrlNode_MapAssetsInfoEntry_DoNotUse_trading2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_trading2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CtrlNodeAssetInfo_trading2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_trading2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FeeParams_trading2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_trading2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Indicator_trading2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_trading2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IndicatorData_trading2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_trading2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InitParams_trading2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_trading2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_PNLAssetData_trading2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_trading2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PNLDataValue_trading2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_trading2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SellParams_trading2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_trading2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SimTradingCacheNode_trading2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_trading2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_SimTradingParams_trading2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_trading2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StopLossParams_trading2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_trading2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<9> scc_info_Strategy_trading2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_trading2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TakeProfitParams_trading2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_trading2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Wallet_trading2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_trading2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WalletAsset_trading2_2eproto;
namespace tradingpb {
class BasicRequestDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BasicRequestData> _instance;
} _BasicRequestData_default_instance_;
class CandleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Candle> _instance;
} _Candle_default_instance_;
class Candles_MapCandlesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Candles_MapCandlesEntry_DoNotUse> _instance;
} _Candles_MapCandlesEntry_DoNotUse_default_instance_;
class CandlesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Candles> _instance;
} _Candles_default_instance_;
class AssetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Asset> _instance;
} _Asset_default_instance_;
class CtrlNodeAssetInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CtrlNodeAssetInfo> _instance;
} _CtrlNodeAssetInfo_default_instance_;
class CtrlNode_MapAssetsInfoEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CtrlNode_MapAssetsInfoEntry_DoNotUse> _instance;
} _CtrlNode_MapAssetsInfoEntry_DoNotUse_default_instance_;
class CtrlNodeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CtrlNode> _instance;
} _CtrlNode_default_instance_;
class WalletAssetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WalletAsset> _instance;
} _WalletAsset_default_instance_;
class WalletDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Wallet> _instance;
} _Wallet_default_instance_;
class CtrlConditionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CtrlCondition> _instance;
} _CtrlCondition_default_instance_;
class IndicatorDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IndicatorData> _instance;
} _IndicatorData_default_instance_;
class IndicatorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Indicator> _instance;
} _Indicator_default_instance_;
class BuyParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BuyParams> _instance;
} _BuyParams_default_instance_;
class SellParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SellParams> _instance;
} _SellParams_default_instance_;
class StopLossParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StopLossParams> _instance;
} _StopLossParams_default_instance_;
class TakeProfitParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TakeProfitParams> _instance;
} _TakeProfitParams_default_instance_;
class InitParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InitParams> _instance;
} _InitParams_default_instance_;
class AIPParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AIPParams> _instance;
} _AIPParams_default_instance_;
class FeeParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FeeParams> _instance;
} _FeeParams_default_instance_;
class StrategyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Strategy> _instance;
} _Strategy_default_instance_;
class PNLDataValueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PNLDataValue> _instance;
} _PNLDataValue_default_instance_;
class PNLAssetDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PNLAssetData> _instance;
} _PNLAssetData_default_instance_;
class PNLDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PNLData> _instance;
} _PNLData_default_instance_;
class SimTradingParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SimTradingParams> _instance;
} _SimTradingParams_default_instance_;
class TradingNodeInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TradingNodeInfo> _instance;
} _TradingNodeInfo_default_instance_;
class SimTradingCacheNodeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SimTradingCacheNode> _instance;
} _SimTradingCacheNode_default_instance_;
class SimTradingCacheDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SimTradingCache> _instance;
} _SimTradingCache_default_instance_;
}  // namespace tradingpb
static void InitDefaultsscc_info_AIPParams_trading2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tradingpb::_AIPParams_default_instance_;
    new (ptr) ::tradingpb::AIPParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tradingpb::AIPParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AIPParams_trading2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AIPParams_trading2_2eproto}, {}};

static void InitDefaultsscc_info_Asset_trading2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tradingpb::_Asset_default_instance_;
    new (ptr) ::tradingpb::Asset();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tradingpb::Asset::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Asset_trading2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Asset_trading2_2eproto}, {}};

static void InitDefaultsscc_info_BasicRequestData_trading2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tradingpb::_BasicRequestData_default_instance_;
    new (ptr) ::tradingpb::BasicRequestData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tradingpb::BasicRequestData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BasicRequestData_trading2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BasicRequestData_trading2_2eproto}, {}};

static void InitDefaultsscc_info_BuyParams_trading2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tradingpb::_BuyParams_default_instance_;
    new (ptr) ::tradingpb::BuyParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tradingpb::BuyParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BuyParams_trading2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BuyParams_trading2_2eproto}, {}};

static void InitDefaultsscc_info_Candle_trading2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tradingpb::_Candle_default_instance_;
    new (ptr) ::tradingpb::Candle();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tradingpb::Candle::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Candle_trading2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Candle_trading2_2eproto}, {}};

static void InitDefaultsscc_info_Candles_trading2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tradingpb::_Candles_default_instance_;
    new (ptr) ::tradingpb::Candles();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tradingpb::Candles::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Candles_trading2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Candles_trading2_2eproto}, {
      &scc_info_Candle_trading2_2eproto.base,
      &scc_info_Candles_MapCandlesEntry_DoNotUse_trading2_2eproto.base,}};

static void InitDefaultsscc_info_Candles_MapCandlesEntry_DoNotUse_trading2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tradingpb::_Candles_MapCandlesEntry_DoNotUse_default_instance_;
    new (ptr) ::tradingpb::Candles_MapCandlesEntry_DoNotUse();
  }
  ::tradingpb::Candles_MapCandlesEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Candles_MapCandlesEntry_DoNotUse_trading2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Candles_MapCandlesEntry_DoNotUse_trading2_2eproto}, {
      &scc_info_Candle_trading2_2eproto.base,}};

static void InitDefaultsscc_info_CtrlCondition_trading2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tradingpb::_CtrlCondition_default_instance_;
    new (ptr) ::tradingpb::CtrlCondition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tradingpb::CtrlCondition::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CtrlCondition_trading2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CtrlCondition_trading2_2eproto}, {}};

static void InitDefaultsscc_info_CtrlNode_trading2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tradingpb::_CtrlNode_default_instance_;
    new (ptr) ::tradingpb::CtrlNode();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tradingpb::CtrlNode::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CtrlNode_trading2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_CtrlNode_trading2_2eproto}, {
      &scc_info_Asset_trading2_2eproto.base,
      &scc_info_CtrlNode_MapAssetsInfoEntry_DoNotUse_trading2_2eproto.base,}};

static void InitDefaultsscc_info_CtrlNode_MapAssetsInfoEntry_DoNotUse_trading2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tradingpb::_CtrlNode_MapAssetsInfoEntry_DoNotUse_default_instance_;
    new (ptr) ::tradingpb::CtrlNode_MapAssetsInfoEntry_DoNotUse();
  }
  ::tradingpb::CtrlNode_MapAssetsInfoEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CtrlNode_MapAssetsInfoEntry_DoNotUse_trading2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CtrlNode_MapAssetsInfoEntry_DoNotUse_trading2_2eproto}, {
      &scc_info_CtrlNodeAssetInfo_trading2_2eproto.base,}};

static void InitDefaultsscc_info_CtrlNodeAssetInfo_trading2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tradingpb::_CtrlNodeAssetInfo_default_instance_;
    new (ptr) ::tradingpb::CtrlNodeAssetInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tradingpb::CtrlNodeAssetInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CtrlNodeAssetInfo_trading2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CtrlNodeAssetInfo_trading2_2eproto}, {}};

static void InitDefaultsscc_info_FeeParams_trading2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tradingpb::_FeeParams_default_instance_;
    new (ptr) ::tradingpb::FeeParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tradingpb::FeeParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FeeParams_trading2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FeeParams_trading2_2eproto}, {}};

static void InitDefaultsscc_info_Indicator_trading2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tradingpb::_Indicator_default_instance_;
    new (ptr) ::tradingpb::Indicator();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tradingpb::Indicator::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Indicator_trading2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Indicator_trading2_2eproto}, {
      &scc_info_IndicatorData_trading2_2eproto.base,}};

static void InitDefaultsscc_info_IndicatorData_trading2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tradingpb::_IndicatorData_default_instance_;
    new (ptr) ::tradingpb::IndicatorData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tradingpb::IndicatorData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IndicatorData_trading2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IndicatorData_trading2_2eproto}, {}};

static void InitDefaultsscc_info_InitParams_trading2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tradingpb::_InitParams_default_instance_;
    new (ptr) ::tradingpb::InitParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tradingpb::InitParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InitParams_trading2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_InitParams_trading2_2eproto}, {}};

static void InitDefaultsscc_info_PNLAssetData_trading2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tradingpb::_PNLAssetData_default_instance_;
    new (ptr) ::tradingpb::PNLAssetData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tradingpb::PNLAssetData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_PNLAssetData_trading2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_PNLAssetData_trading2_2eproto}, {
      &scc_info_Asset_trading2_2eproto.base,
      &scc_info_PNLDataValue_trading2_2eproto.base,
      &scc_info_CtrlNode_trading2_2eproto.base,
      &scc_info_Indicator_trading2_2eproto.base,}};

static void InitDefaultsscc_info_PNLData_trading2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tradingpb::_PNLData_default_instance_;
    new (ptr) ::tradingpb::PNLData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tradingpb::PNLData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PNLData_trading2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PNLData_trading2_2eproto}, {
      &scc_info_PNLAssetData_trading2_2eproto.base,}};

static void InitDefaultsscc_info_PNLDataValue_trading2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tradingpb::_PNLDataValue_default_instance_;
    new (ptr) ::tradingpb::PNLDataValue();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tradingpb::PNLDataValue::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PNLDataValue_trading2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PNLDataValue_trading2_2eproto}, {}};

static void InitDefaultsscc_info_SellParams_trading2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tradingpb::_SellParams_default_instance_;
    new (ptr) ::tradingpb::SellParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tradingpb::SellParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SellParams_trading2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SellParams_trading2_2eproto}, {}};

static void InitDefaultsscc_info_SimTradingCache_trading2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tradingpb::_SimTradingCache_default_instance_;
    new (ptr) ::tradingpb::SimTradingCache();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tradingpb::SimTradingCache::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SimTradingCache_trading2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SimTradingCache_trading2_2eproto}, {
      &scc_info_SimTradingCacheNode_trading2_2eproto.base,}};

static void InitDefaultsscc_info_SimTradingCacheNode_trading2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tradingpb::_SimTradingCacheNode_default_instance_;
    new (ptr) ::tradingpb::SimTradingCacheNode();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tradingpb::SimTradingCacheNode::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SimTradingCacheNode_trading2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SimTradingCacheNode_trading2_2eproto}, {
      &scc_info_SimTradingParams_trading2_2eproto.base,}};

static void InitDefaultsscc_info_SimTradingParams_trading2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tradingpb::_SimTradingParams_default_instance_;
    new (ptr) ::tradingpb::SimTradingParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tradingpb::SimTradingParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_SimTradingParams_trading2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_SimTradingParams_trading2_2eproto}, {
      &scc_info_Asset_trading2_2eproto.base,
      &scc_info_Strategy_trading2_2eproto.base,
      &scc_info_Wallet_trading2_2eproto.base,
      &scc_info_Candles_trading2_2eproto.base,}};

static void InitDefaultsscc_info_StopLossParams_trading2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tradingpb::_StopLossParams_default_instance_;
    new (ptr) ::tradingpb::StopLossParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tradingpb::StopLossParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StopLossParams_trading2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StopLossParams_trading2_2eproto}, {}};

static void InitDefaultsscc_info_Strategy_trading2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tradingpb::_Strategy_default_instance_;
    new (ptr) ::tradingpb::Strategy();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tradingpb::Strategy::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<9> scc_info_Strategy_trading2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 9, 0, InitDefaultsscc_info_Strategy_trading2_2eproto}, {
      &scc_info_Asset_trading2_2eproto.base,
      &scc_info_CtrlCondition_trading2_2eproto.base,
      &scc_info_BuyParams_trading2_2eproto.base,
      &scc_info_SellParams_trading2_2eproto.base,
      &scc_info_StopLossParams_trading2_2eproto.base,
      &scc_info_TakeProfitParams_trading2_2eproto.base,
      &scc_info_InitParams_trading2_2eproto.base,
      &scc_info_AIPParams_trading2_2eproto.base,
      &scc_info_FeeParams_trading2_2eproto.base,}};

static void InitDefaultsscc_info_TakeProfitParams_trading2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tradingpb::_TakeProfitParams_default_instance_;
    new (ptr) ::tradingpb::TakeProfitParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tradingpb::TakeProfitParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TakeProfitParams_trading2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TakeProfitParams_trading2_2eproto}, {}};

static void InitDefaultsscc_info_TradingNodeInfo_trading2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tradingpb::_TradingNodeInfo_default_instance_;
    new (ptr) ::tradingpb::TradingNodeInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tradingpb::TradingNodeInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TradingNodeInfo_trading2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TradingNodeInfo_trading2_2eproto}, {}};

static void InitDefaultsscc_info_Wallet_trading2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tradingpb::_Wallet_default_instance_;
    new (ptr) ::tradingpb::Wallet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tradingpb::Wallet::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Wallet_trading2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Wallet_trading2_2eproto}, {
      &scc_info_WalletAsset_trading2_2eproto.base,}};

static void InitDefaultsscc_info_WalletAsset_trading2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tradingpb::_WalletAsset_default_instance_;
    new (ptr) ::tradingpb::WalletAsset();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tradingpb::WalletAsset::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WalletAsset_trading2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_WalletAsset_trading2_2eproto}, {
      &scc_info_Asset_trading2_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_trading2_2eproto[28];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_trading2_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_trading2_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_trading2_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tradingpb::BasicRequestData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tradingpb::BasicRequestData, token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tradingpb::Candle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tradingpb::Candle, ts_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::Candle, open_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::Candle, close_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::Candle, high_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::Candle, low_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::Candle, volume_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::Candle, openinterest_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::Candle, trades_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::Candle, vwap_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::Candle, lastsize_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::Candle, turnover_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::Candle, homenotional_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::Candle, foreignnotional_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::Candle, totalmoney_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::Candle, paused_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::Candle, highlimit_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::Candle, lowlimit_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::Candle, avg_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::Candle, preclose_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::Candles_MapCandlesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::Candles_MapCandlesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tradingpb::Candles_MapCandlesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::Candles_MapCandlesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tradingpb::Candles, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tradingpb::Candles, market_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::Candles, symbol_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::Candles, tag_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::Candles, candles_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::Candles, mapcandles_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tradingpb::Asset, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tradingpb::Asset, market_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::Asset, code_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::Asset, tags_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tradingpb::CtrlNodeAssetInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tradingpb::CtrlNodeAssetInfo, volume_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::CtrlNodeAssetInfo, cost_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::CtrlNode_MapAssetsInfoEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::CtrlNode_MapAssetsInfoEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tradingpb::CtrlNode_MapAssetsInfoEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::CtrlNode_MapAssetsInfoEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tradingpb::CtrlNode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tradingpb::CtrlNode, ts_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::CtrlNode, src_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::CtrlNode, dst_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::CtrlNode, volumesrc_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::CtrlNode, volumedst_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::CtrlNode, type_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::CtrlNode, fee_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::CtrlNode, averageholdingprice_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::CtrlNode, sellprice_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::CtrlNode, ctrlconditionid_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::CtrlNode, strategyid_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::CtrlNode, totalmoney_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::CtrlNode, lastmoney_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::CtrlNode, mapassetsinfo_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::CtrlNode, moneyparts_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::CtrlNode, lastmoneyparts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tradingpb::WalletAsset, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tradingpb::WalletAsset, asset_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::WalletAsset, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tradingpb::Wallet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tradingpb::Wallet, assets_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tradingpb::CtrlCondition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tradingpb::CtrlCondition, indicator_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::CtrlCondition, vals_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::CtrlCondition, operators_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::CtrlCondition, combcondition_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::CtrlCondition, minvals_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::CtrlCondition, maxvals_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::CtrlCondition, offvals_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::CtrlCondition, strvals_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::CtrlCondition, name_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::CtrlCondition, group_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::CtrlCondition, int64vals_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::CtrlCondition, ctrlindex_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tradingpb::IndicatorData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tradingpb::IndicatorData, vals_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::IndicatorData, ts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tradingpb::Indicator, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tradingpb::Indicator, fullname_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::Indicator, type_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::Indicator, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tradingpb::BuyParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tradingpb::BuyParams, initmoney_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::BuyParams, permoney_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::BuyParams, volume_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::BuyParams, aipmoney_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::BuyParams, perinitmoney_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::BuyParams, perhandmoney_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::BuyParams, pertotalmoney_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::BuyParams, assetcode_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::BuyParams, timetypebuyasset_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::BuyParams, tsoffbuy_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::BuyParams, typebuyasset_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::BuyParams, moneyparts_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::BuyParams, nexttimes_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::BuyParams, depositmoney_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::BuyParams, limitprice_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::BuyParams, perlimitprice_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tradingpb::SellParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tradingpb::SellParams, volume_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::SellParams, pervolume_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::SellParams, money_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::SellParams, keeptime_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::SellParams, assetcode_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::SellParams, timetypesellasset_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::SellParams, tsoffsell_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::SellParams, typesellasset_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::SellParams, nexttimes_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::SellParams, limitprice_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::SellParams, perlimitprice_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tradingpb::StopLossParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tradingpb::StopLossParams, drawdown_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::StopLossParams, isfinish_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::StopLossParams, pervolume_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tradingpb::TakeProfitParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tradingpb::TakeProfitParams, profit_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::TakeProfitParams, isfinish_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::TakeProfitParams, pervolume_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::TakeProfitParams, giveto_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::TakeProfitParams, isonlyprofit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tradingpb::InitParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tradingpb::InitParams, money_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::InitParams, vomume_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tradingpb::AIPParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tradingpb::AIPParams, money_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::AIPParams, type_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::AIPParams, day_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tradingpb::FeeParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tradingpb::FeeParams, percentage_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::FeeParams, minlimit_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::FeeParams, maxlimit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tradingpb::Strategy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tradingpb::Strategy, name_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::Strategy, asset_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::Strategy, buy_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::Strategy, sell_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::Strategy, stoploss_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::Strategy, takeprofit_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::Strategy, paramsbuy_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::Strategy, paramssell_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::Strategy, paramsstoploss_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::Strategy, paramstakeprofit_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::Strategy, paramsinit_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::Strategy, paramsaip_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::Strategy, title_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::Strategy, indicators_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::Strategy, feebuy_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::Strategy, feesell_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tradingpb::PNLDataValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tradingpb::PNLDataValue, ts_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::PNLDataValue, pervalue_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::PNLDataValue, tags_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::PNLDataValue, cost_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::PNLDataValue, value_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::PNLDataValue, volume_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::PNLDataValue, price_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::PNLDataValue, drawdown_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tradingpb::PNLAssetData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tradingpb::PNLAssetData, asset_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::PNLAssetData, values_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::PNLAssetData, maxdrawdown_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::PNLAssetData, maxdrawdownstartts_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::PNLAssetData, maxdrawdownendts_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::PNLAssetData, maxdrawup_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::PNLAssetData, maxdrawupstartts_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::PNLAssetData, maxdrawupendts_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::PNLAssetData, sharpe_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::PNLAssetData, annualizedreturns_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::PNLAssetData, annualizedvolatility_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::PNLAssetData, totalreturns_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::PNLAssetData, variance_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::PNLAssetData, buytimes_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::PNLAssetData, selltimes_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::PNLAssetData, stoplosstimes_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::PNLAssetData, maxupdayts_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::PNLAssetData, maxperupday_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::PNLAssetData, maxdowndayts_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::PNLAssetData, maxperdownday_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::PNLAssetData, maxupweekts_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::PNLAssetData, maxperupweek_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::PNLAssetData, maxdownweekts_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::PNLAssetData, maxperdownweek_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::PNLAssetData, maxupmonthts_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::PNLAssetData, maxperupmonth_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::PNLAssetData, maxdownmonthts_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::PNLAssetData, maxperdownmonth_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::PNLAssetData, maxupyearts_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::PNLAssetData, maxperupyear_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::PNLAssetData, maxdownyearts_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::PNLAssetData, maxperdownyear_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::PNLAssetData, lstctrl_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::PNLAssetData, indicators_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::PNLAssetData, wintimes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tradingpb::PNLData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tradingpb::PNLData, name_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::PNLData, total_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::PNLData, assets_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::PNLData, title_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::PNLData, lastts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tradingpb::SimTradingParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tradingpb::SimTradingParams, assets_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::SimTradingParams, baselines_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::SimTradingParams, startts_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::SimTradingParams, endts_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::SimTradingParams, strategies_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::SimTradingParams, wallet_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::SimTradingParams, title_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::SimTradingParams, mainassetindex_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::SimTradingParams, indicators_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::SimTradingParams, offset_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::SimTradingParams, candles_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tradingpb::TradingNodeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tradingpb::TradingNodeInfo, maxtasks_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::TradingNodeInfo, curtasks_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tradingpb::SimTradingCacheNode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tradingpb::SimTradingCacheNode, params_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::SimTradingCacheNode, key_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::SimTradingCacheNode, lastts_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::SimTradingCacheNode, hash_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::SimTradingCacheNode, buf_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tradingpb::SimTradingCache, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tradingpb::SimTradingCache, nodes_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::tradingpb::BasicRequestData)},
  { 6, -1, sizeof(::tradingpb::Candle)},
  { 30, 37, sizeof(::tradingpb::Candles_MapCandlesEntry_DoNotUse)},
  { 39, -1, sizeof(::tradingpb::Candles)},
  { 49, -1, sizeof(::tradingpb::Asset)},
  { 57, -1, sizeof(::tradingpb::CtrlNodeAssetInfo)},
  { 64, 71, sizeof(::tradingpb::CtrlNode_MapAssetsInfoEntry_DoNotUse)},
  { 73, -1, sizeof(::tradingpb::CtrlNode)},
  { 94, -1, sizeof(::tradingpb::WalletAsset)},
  { 101, -1, sizeof(::tradingpb::Wallet)},
  { 107, -1, sizeof(::tradingpb::CtrlCondition)},
  { 124, -1, sizeof(::tradingpb::IndicatorData)},
  { 131, -1, sizeof(::tradingpb::Indicator)},
  { 139, -1, sizeof(::tradingpb::BuyParams)},
  { 160, -1, sizeof(::tradingpb::SellParams)},
  { 176, -1, sizeof(::tradingpb::StopLossParams)},
  { 184, -1, sizeof(::tradingpb::TakeProfitParams)},
  { 194, -1, sizeof(::tradingpb::InitParams)},
  { 201, -1, sizeof(::tradingpb::AIPParams)},
  { 209, -1, sizeof(::tradingpb::FeeParams)},
  { 217, -1, sizeof(::tradingpb::Strategy)},
  { 238, -1, sizeof(::tradingpb::PNLDataValue)},
  { 251, -1, sizeof(::tradingpb::PNLAssetData)},
  { 291, -1, sizeof(::tradingpb::PNLData)},
  { 301, -1, sizeof(::tradingpb::SimTradingParams)},
  { 317, -1, sizeof(::tradingpb::TradingNodeInfo)},
  { 324, -1, sizeof(::tradingpb::SimTradingCacheNode)},
  { 334, -1, sizeof(::tradingpb::SimTradingCache)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tradingpb::_BasicRequestData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tradingpb::_Candle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tradingpb::_Candles_MapCandlesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tradingpb::_Candles_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tradingpb::_Asset_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tradingpb::_CtrlNodeAssetInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tradingpb::_CtrlNode_MapAssetsInfoEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tradingpb::_CtrlNode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tradingpb::_WalletAsset_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tradingpb::_Wallet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tradingpb::_CtrlCondition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tradingpb::_IndicatorData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tradingpb::_Indicator_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tradingpb::_BuyParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tradingpb::_SellParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tradingpb::_StopLossParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tradingpb::_TakeProfitParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tradingpb::_InitParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tradingpb::_AIPParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tradingpb::_FeeParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tradingpb::_Strategy_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tradingpb::_PNLDataValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tradingpb::_PNLAssetData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tradingpb::_PNLData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tradingpb::_SimTradingParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tradingpb::_TradingNodeInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tradingpb::_SimTradingCacheNode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tradingpb::_SimTradingCache_default_instance_),
};

const char descriptor_table_protodef_trading2_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016trading2.proto\022\ttradingpb\"!\n\020BasicRequ"
  "estData\022\r\n\005token\030\001 \001(\t\"\313\002\n\006Candle\022\n\n\002ts\030"
  "\001 \001(\003\022\014\n\004open\030\002 \001(\003\022\r\n\005close\030\003 \001(\003\022\014\n\004hi"
  "gh\030\004 \001(\003\022\013\n\003low\030\005 \001(\003\022\016\n\006volume\030\006 \001(\003\022\024\n"
  "\014openInterest\030\007 \001(\003\022\016\n\006trades\030\010 \001(\003\022\014\n\004v"
  "wap\030\t \001(\001\022\020\n\010lastSize\030\n \001(\003\022\020\n\010turnover\030"
  "\013 \001(\003\022\024\n\014homeNotional\030\014 \001(\001\022\027\n\017foreignNo"
  "tional\030\r \001(\001\022\022\n\ntotalMoney\030\016 \001(\003\022\016\n\006paus"
  "ed\030\017 \001(\010\022\021\n\thighLimit\030\020 \001(\003\022\020\n\010lowLimit\030"
  "\021 \001(\003\022\013\n\003avg\030\022 \001(\003\022\020\n\010preClose\030\023 \001(\003\"\330\001\n"
  "\007Candles\022\016\n\006market\030\001 \001(\t\022\016\n\006symbol\030\002 \001(\t"
  "\022\013\n\003tag\030\003 \001(\t\022\"\n\007candles\030\004 \003(\0132\021.trading"
  "pb.Candle\0226\n\nmapCandles\030\005 \003(\0132\".tradingp"
  "b.Candles.MapCandlesEntry\032D\n\017MapCandlesE"
  "ntry\022\013\n\003key\030\001 \001(\003\022 \n\005value\030\002 \001(\0132\021.tradi"
  "ngpb.Candle:\0028\001\"3\n\005Asset\022\016\n\006market\030\001 \001(\t"
  "\022\014\n\004code\030\002 \001(\t\022\014\n\004tags\030\003 \003(\t\"1\n\021CtrlNode"
  "AssetInfo\022\016\n\006volume\030\001 \001(\001\022\014\n\004cost\030\002 \001(\001\""
  "\355\003\n\010CtrlNode\022\n\n\002ts\030\001 \001(\003\022\035\n\003src\030\002 \001(\0132\020."
  "tradingpb.Asset\022\035\n\003dst\030\003 \001(\0132\020.tradingpb"
  ".Asset\022\021\n\tvolumeSrc\030\004 \001(\001\022\021\n\tvolumeDst\030\005"
  " \001(\001\022!\n\004type\030\006 \001(\0162\023.tradingpb.CtrlType\022"
  "\013\n\003fee\030\007 \001(\001\022\033\n\023averageHoldingPrice\030\010 \001("
  "\001\022\021\n\tsellPrice\030\t \001(\001\022\027\n\017ctrlConditionID\030"
  "\n \001(\005\022\022\n\nstrategyID\030\013 \001(\005\022\022\n\ntotalMoney\030"
  "\014 \001(\001\022\021\n\tlastMoney\030\r \001(\001\022=\n\rmapAssetsInf"
  "o\030\016 \003(\0132&.tradingpb.CtrlNode.MapAssetsIn"
  "foEntry\022\022\n\nmoneyParts\030\017 \001(\005\022\026\n\016lastMoney"
  "Parts\030\020 \001(\005\032R\n\022MapAssetsInfoEntry\022\013\n\003key"
  "\030\001 \001(\t\022+\n\005value\030\002 \001(\0132\034.tradingpb.CtrlNo"
  "deAssetInfo:\0028\001\"=\n\013WalletAsset\022\037\n\005asset\030"
  "\001 \001(\0132\020.tradingpb.Asset\022\r\n\005value\030\002 \001(\001\"0"
  "\n\006Wallet\022&\n\006assets\030\001 \003(\0132\026.tradingpb.Wal"
  "letAsset\"\361\001\n\rCtrlCondition\022\025\n\tindicator\030"
  "\001 \001(\tB\002\030\001\022\014\n\004vals\030\002 \003(\002\022\021\n\toperators\030\003 \003"
  "(\t\022\025\n\rcombCondition\030\004 \001(\t\022\023\n\007minvals\030\005 \003"
  "(\002B\002\030\001\022\023\n\007maxvals\030\006 \003(\002B\002\030\001\022\023\n\007offvals\030\007"
  " \003(\002B\002\030\001\022\017\n\007strVals\030\010 \003(\t\022\014\n\004name\030\t \001(\t\022"
  "\r\n\005group\030\n \001(\005\022\021\n\tint64Vals\030\013 \003(\002\022\021\n\tctr"
  "lIndex\030\014 \001(\005\")\n\rIndicatorData\022\014\n\004vals\030\001 "
  "\003(\002\022\n\n\002ts\030\002 \001(\003\"m\n\tIndicator\022\020\n\010fullname"
  "\030\001 \001(\t\022&\n\004type\030\002 \001(\0162\030.tradingpb.Indicat"
  "orType\022&\n\004data\030\003 \003(\0132\030.tradingpb.Indicat"
  "orData\"\336\002\n\tBuyParams\022\025\n\tinitMoney\030\001 \001(\002B"
  "\002\030\001\022\024\n\010perMoney\030\002 \001(\002B\002\030\001\022\016\n\006volume\030\003 \001("
  "\002\022\020\n\010aipMoney\030\004 \001(\002\022\024\n\014perInitMoney\030\005 \001("
  "\002\022\024\n\014perHandMoney\030\006 \001(\002\022\031\n\rperTotalMoney"
  "\030\007 \001(\002B\002\030\001\022\021\n\tassetCode\030\010 \001(\t\022\030\n\020timeTyp"
  "eBuyAsset\030\t \001(\t\022\020\n\010tsOffBuy\030\n \001(\003\022\024\n\014typ"
  "eBuyAsset\030\013 \001(\t\022\022\n\nmoneyParts\030\014 \001(\005\022\021\n\tn"
  "extTimes\030\r \001(\005\022\024\n\014depositMoney\030\016 \001(\005\022\022\n\n"
  "limitPrice\030\017 \001(\002\022\025\n\rperLimitPrice\030\020 \001(\002\""
  "\346\001\n\nSellParams\022\016\n\006volume\030\001 \001(\002\022\021\n\tperVol"
  "ume\030\002 \001(\002\022\r\n\005money\030\003 \001(\002\022\020\n\010keepTime\030\004 \001"
  "(\003\022\021\n\tassetCode\030\005 \001(\t\022\031\n\021timeTypeSellAss"
  "et\030\006 \001(\t\022\021\n\ttsOffSell\030\007 \001(\003\022\025\n\rtypeSellA"
  "sset\030\010 \001(\t\022\021\n\tnextTimes\030\t \001(\005\022\022\n\nlimitPr"
  "ice\030\n \001(\002\022\025\n\rperLimitPrice\030\013 \001(\002\"K\n\016Stop"
  "LossParams\022\024\n\010drawdown\030\001 \001(\002B\002\030\001\022\020\n\010isFi"
  "nish\030\002 \001(\010\022\021\n\tperVolume\030\003 \001(\002\"q\n\020TakePro"
  "fitParams\022\022\n\006profit\030\001 \001(\002B\002\030\001\022\020\n\010isFinis"
  "h\030\002 \001(\010\022\021\n\tperVolume\030\003 \001(\002\022\016\n\006giveTo\030\004 \001"
  "(\t\022\024\n\014isOnlyProfit\030\005 \001(\010\"+\n\nInitParams\022\r"
  "\n\005money\030\001 \001(\002\022\016\n\006vomume\030\002 \001(\002\"M\n\tAIPPara"
  "ms\022\r\n\005money\030\001 \001(\002\022$\n\004type\030\002 \001(\0162\026.tradin"
  "gpb.AIPTimeType\022\013\n\003day\030\003 \001(\005\"C\n\tFeeParam"
  "s\022\022\n\npercentage\030\001 \001(\002\022\020\n\010minLimit\030\002 \001(\002\022"
  "\020\n\010maxLimit\030\003 \001(\002\"\350\004\n\010Strategy\022\014\n\004name\030\001"
  " \001(\t\022\037\n\005asset\030\002 \001(\0132\020.tradingpb.Asset\022%\n"
  "\003buy\030\003 \003(\0132\030.tradingpb.CtrlCondition\022&\n\004"
  "sell\030\004 \003(\0132\030.tradingpb.CtrlCondition\022*\n\010"
  "stoploss\030\005 \003(\0132\030.tradingpb.CtrlCondition"
  "\022,\n\ntakeprofit\030\006 \003(\0132\030.tradingpb.CtrlCon"
  "dition\022\'\n\tparamsBuy\030\007 \001(\0132\024.tradingpb.Bu"
  "yParams\022)\n\nparamsSell\030\010 \001(\0132\025.tradingpb."
  "SellParams\0221\n\016paramsStopLoss\030\t \001(\0132\031.tra"
  "dingpb.StopLossParams\0225\n\020paramsTakeProfi"
  "t\030\n \001(\0132\033.tradingpb.TakeProfitParams\022)\n\n"
  "paramsInit\030\013 \001(\0132\025.tradingpb.InitParams\022"
  "\'\n\tparamsAIP\030\014 \001(\0132\024.tradingpb.AIPParams"
  "\022\021\n\005title\030\r \001(\tB\002\030\001\022\022\n\nindicators\030\016 \003(\t\022"
  "$\n\006feeBuy\030\017 \001(\0132\024.tradingpb.FeeParams\022%\n"
  "\007feeSell\030\020 \001(\0132\024.tradingpb.FeeParams\"\210\001\n"
  "\014PNLDataValue\022\n\n\002ts\030\001 \001(\003\022\020\n\010perValue\030\002 "
  "\001(\002\022\014\n\004tags\030\003 \003(\t\022\014\n\004cost\030\004 \001(\002\022\r\n\005value"
  "\030\005 \001(\002\022\016\n\006volume\030\006 \001(\002\022\r\n\005price\030\007 \001(\002\022\020\n"
  "\010drawdown\030\010 \001(\002\"\337\006\n\014PNLAssetData\022\037\n\005asse"
  "t\030\001 \001(\0132\020.tradingpb.Asset\022\'\n\006values\030\002 \003("
  "\0132\027.tradingpb.PNLDataValue\022\023\n\013maxDrawdow"
  "n\030\003 \001(\002\022\032\n\022maxDrawdownStartTs\030\004 \001(\003\022\030\n\020m"
  "axDrawdownEndTs\030\005 \001(\003\022\021\n\tmaxDrawup\030\006 \001(\002"
  "\022\030\n\020maxDrawupStartTs\030\007 \001(\003\022\026\n\016maxDrawupE"
  "ndTs\030\010 \001(\003\022\016\n\006sharpe\030\t \001(\002\022\031\n\021annualized"
  "Returns\030\n \001(\002\022\034\n\024annualizedVolatility\030\013 "
  "\001(\002\022\024\n\014totalReturns\030\014 \001(\002\022\020\n\010variance\030\r "
  "\001(\002\022\020\n\010buyTimes\030\016 \001(\005\022\021\n\tsellTimes\030\017 \001(\005"
  "\022\025\n\rstoplossTimes\030\020 \001(\005\022\022\n\nmaxUpDayTs\030\021 "
  "\001(\003\022\023\n\013maxPerUpDay\030\022 \001(\002\022\024\n\014maxDownDayTs"
  "\030\023 \001(\003\022\025\n\rmaxPerDownDay\030\024 \001(\002\022\023\n\013maxUpWe"
  "ekTs\030\025 \001(\003\022\024\n\014maxPerUpWeek\030\026 \001(\002\022\025\n\rmaxD"
  "ownWeekTs\030\027 \001(\003\022\026\n\016maxPerDownWeek\030\030 \001(\002\022"
  "\024\n\014maxUpMonthTs\030\031 \001(\003\022\025\n\rmaxPerUpMonth\030\032"
  " \001(\002\022\026\n\016maxDownMonthTs\030\033 \001(\003\022\027\n\017maxPerDo"
  "wnMonth\030\034 \001(\002\022\023\n\013maxUpYearTs\030\035 \001(\003\022\024\n\014ma"
  "xPerUpYear\030\036 \001(\002\022\025\n\rmaxDownYearTs\030\037 \001(\003\022"
  "\026\n\016maxPerDownYear\030  \001(\002\022$\n\007lstCtrl\030! \003(\013"
  "2\023.tradingpb.CtrlNode\022(\n\nindicators\030\" \003("
  "\0132\024.tradingpb.Indicator\022\020\n\010winTimes\030# \001("
  "\005\"\223\001\n\007PNLData\022\020\n\004name\030\001 \001(\tB\002\030\001\022&\n\005total"
  "\030\002 \001(\0132\027.tradingpb.PNLAssetData\022+\n\006asset"
  "s\030\003 \003(\0132\027.tradingpb.PNLAssetDataB\002\030\001\022\r\n\005"
  "title\030\004 \001(\t\022\022\n\006lastts\030\005 \001(\003B\002\030\001\"\271\002\n\020SimT"
  "radingParams\022 \n\006assets\030\001 \003(\0132\020.tradingpb"
  ".Asset\022\'\n\tbaselines\030\002 \003(\0132\020.tradingpb.As"
  "setB\002\030\001\022\017\n\007startTs\030\003 \001(\003\022\r\n\005endTs\030\004 \001(\003\022"
  "\'\n\nstrategies\030\005 \003(\0132\023.tradingpb.Strategy"
  "\022!\n\006wallet\030\006 \001(\0132\021.tradingpb.Wallet\022\r\n\005t"
  "itle\030\007 \001(\t\022\026\n\016mainAssetIndex\030\010 \001(\005\022\022\n\nin"
  "dicators\030\t \003(\t\022\016\n\006offset\030\n \001(\005\022#\n\007candle"
  "s\030\013 \003(\0132\022.tradingpb.Candles\"5\n\017TradingNo"
  "deInfo\022\020\n\010maxTasks\030\001 \001(\005\022\020\n\010curTasks\030\002 \001"
  "(\005\"~\n\023SimTradingCacheNode\022+\n\006params\030\001 \001("
  "\0132\033.tradingpb.SimTradingParams\022\013\n\003key\030\002 "
  "\001(\t\022\016\n\006lastTs\030\003 \001(\003\022\020\n\004hash\030\004 \001(\tB\002\030\001\022\013\n"
  "\003buf\030\005 \001(\014\"@\n\017SimTradingCache\022-\n\005nodes\030\001"
  " \003(\0132\036.tradingpb.SimTradingCacheNode*\203\001\n"
  "\010CtrlType\022\r\n\tCTRL_INIT\020\000\022\014\n\010CTRL_BUY\020\001\022\r"
  "\n\tCTRL_SELL\020\002\022\021\n\rCTRL_STOPLOSS\020\003\022\023\n\017CTRL"
  "_TAKEPROFIT\020\004\022\021\n\rCTRL_WITHDRAW\020\005\022\020\n\014CTRL"
  "_DEPOSIT\020\006*7\n\rIndicatorType\022\022\n\016IT_SINGLE"
  "VALUE\020\000\022\022\n\016IT_SINGLEPRICE\020\001*4\n\013AIPTimeTy"
  "pe\022\021\n\rAIPTT_WEEKDAY\020\000\022\022\n\016AIPTT_MONTHDAY\020"
  "\001B(Z&github.com/zhs007/tradingdb2/tradin"
  "gpbb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_trading2_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_trading2_2eproto_sccs[28] = {
  &scc_info_AIPParams_trading2_2eproto.base,
  &scc_info_Asset_trading2_2eproto.base,
  &scc_info_BasicRequestData_trading2_2eproto.base,
  &scc_info_BuyParams_trading2_2eproto.base,
  &scc_info_Candle_trading2_2eproto.base,
  &scc_info_Candles_trading2_2eproto.base,
  &scc_info_Candles_MapCandlesEntry_DoNotUse_trading2_2eproto.base,
  &scc_info_CtrlCondition_trading2_2eproto.base,
  &scc_info_CtrlNode_trading2_2eproto.base,
  &scc_info_CtrlNode_MapAssetsInfoEntry_DoNotUse_trading2_2eproto.base,
  &scc_info_CtrlNodeAssetInfo_trading2_2eproto.base,
  &scc_info_FeeParams_trading2_2eproto.base,
  &scc_info_Indicator_trading2_2eproto.base,
  &scc_info_IndicatorData_trading2_2eproto.base,
  &scc_info_InitParams_trading2_2eproto.base,
  &scc_info_PNLAssetData_trading2_2eproto.base,
  &scc_info_PNLData_trading2_2eproto.base,
  &scc_info_PNLDataValue_trading2_2eproto.base,
  &scc_info_SellParams_trading2_2eproto.base,
  &scc_info_SimTradingCache_trading2_2eproto.base,
  &scc_info_SimTradingCacheNode_trading2_2eproto.base,
  &scc_info_SimTradingParams_trading2_2eproto.base,
  &scc_info_StopLossParams_trading2_2eproto.base,
  &scc_info_Strategy_trading2_2eproto.base,
  &scc_info_TakeProfitParams_trading2_2eproto.base,
  &scc_info_TradingNodeInfo_trading2_2eproto.base,
  &scc_info_Wallet_trading2_2eproto.base,
  &scc_info_WalletAsset_trading2_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_trading2_2eproto_once;
static bool descriptor_table_trading2_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_trading2_2eproto = {
  &descriptor_table_trading2_2eproto_initialized, descriptor_table_protodef_trading2_2eproto, "trading2.proto", 5331,
  &descriptor_table_trading2_2eproto_once, descriptor_table_trading2_2eproto_sccs, descriptor_table_trading2_2eproto_deps, 28, 0,
  schemas, file_default_instances, TableStruct_trading2_2eproto::offsets,
  file_level_metadata_trading2_2eproto, 28, file_level_enum_descriptors_trading2_2eproto, file_level_service_descriptors_trading2_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_trading2_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_trading2_2eproto), true);
namespace tradingpb {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CtrlType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_trading2_2eproto);
  return file_level_enum_descriptors_trading2_2eproto[0];
}
bool CtrlType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IndicatorType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_trading2_2eproto);
  return file_level_enum_descriptors_trading2_2eproto[1];
}
bool IndicatorType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AIPTimeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_trading2_2eproto);
  return file_level_enum_descriptors_trading2_2eproto[2];
}
bool AIPTimeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void BasicRequestData::InitAsDefaultInstance() {
}
class BasicRequestData::_Internal {
 public:
};

BasicRequestData::BasicRequestData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tradingpb.BasicRequestData)
}
BasicRequestData::BasicRequestData(const BasicRequestData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  // @@protoc_insertion_point(copy_constructor:tradingpb.BasicRequestData)
}

void BasicRequestData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BasicRequestData_trading2_2eproto.base);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

BasicRequestData::~BasicRequestData() {
  // @@protoc_insertion_point(destructor:tradingpb.BasicRequestData)
  SharedDtor();
}

void BasicRequestData::SharedDtor() {
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BasicRequestData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BasicRequestData& BasicRequestData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BasicRequestData_trading2_2eproto.base);
  return *internal_default_instance();
}


void BasicRequestData::Clear() {
// @@protoc_insertion_point(message_clear_start:tradingpb.BasicRequestData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* BasicRequestData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tradingpb.BasicRequestData.token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BasicRequestData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tradingpb.BasicRequestData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tradingpb.BasicRequestData.token");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tradingpb.BasicRequestData)
  return target;
}

size_t BasicRequestData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tradingpb.BasicRequestData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BasicRequestData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tradingpb.BasicRequestData)
  GOOGLE_DCHECK_NE(&from, this);
  const BasicRequestData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BasicRequestData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tradingpb.BasicRequestData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tradingpb.BasicRequestData)
    MergeFrom(*source);
  }
}

void BasicRequestData::MergeFrom(const BasicRequestData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tradingpb.BasicRequestData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
}

void BasicRequestData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tradingpb.BasicRequestData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BasicRequestData::CopyFrom(const BasicRequestData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tradingpb.BasicRequestData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BasicRequestData::IsInitialized() const {
  return true;
}

void BasicRequestData::InternalSwap(BasicRequestData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata BasicRequestData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Candle::InitAsDefaultInstance() {
}
class Candle::_Internal {
 public:
};

Candle::Candle()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tradingpb.Candle)
}
Candle::Candle(const Candle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ts_, &from.ts_,
    static_cast<size_t>(reinterpret_cast<char*>(&paused_) -
    reinterpret_cast<char*>(&ts_)) + sizeof(paused_));
  // @@protoc_insertion_point(copy_constructor:tradingpb.Candle)
}

void Candle::SharedCtor() {
  ::memset(&ts_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&paused_) -
      reinterpret_cast<char*>(&ts_)) + sizeof(paused_));
}

Candle::~Candle() {
  // @@protoc_insertion_point(destructor:tradingpb.Candle)
  SharedDtor();
}

void Candle::SharedDtor() {
}

void Candle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Candle& Candle::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Candle_trading2_2eproto.base);
  return *internal_default_instance();
}


void Candle::Clear() {
// @@protoc_insertion_point(message_clear_start:tradingpb.Candle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&ts_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&paused_) -
      reinterpret_cast<char*>(&ts_)) + sizeof(paused_));
  _internal_metadata_.Clear();
}

const char* Candle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 ts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 open = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          open_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 close = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          close_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 high = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          high_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 low = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          low_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 volume = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 openInterest = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          openinterest_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 trades = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          trades_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double vwap = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          vwap_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int64 lastSize = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          lastsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 turnover = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          turnover_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double homeNotional = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          homenotional_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double foreignNotional = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          foreignnotional_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int64 totalMoney = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          totalmoney_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool paused = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          paused_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 highLimit = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          highlimit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 lowLimit = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          lowlimit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 avg = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          avg_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 preClose = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          preclose_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Candle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tradingpb.Candle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 ts = 1;
  if (this->ts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_ts(), target);
  }

  // int64 open = 2;
  if (this->open() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_open(), target);
  }

  // int64 close = 3;
  if (this->close() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_close(), target);
  }

  // int64 high = 4;
  if (this->high() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_high(), target);
  }

  // int64 low = 5;
  if (this->low() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_low(), target);
  }

  // int64 volume = 6;
  if (this->volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_volume(), target);
  }

  // int64 openInterest = 7;
  if (this->openinterest() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_openinterest(), target);
  }

  // int64 trades = 8;
  if (this->trades() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_trades(), target);
  }

  // double vwap = 9;
  if (!(this->vwap() <= 0 && this->vwap() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_vwap(), target);
  }

  // int64 lastSize = 10;
  if (this->lastsize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(10, this->_internal_lastsize(), target);
  }

  // int64 turnover = 11;
  if (this->turnover() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(11, this->_internal_turnover(), target);
  }

  // double homeNotional = 12;
  if (!(this->homenotional() <= 0 && this->homenotional() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_homenotional(), target);
  }

  // double foreignNotional = 13;
  if (!(this->foreignnotional() <= 0 && this->foreignnotional() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->_internal_foreignnotional(), target);
  }

  // int64 totalMoney = 14;
  if (this->totalmoney() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(14, this->_internal_totalmoney(), target);
  }

  // bool paused = 15;
  if (this->paused() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_paused(), target);
  }

  // int64 highLimit = 16;
  if (this->highlimit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(16, this->_internal_highlimit(), target);
  }

  // int64 lowLimit = 17;
  if (this->lowlimit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(17, this->_internal_lowlimit(), target);
  }

  // int64 avg = 18;
  if (this->avg() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(18, this->_internal_avg(), target);
  }

  // int64 preClose = 19;
  if (this->preclose() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(19, this->_internal_preclose(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tradingpb.Candle)
  return target;
}

size_t Candle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tradingpb.Candle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 ts = 1;
  if (this->ts() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ts());
  }

  // int64 open = 2;
  if (this->open() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_open());
  }

  // int64 close = 3;
  if (this->close() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_close());
  }

  // int64 high = 4;
  if (this->high() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_high());
  }

  // int64 low = 5;
  if (this->low() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_low());
  }

  // int64 volume = 6;
  if (this->volume() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_volume());
  }

  // int64 openInterest = 7;
  if (this->openinterest() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_openinterest());
  }

  // int64 trades = 8;
  if (this->trades() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_trades());
  }

  // double vwap = 9;
  if (!(this->vwap() <= 0 && this->vwap() >= 0)) {
    total_size += 1 + 8;
  }

  // int64 lastSize = 10;
  if (this->lastsize() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_lastsize());
  }

  // int64 turnover = 11;
  if (this->turnover() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_turnover());
  }

  // double homeNotional = 12;
  if (!(this->homenotional() <= 0 && this->homenotional() >= 0)) {
    total_size += 1 + 8;
  }

  // double foreignNotional = 13;
  if (!(this->foreignnotional() <= 0 && this->foreignnotional() >= 0)) {
    total_size += 1 + 8;
  }

  // int64 totalMoney = 14;
  if (this->totalmoney() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_totalmoney());
  }

  // int64 highLimit = 16;
  if (this->highlimit() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_highlimit());
  }

  // int64 lowLimit = 17;
  if (this->lowlimit() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_lowlimit());
  }

  // int64 avg = 18;
  if (this->avg() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_avg());
  }

  // int64 preClose = 19;
  if (this->preclose() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_preclose());
  }

  // bool paused = 15;
  if (this->paused() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Candle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tradingpb.Candle)
  GOOGLE_DCHECK_NE(&from, this);
  const Candle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Candle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tradingpb.Candle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tradingpb.Candle)
    MergeFrom(*source);
  }
}

void Candle::MergeFrom(const Candle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tradingpb.Candle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ts() != 0) {
    _internal_set_ts(from._internal_ts());
  }
  if (from.open() != 0) {
    _internal_set_open(from._internal_open());
  }
  if (from.close() != 0) {
    _internal_set_close(from._internal_close());
  }
  if (from.high() != 0) {
    _internal_set_high(from._internal_high());
  }
  if (from.low() != 0) {
    _internal_set_low(from._internal_low());
  }
  if (from.volume() != 0) {
    _internal_set_volume(from._internal_volume());
  }
  if (from.openinterest() != 0) {
    _internal_set_openinterest(from._internal_openinterest());
  }
  if (from.trades() != 0) {
    _internal_set_trades(from._internal_trades());
  }
  if (!(from.vwap() <= 0 && from.vwap() >= 0)) {
    _internal_set_vwap(from._internal_vwap());
  }
  if (from.lastsize() != 0) {
    _internal_set_lastsize(from._internal_lastsize());
  }
  if (from.turnover() != 0) {
    _internal_set_turnover(from._internal_turnover());
  }
  if (!(from.homenotional() <= 0 && from.homenotional() >= 0)) {
    _internal_set_homenotional(from._internal_homenotional());
  }
  if (!(from.foreignnotional() <= 0 && from.foreignnotional() >= 0)) {
    _internal_set_foreignnotional(from._internal_foreignnotional());
  }
  if (from.totalmoney() != 0) {
    _internal_set_totalmoney(from._internal_totalmoney());
  }
  if (from.highlimit() != 0) {
    _internal_set_highlimit(from._internal_highlimit());
  }
  if (from.lowlimit() != 0) {
    _internal_set_lowlimit(from._internal_lowlimit());
  }
  if (from.avg() != 0) {
    _internal_set_avg(from._internal_avg());
  }
  if (from.preclose() != 0) {
    _internal_set_preclose(from._internal_preclose());
  }
  if (from.paused() != 0) {
    _internal_set_paused(from._internal_paused());
  }
}

void Candle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tradingpb.Candle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Candle::CopyFrom(const Candle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tradingpb.Candle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Candle::IsInitialized() const {
  return true;
}

void Candle::InternalSwap(Candle* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(ts_, other->ts_);
  swap(open_, other->open_);
  swap(close_, other->close_);
  swap(high_, other->high_);
  swap(low_, other->low_);
  swap(volume_, other->volume_);
  swap(openinterest_, other->openinterest_);
  swap(trades_, other->trades_);
  swap(vwap_, other->vwap_);
  swap(lastsize_, other->lastsize_);
  swap(turnover_, other->turnover_);
  swap(homenotional_, other->homenotional_);
  swap(foreignnotional_, other->foreignnotional_);
  swap(totalmoney_, other->totalmoney_);
  swap(highlimit_, other->highlimit_);
  swap(lowlimit_, other->lowlimit_);
  swap(avg_, other->avg_);
  swap(preclose_, other->preclose_);
  swap(paused_, other->paused_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Candle::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

Candles_MapCandlesEntry_DoNotUse::Candles_MapCandlesEntry_DoNotUse() {}
Candles_MapCandlesEntry_DoNotUse::Candles_MapCandlesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Candles_MapCandlesEntry_DoNotUse::MergeFrom(const Candles_MapCandlesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Candles_MapCandlesEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Candles_MapCandlesEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void Candles::InitAsDefaultInstance() {
}
class Candles::_Internal {
 public:
};

Candles::Candles()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tradingpb.Candles)
}
Candles::Candles(const Candles& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      candles_(from.candles_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  mapcandles_.MergeFrom(from.mapcandles_);
  market_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_market().empty()) {
    market_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.market_);
  }
  symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_symbol().empty()) {
    symbol_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tag().empty()) {
    tag_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tag_);
  }
  // @@protoc_insertion_point(copy_constructor:tradingpb.Candles)
}

void Candles::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Candles_trading2_2eproto.base);
  market_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Candles::~Candles() {
  // @@protoc_insertion_point(destructor:tradingpb.Candles)
  SharedDtor();
}

void Candles::SharedDtor() {
  market_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  symbol_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Candles::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Candles& Candles::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Candles_trading2_2eproto.base);
  return *internal_default_instance();
}


void Candles::Clear() {
// @@protoc_insertion_point(message_clear_start:tradingpb.Candles)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  candles_.Clear();
  mapcandles_.Clear();
  market_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  symbol_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tag_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* Candles::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string market = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_market();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tradingpb.Candles.market"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string symbol = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_symbol();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tradingpb.Candles.symbol"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string tag = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_tag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tradingpb.Candles.tag"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .tradingpb.Candle candles = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_candles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // map<int64, .tradingpb.Candle> mapCandles = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&mapcandles_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Candles::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tradingpb.Candles)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string market = 1;
  if (this->market().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_market().data(), static_cast<int>(this->_internal_market().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tradingpb.Candles.market");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_market(), target);
  }

  // string symbol = 2;
  if (this->symbol().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_symbol().data(), static_cast<int>(this->_internal_symbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tradingpb.Candles.symbol");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_symbol(), target);
  }

  // string tag = 3;
  if (this->tag().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tag().data(), static_cast<int>(this->_internal_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tradingpb.Candles.tag");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_tag(), target);
  }

  // repeated .tradingpb.Candle candles = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_candles_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_candles(i), target, stream);
  }

  // map<int64, .tradingpb.Candle> mapCandles = 5;
  if (!this->_internal_mapcandles().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::tradingpb::Candle >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int64, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_mapcandles().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_mapcandles().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::tradingpb::Candle >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::tradingpb::Candle >::const_iterator
          it = this->_internal_mapcandles().begin();
          it != this->_internal_mapcandles().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Candles_MapCandlesEntry_DoNotUse::Funcs::InternalSerialize(5, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::tradingpb::Candle >::const_iterator
          it = this->_internal_mapcandles().begin();
          it != this->_internal_mapcandles().end(); ++it) {
        target = Candles_MapCandlesEntry_DoNotUse::Funcs::InternalSerialize(5, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tradingpb.Candles)
  return target;
}

size_t Candles::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tradingpb.Candles)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tradingpb.Candle candles = 4;
  total_size += 1UL * this->_internal_candles_size();
  for (const auto& msg : this->candles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<int64, .tradingpb.Candle> mapCandles = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_mapcandles_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::tradingpb::Candle >::const_iterator
      it = this->_internal_mapcandles().begin();
      it != this->_internal_mapcandles().end(); ++it) {
    total_size += Candles_MapCandlesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string market = 1;
  if (this->market().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_market());
  }

  // string symbol = 2;
  if (this->symbol().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_symbol());
  }

  // string tag = 3;
  if (this->tag().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tag());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Candles::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tradingpb.Candles)
  GOOGLE_DCHECK_NE(&from, this);
  const Candles* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Candles>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tradingpb.Candles)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tradingpb.Candles)
    MergeFrom(*source);
  }
}

void Candles::MergeFrom(const Candles& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tradingpb.Candles)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  candles_.MergeFrom(from.candles_);
  mapcandles_.MergeFrom(from.mapcandles_);
  if (from.market().size() > 0) {

    market_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.market_);
  }
  if (from.symbol().size() > 0) {

    symbol_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
  if (from.tag().size() > 0) {

    tag_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tag_);
  }
}

void Candles::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tradingpb.Candles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Candles::CopyFrom(const Candles& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tradingpb.Candles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Candles::IsInitialized() const {
  return true;
}

void Candles::InternalSwap(Candles* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  candles_.InternalSwap(&other->candles_);
  mapcandles_.Swap(&other->mapcandles_);
  market_.Swap(&other->market_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  symbol_.Swap(&other->symbol_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  tag_.Swap(&other->tag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata Candles::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Asset::InitAsDefaultInstance() {
}
class Asset::_Internal {
 public:
};

Asset::Asset()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tradingpb.Asset)
}
Asset::Asset(const Asset& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      tags_(from.tags_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  market_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_market().empty()) {
    market_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.market_);
  }
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_code().empty()) {
    code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  // @@protoc_insertion_point(copy_constructor:tradingpb.Asset)
}

void Asset::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Asset_trading2_2eproto.base);
  market_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Asset::~Asset() {
  // @@protoc_insertion_point(destructor:tradingpb.Asset)
  SharedDtor();
}

void Asset::SharedDtor() {
  market_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Asset::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Asset& Asset::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Asset_trading2_2eproto.base);
  return *internal_default_instance();
}


void Asset::Clear() {
// @@protoc_insertion_point(message_clear_start:tradingpb.Asset)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tags_.Clear();
  market_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* Asset::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string market = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_market();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tradingpb.Asset.market"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tradingpb.Asset.code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string tags = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_tags();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tradingpb.Asset.tags"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Asset::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tradingpb.Asset)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string market = 1;
  if (this->market().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_market().data(), static_cast<int>(this->_internal_market().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tradingpb.Asset.market");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_market(), target);
  }

  // string code = 2;
  if (this->code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tradingpb.Asset.code");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_code(), target);
  }

  // repeated string tags = 3;
  for (int i = 0, n = this->_internal_tags_size(); i < n; i++) {
    const auto& s = this->_internal_tags(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tradingpb.Asset.tags");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tradingpb.Asset)
  return target;
}

size_t Asset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tradingpb.Asset)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string tags = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(tags_.size());
  for (int i = 0, n = tags_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      tags_.Get(i));
  }

  // string market = 1;
  if (this->market().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_market());
  }

  // string code = 2;
  if (this->code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Asset::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tradingpb.Asset)
  GOOGLE_DCHECK_NE(&from, this);
  const Asset* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Asset>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tradingpb.Asset)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tradingpb.Asset)
    MergeFrom(*source);
  }
}

void Asset::MergeFrom(const Asset& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tradingpb.Asset)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tags_.MergeFrom(from.tags_);
  if (from.market().size() > 0) {

    market_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.market_);
  }
  if (from.code().size() > 0) {

    code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
}

void Asset::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tradingpb.Asset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Asset::CopyFrom(const Asset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tradingpb.Asset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Asset::IsInitialized() const {
  return true;
}

void Asset::InternalSwap(Asset* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tags_.InternalSwap(&other->tags_);
  market_.Swap(&other->market_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  code_.Swap(&other->code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata Asset::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CtrlNodeAssetInfo::InitAsDefaultInstance() {
}
class CtrlNodeAssetInfo::_Internal {
 public:
};

CtrlNodeAssetInfo::CtrlNodeAssetInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tradingpb.CtrlNodeAssetInfo)
}
CtrlNodeAssetInfo::CtrlNodeAssetInfo(const CtrlNodeAssetInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&volume_, &from.volume_,
    static_cast<size_t>(reinterpret_cast<char*>(&cost_) -
    reinterpret_cast<char*>(&volume_)) + sizeof(cost_));
  // @@protoc_insertion_point(copy_constructor:tradingpb.CtrlNodeAssetInfo)
}

void CtrlNodeAssetInfo::SharedCtor() {
  ::memset(&volume_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cost_) -
      reinterpret_cast<char*>(&volume_)) + sizeof(cost_));
}

CtrlNodeAssetInfo::~CtrlNodeAssetInfo() {
  // @@protoc_insertion_point(destructor:tradingpb.CtrlNodeAssetInfo)
  SharedDtor();
}

void CtrlNodeAssetInfo::SharedDtor() {
}

void CtrlNodeAssetInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CtrlNodeAssetInfo& CtrlNodeAssetInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CtrlNodeAssetInfo_trading2_2eproto.base);
  return *internal_default_instance();
}


void CtrlNodeAssetInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:tradingpb.CtrlNodeAssetInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&volume_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cost_) -
      reinterpret_cast<char*>(&volume_)) + sizeof(cost_));
  _internal_metadata_.Clear();
}

const char* CtrlNodeAssetInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double volume = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          volume_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double cost = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          cost_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CtrlNodeAssetInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tradingpb.CtrlNodeAssetInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double volume = 1;
  if (!(this->volume() <= 0 && this->volume() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_volume(), target);
  }

  // double cost = 2;
  if (!(this->cost() <= 0 && this->cost() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_cost(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tradingpb.CtrlNodeAssetInfo)
  return target;
}

size_t CtrlNodeAssetInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tradingpb.CtrlNodeAssetInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double volume = 1;
  if (!(this->volume() <= 0 && this->volume() >= 0)) {
    total_size += 1 + 8;
  }

  // double cost = 2;
  if (!(this->cost() <= 0 && this->cost() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CtrlNodeAssetInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tradingpb.CtrlNodeAssetInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CtrlNodeAssetInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CtrlNodeAssetInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tradingpb.CtrlNodeAssetInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tradingpb.CtrlNodeAssetInfo)
    MergeFrom(*source);
  }
}

void CtrlNodeAssetInfo::MergeFrom(const CtrlNodeAssetInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tradingpb.CtrlNodeAssetInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.volume() <= 0 && from.volume() >= 0)) {
    _internal_set_volume(from._internal_volume());
  }
  if (!(from.cost() <= 0 && from.cost() >= 0)) {
    _internal_set_cost(from._internal_cost());
  }
}

void CtrlNodeAssetInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tradingpb.CtrlNodeAssetInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CtrlNodeAssetInfo::CopyFrom(const CtrlNodeAssetInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tradingpb.CtrlNodeAssetInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CtrlNodeAssetInfo::IsInitialized() const {
  return true;
}

void CtrlNodeAssetInfo::InternalSwap(CtrlNodeAssetInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(volume_, other->volume_);
  swap(cost_, other->cost_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CtrlNodeAssetInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

CtrlNode_MapAssetsInfoEntry_DoNotUse::CtrlNode_MapAssetsInfoEntry_DoNotUse() {}
CtrlNode_MapAssetsInfoEntry_DoNotUse::CtrlNode_MapAssetsInfoEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void CtrlNode_MapAssetsInfoEntry_DoNotUse::MergeFrom(const CtrlNode_MapAssetsInfoEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata CtrlNode_MapAssetsInfoEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void CtrlNode_MapAssetsInfoEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void CtrlNode::InitAsDefaultInstance() {
  ::tradingpb::_CtrlNode_default_instance_._instance.get_mutable()->src_ = const_cast< ::tradingpb::Asset*>(
      ::tradingpb::Asset::internal_default_instance());
  ::tradingpb::_CtrlNode_default_instance_._instance.get_mutable()->dst_ = const_cast< ::tradingpb::Asset*>(
      ::tradingpb::Asset::internal_default_instance());
}
class CtrlNode::_Internal {
 public:
  static const ::tradingpb::Asset& src(const CtrlNode* msg);
  static const ::tradingpb::Asset& dst(const CtrlNode* msg);
};

const ::tradingpb::Asset&
CtrlNode::_Internal::src(const CtrlNode* msg) {
  return *msg->src_;
}
const ::tradingpb::Asset&
CtrlNode::_Internal::dst(const CtrlNode* msg) {
  return *msg->dst_;
}
CtrlNode::CtrlNode()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tradingpb.CtrlNode)
}
CtrlNode::CtrlNode(const CtrlNode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  mapassetsinfo_.MergeFrom(from.mapassetsinfo_);
  if (from._internal_has_src()) {
    src_ = new ::tradingpb::Asset(*from.src_);
  } else {
    src_ = nullptr;
  }
  if (from._internal_has_dst()) {
    dst_ = new ::tradingpb::Asset(*from.dst_);
  } else {
    dst_ = nullptr;
  }
  ::memcpy(&ts_, &from.ts_,
    static_cast<size_t>(reinterpret_cast<char*>(&lastmoneyparts_) -
    reinterpret_cast<char*>(&ts_)) + sizeof(lastmoneyparts_));
  // @@protoc_insertion_point(copy_constructor:tradingpb.CtrlNode)
}

void CtrlNode::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CtrlNode_trading2_2eproto.base);
  ::memset(&src_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lastmoneyparts_) -
      reinterpret_cast<char*>(&src_)) + sizeof(lastmoneyparts_));
}

CtrlNode::~CtrlNode() {
  // @@protoc_insertion_point(destructor:tradingpb.CtrlNode)
  SharedDtor();
}

void CtrlNode::SharedDtor() {
  if (this != internal_default_instance()) delete src_;
  if (this != internal_default_instance()) delete dst_;
}

void CtrlNode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CtrlNode& CtrlNode::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CtrlNode_trading2_2eproto.base);
  return *internal_default_instance();
}


void CtrlNode::Clear() {
// @@protoc_insertion_point(message_clear_start:tradingpb.CtrlNode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mapassetsinfo_.Clear();
  if (GetArenaNoVirtual() == nullptr && src_ != nullptr) {
    delete src_;
  }
  src_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && dst_ != nullptr) {
    delete dst_;
  }
  dst_ = nullptr;
  ::memset(&ts_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lastmoneyparts_) -
      reinterpret_cast<char*>(&ts_)) + sizeof(lastmoneyparts_));
  _internal_metadata_.Clear();
}

const char* CtrlNode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 ts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tradingpb.Asset src = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_src(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tradingpb.Asset dst = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_dst(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double volumeSrc = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          volumesrc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double volumeDst = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          volumedst_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .tradingpb.CtrlType type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::tradingpb::CtrlType>(val));
        } else goto handle_unusual;
        continue;
      // double fee = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          fee_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double averageHoldingPrice = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          averageholdingprice_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double sellPrice = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          sellprice_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 ctrlConditionID = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ctrlconditionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 strategyID = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          strategyid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double totalMoney = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          totalmoney_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double lastMoney = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          lastmoney_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // map<string, .tradingpb.CtrlNodeAssetInfo> mapAssetsInfo = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&mapassetsinfo_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 moneyParts = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          moneyparts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 lastMoneyParts = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          lastmoneyparts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CtrlNode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tradingpb.CtrlNode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 ts = 1;
  if (this->ts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_ts(), target);
  }

  // .tradingpb.Asset src = 2;
  if (this->has_src()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::src(this), target, stream);
  }

  // .tradingpb.Asset dst = 3;
  if (this->has_dst()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::dst(this), target, stream);
  }

  // double volumeSrc = 4;
  if (!(this->volumesrc() <= 0 && this->volumesrc() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_volumesrc(), target);
  }

  // double volumeDst = 5;
  if (!(this->volumedst() <= 0 && this->volumedst() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_volumedst(), target);
  }

  // .tradingpb.CtrlType type = 6;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_type(), target);
  }

  // double fee = 7;
  if (!(this->fee() <= 0 && this->fee() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_fee(), target);
  }

  // double averageHoldingPrice = 8;
  if (!(this->averageholdingprice() <= 0 && this->averageholdingprice() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_averageholdingprice(), target);
  }

  // double sellPrice = 9;
  if (!(this->sellprice() <= 0 && this->sellprice() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_sellprice(), target);
  }

  // int32 ctrlConditionID = 10;
  if (this->ctrlconditionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_ctrlconditionid(), target);
  }

  // int32 strategyID = 11;
  if (this->strategyid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_strategyid(), target);
  }

  // double totalMoney = 12;
  if (!(this->totalmoney() <= 0 && this->totalmoney() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_totalmoney(), target);
  }

  // double lastMoney = 13;
  if (!(this->lastmoney() <= 0 && this->lastmoney() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->_internal_lastmoney(), target);
  }

  // map<string, .tradingpb.CtrlNodeAssetInfo> mapAssetsInfo = 14;
  if (!this->_internal_mapassetsinfo().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tradingpb::CtrlNodeAssetInfo >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "tradingpb.CtrlNode.MapAssetsInfoEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_mapassetsinfo().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_mapassetsinfo().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tradingpb::CtrlNodeAssetInfo >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tradingpb::CtrlNodeAssetInfo >::const_iterator
          it = this->_internal_mapassetsinfo().begin();
          it != this->_internal_mapassetsinfo().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = CtrlNode_MapAssetsInfoEntry_DoNotUse::Funcs::InternalSerialize(14, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tradingpb::CtrlNodeAssetInfo >::const_iterator
          it = this->_internal_mapassetsinfo().begin();
          it != this->_internal_mapassetsinfo().end(); ++it) {
        target = CtrlNode_MapAssetsInfoEntry_DoNotUse::Funcs::InternalSerialize(14, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // int32 moneyParts = 15;
  if (this->moneyparts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_moneyparts(), target);
  }

  // int32 lastMoneyParts = 16;
  if (this->lastmoneyparts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(16, this->_internal_lastmoneyparts(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tradingpb.CtrlNode)
  return target;
}

size_t CtrlNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tradingpb.CtrlNode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .tradingpb.CtrlNodeAssetInfo> mapAssetsInfo = 14;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_mapassetsinfo_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tradingpb::CtrlNodeAssetInfo >::const_iterator
      it = this->_internal_mapassetsinfo().begin();
      it != this->_internal_mapassetsinfo().end(); ++it) {
    total_size += CtrlNode_MapAssetsInfoEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .tradingpb.Asset src = 2;
  if (this->has_src()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *src_);
  }

  // .tradingpb.Asset dst = 3;
  if (this->has_dst()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dst_);
  }

  // int64 ts = 1;
  if (this->ts() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ts());
  }

  // double volumeSrc = 4;
  if (!(this->volumesrc() <= 0 && this->volumesrc() >= 0)) {
    total_size += 1 + 8;
  }

  // double volumeDst = 5;
  if (!(this->volumedst() <= 0 && this->volumedst() >= 0)) {
    total_size += 1 + 8;
  }

  // double fee = 7;
  if (!(this->fee() <= 0 && this->fee() >= 0)) {
    total_size += 1 + 8;
  }

  // double averageHoldingPrice = 8;
  if (!(this->averageholdingprice() <= 0 && this->averageholdingprice() >= 0)) {
    total_size += 1 + 8;
  }

  // .tradingpb.CtrlType type = 6;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // int32 ctrlConditionID = 10;
  if (this->ctrlconditionid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ctrlconditionid());
  }

  // double sellPrice = 9;
  if (!(this->sellprice() <= 0 && this->sellprice() >= 0)) {
    total_size += 1 + 8;
  }

  // double totalMoney = 12;
  if (!(this->totalmoney() <= 0 && this->totalmoney() >= 0)) {
    total_size += 1 + 8;
  }

  // double lastMoney = 13;
  if (!(this->lastmoney() <= 0 && this->lastmoney() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 strategyID = 11;
  if (this->strategyid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_strategyid());
  }

  // int32 moneyParts = 15;
  if (this->moneyparts() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_moneyparts());
  }

  // int32 lastMoneyParts = 16;
  if (this->lastmoneyparts() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lastmoneyparts());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CtrlNode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tradingpb.CtrlNode)
  GOOGLE_DCHECK_NE(&from, this);
  const CtrlNode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CtrlNode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tradingpb.CtrlNode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tradingpb.CtrlNode)
    MergeFrom(*source);
  }
}

void CtrlNode::MergeFrom(const CtrlNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tradingpb.CtrlNode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mapassetsinfo_.MergeFrom(from.mapassetsinfo_);
  if (from.has_src()) {
    _internal_mutable_src()->::tradingpb::Asset::MergeFrom(from._internal_src());
  }
  if (from.has_dst()) {
    _internal_mutable_dst()->::tradingpb::Asset::MergeFrom(from._internal_dst());
  }
  if (from.ts() != 0) {
    _internal_set_ts(from._internal_ts());
  }
  if (!(from.volumesrc() <= 0 && from.volumesrc() >= 0)) {
    _internal_set_volumesrc(from._internal_volumesrc());
  }
  if (!(from.volumedst() <= 0 && from.volumedst() >= 0)) {
    _internal_set_volumedst(from._internal_volumedst());
  }
  if (!(from.fee() <= 0 && from.fee() >= 0)) {
    _internal_set_fee(from._internal_fee());
  }
  if (!(from.averageholdingprice() <= 0 && from.averageholdingprice() >= 0)) {
    _internal_set_averageholdingprice(from._internal_averageholdingprice());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.ctrlconditionid() != 0) {
    _internal_set_ctrlconditionid(from._internal_ctrlconditionid());
  }
  if (!(from.sellprice() <= 0 && from.sellprice() >= 0)) {
    _internal_set_sellprice(from._internal_sellprice());
  }
  if (!(from.totalmoney() <= 0 && from.totalmoney() >= 0)) {
    _internal_set_totalmoney(from._internal_totalmoney());
  }
  if (!(from.lastmoney() <= 0 && from.lastmoney() >= 0)) {
    _internal_set_lastmoney(from._internal_lastmoney());
  }
  if (from.strategyid() != 0) {
    _internal_set_strategyid(from._internal_strategyid());
  }
  if (from.moneyparts() != 0) {
    _internal_set_moneyparts(from._internal_moneyparts());
  }
  if (from.lastmoneyparts() != 0) {
    _internal_set_lastmoneyparts(from._internal_lastmoneyparts());
  }
}

void CtrlNode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tradingpb.CtrlNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CtrlNode::CopyFrom(const CtrlNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tradingpb.CtrlNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CtrlNode::IsInitialized() const {
  return true;
}

void CtrlNode::InternalSwap(CtrlNode* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  mapassetsinfo_.Swap(&other->mapassetsinfo_);
  swap(src_, other->src_);
  swap(dst_, other->dst_);
  swap(ts_, other->ts_);
  swap(volumesrc_, other->volumesrc_);
  swap(volumedst_, other->volumedst_);
  swap(fee_, other->fee_);
  swap(averageholdingprice_, other->averageholdingprice_);
  swap(type_, other->type_);
  swap(ctrlconditionid_, other->ctrlconditionid_);
  swap(sellprice_, other->sellprice_);
  swap(totalmoney_, other->totalmoney_);
  swap(lastmoney_, other->lastmoney_);
  swap(strategyid_, other->strategyid_);
  swap(moneyparts_, other->moneyparts_);
  swap(lastmoneyparts_, other->lastmoneyparts_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CtrlNode::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WalletAsset::InitAsDefaultInstance() {
  ::tradingpb::_WalletAsset_default_instance_._instance.get_mutable()->asset_ = const_cast< ::tradingpb::Asset*>(
      ::tradingpb::Asset::internal_default_instance());
}
class WalletAsset::_Internal {
 public:
  static const ::tradingpb::Asset& asset(const WalletAsset* msg);
};

const ::tradingpb::Asset&
WalletAsset::_Internal::asset(const WalletAsset* msg) {
  return *msg->asset_;
}
WalletAsset::WalletAsset()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tradingpb.WalletAsset)
}
WalletAsset::WalletAsset(const WalletAsset& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_asset()) {
    asset_ = new ::tradingpb::Asset(*from.asset_);
  } else {
    asset_ = nullptr;
  }
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:tradingpb.WalletAsset)
}

void WalletAsset::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WalletAsset_trading2_2eproto.base);
  ::memset(&asset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&asset_)) + sizeof(value_));
}

WalletAsset::~WalletAsset() {
  // @@protoc_insertion_point(destructor:tradingpb.WalletAsset)
  SharedDtor();
}

void WalletAsset::SharedDtor() {
  if (this != internal_default_instance()) delete asset_;
}

void WalletAsset::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WalletAsset& WalletAsset::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WalletAsset_trading2_2eproto.base);
  return *internal_default_instance();
}


void WalletAsset::Clear() {
// @@protoc_insertion_point(message_clear_start:tradingpb.WalletAsset)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && asset_ != nullptr) {
    delete asset_;
  }
  asset_ = nullptr;
  value_ = 0;
  _internal_metadata_.Clear();
}

const char* WalletAsset::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .tradingpb.Asset asset = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_asset(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WalletAsset::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tradingpb.WalletAsset)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tradingpb.Asset asset = 1;
  if (this->has_asset()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::asset(this), target, stream);
  }

  // double value = 2;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tradingpb.WalletAsset)
  return target;
}

size_t WalletAsset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tradingpb.WalletAsset)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tradingpb.Asset asset = 1;
  if (this->has_asset()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *asset_);
  }

  // double value = 2;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WalletAsset::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tradingpb.WalletAsset)
  GOOGLE_DCHECK_NE(&from, this);
  const WalletAsset* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WalletAsset>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tradingpb.WalletAsset)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tradingpb.WalletAsset)
    MergeFrom(*source);
  }
}

void WalletAsset::MergeFrom(const WalletAsset& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tradingpb.WalletAsset)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_asset()) {
    _internal_mutable_asset()->::tradingpb::Asset::MergeFrom(from._internal_asset());
  }
  if (!(from.value() <= 0 && from.value() >= 0)) {
    _internal_set_value(from._internal_value());
  }
}

void WalletAsset::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tradingpb.WalletAsset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WalletAsset::CopyFrom(const WalletAsset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tradingpb.WalletAsset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WalletAsset::IsInitialized() const {
  return true;
}

void WalletAsset::InternalSwap(WalletAsset* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(asset_, other->asset_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WalletAsset::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Wallet::InitAsDefaultInstance() {
}
class Wallet::_Internal {
 public:
};

Wallet::Wallet()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tradingpb.Wallet)
}
Wallet::Wallet(const Wallet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      assets_(from.assets_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tradingpb.Wallet)
}

void Wallet::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Wallet_trading2_2eproto.base);
}

Wallet::~Wallet() {
  // @@protoc_insertion_point(destructor:tradingpb.Wallet)
  SharedDtor();
}

void Wallet::SharedDtor() {
}

void Wallet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Wallet& Wallet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Wallet_trading2_2eproto.base);
  return *internal_default_instance();
}


void Wallet::Clear() {
// @@protoc_insertion_point(message_clear_start:tradingpb.Wallet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  assets_.Clear();
  _internal_metadata_.Clear();
}

const char* Wallet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .tradingpb.WalletAsset assets = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_assets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Wallet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tradingpb.Wallet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tradingpb.WalletAsset assets = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_assets_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_assets(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tradingpb.Wallet)
  return target;
}

size_t Wallet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tradingpb.Wallet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tradingpb.WalletAsset assets = 1;
  total_size += 1UL * this->_internal_assets_size();
  for (const auto& msg : this->assets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Wallet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tradingpb.Wallet)
  GOOGLE_DCHECK_NE(&from, this);
  const Wallet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Wallet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tradingpb.Wallet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tradingpb.Wallet)
    MergeFrom(*source);
  }
}

void Wallet::MergeFrom(const Wallet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tradingpb.Wallet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  assets_.MergeFrom(from.assets_);
}

void Wallet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tradingpb.Wallet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Wallet::CopyFrom(const Wallet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tradingpb.Wallet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Wallet::IsInitialized() const {
  return true;
}

void Wallet::InternalSwap(Wallet* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  assets_.InternalSwap(&other->assets_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Wallet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CtrlCondition::InitAsDefaultInstance() {
}
class CtrlCondition::_Internal {
 public:
};

CtrlCondition::CtrlCondition()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tradingpb.CtrlCondition)
}
CtrlCondition::CtrlCondition(const CtrlCondition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      vals_(from.vals_),
      operators_(from.operators_),
      minvals_(from.minvals_),
      maxvals_(from.maxvals_),
      offvals_(from.offvals_),
      strvals_(from.strvals_),
      int64vals_(from.int64vals_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  indicator_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_indicator().empty()) {
    indicator_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.indicator_);
  }
  combcondition_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_combcondition().empty()) {
    combcondition_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.combcondition_);
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&group_, &from.group_,
    static_cast<size_t>(reinterpret_cast<char*>(&ctrlindex_) -
    reinterpret_cast<char*>(&group_)) + sizeof(ctrlindex_));
  // @@protoc_insertion_point(copy_constructor:tradingpb.CtrlCondition)
}

void CtrlCondition::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CtrlCondition_trading2_2eproto.base);
  indicator_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  combcondition_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&group_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ctrlindex_) -
      reinterpret_cast<char*>(&group_)) + sizeof(ctrlindex_));
}

CtrlCondition::~CtrlCondition() {
  // @@protoc_insertion_point(destructor:tradingpb.CtrlCondition)
  SharedDtor();
}

void CtrlCondition::SharedDtor() {
  indicator_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  combcondition_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CtrlCondition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CtrlCondition& CtrlCondition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CtrlCondition_trading2_2eproto.base);
  return *internal_default_instance();
}


void CtrlCondition::Clear() {
// @@protoc_insertion_point(message_clear_start:tradingpb.CtrlCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vals_.Clear();
  operators_.Clear();
  minvals_.Clear();
  maxvals_.Clear();
  offvals_.Clear();
  strvals_.Clear();
  int64vals_.Clear();
  indicator_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  combcondition_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&group_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ctrlindex_) -
      reinterpret_cast<char*>(&group_)) + sizeof(ctrlindex_));
  _internal_metadata_.Clear();
}

const char* CtrlCondition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string indicator = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_indicator();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tradingpb.CtrlCondition.indicator"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float vals = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_vals(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          _internal_add_vals(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated string operators = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_operators();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tradingpb.CtrlCondition.operators"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // string combCondition = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_combcondition();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tradingpb.CtrlCondition.combCondition"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float minvals = 5 [deprecated = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_minvals(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45) {
          _internal_add_minvals(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float maxvals = 6 [deprecated = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_maxvals(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53) {
          _internal_add_maxvals(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float offvals = 7 [deprecated = true];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_offvals(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61) {
          _internal_add_offvals(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated string strVals = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_strvals();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tradingpb.CtrlCondition.strVals"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // string name = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tradingpb.CtrlCondition.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 group = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          group_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float int64Vals = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_int64vals(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93) {
          _internal_add_int64vals(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 ctrlIndex = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          ctrlindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CtrlCondition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tradingpb.CtrlCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string indicator = 1 [deprecated = true];
  if (this->indicator().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_indicator().data(), static_cast<int>(this->_internal_indicator().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tradingpb.CtrlCondition.indicator");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_indicator(), target);
  }

  // repeated float vals = 2;
  if (this->_internal_vals_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_vals(), target);
  }

  // repeated string operators = 3;
  for (int i = 0, n = this->_internal_operators_size(); i < n; i++) {
    const auto& s = this->_internal_operators(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tradingpb.CtrlCondition.operators");
    target = stream->WriteString(3, s, target);
  }

  // string combCondition = 4;
  if (this->combcondition().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_combcondition().data(), static_cast<int>(this->_internal_combcondition().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tradingpb.CtrlCondition.combCondition");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_combcondition(), target);
  }

  // repeated float minvals = 5 [deprecated = true];
  if (this->_internal_minvals_size() > 0) {
    target = stream->WriteFixedPacked(5, _internal_minvals(), target);
  }

  // repeated float maxvals = 6 [deprecated = true];
  if (this->_internal_maxvals_size() > 0) {
    target = stream->WriteFixedPacked(6, _internal_maxvals(), target);
  }

  // repeated float offvals = 7 [deprecated = true];
  if (this->_internal_offvals_size() > 0) {
    target = stream->WriteFixedPacked(7, _internal_offvals(), target);
  }

  // repeated string strVals = 8;
  for (int i = 0, n = this->_internal_strvals_size(); i < n; i++) {
    const auto& s = this->_internal_strvals(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tradingpb.CtrlCondition.strVals");
    target = stream->WriteString(8, s, target);
  }

  // string name = 9;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tradingpb.CtrlCondition.name");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_name(), target);
  }

  // int32 group = 10;
  if (this->group() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_group(), target);
  }

  // repeated float int64Vals = 11;
  if (this->_internal_int64vals_size() > 0) {
    target = stream->WriteFixedPacked(11, _internal_int64vals(), target);
  }

  // int32 ctrlIndex = 12;
  if (this->ctrlindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_ctrlindex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tradingpb.CtrlCondition)
  return target;
}

size_t CtrlCondition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tradingpb.CtrlCondition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float vals = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_vals_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _vals_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string operators = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(operators_.size());
  for (int i = 0, n = operators_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      operators_.Get(i));
  }

  // repeated float minvals = 5 [deprecated = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_minvals_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _minvals_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float maxvals = 6 [deprecated = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_maxvals_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _maxvals_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float offvals = 7 [deprecated = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_offvals_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _offvals_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string strVals = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(strvals_.size());
  for (int i = 0, n = strvals_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      strvals_.Get(i));
  }

  // repeated float int64Vals = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_int64vals_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _int64vals_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string indicator = 1 [deprecated = true];
  if (this->indicator().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_indicator());
  }

  // string combCondition = 4;
  if (this->combcondition().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_combcondition());
  }

  // string name = 9;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int32 group = 10;
  if (this->group() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_group());
  }

  // int32 ctrlIndex = 12;
  if (this->ctrlindex() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ctrlindex());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CtrlCondition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tradingpb.CtrlCondition)
  GOOGLE_DCHECK_NE(&from, this);
  const CtrlCondition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CtrlCondition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tradingpb.CtrlCondition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tradingpb.CtrlCondition)
    MergeFrom(*source);
  }
}

void CtrlCondition::MergeFrom(const CtrlCondition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tradingpb.CtrlCondition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vals_.MergeFrom(from.vals_);
  operators_.MergeFrom(from.operators_);
  minvals_.MergeFrom(from.minvals_);
  maxvals_.MergeFrom(from.maxvals_);
  offvals_.MergeFrom(from.offvals_);
  strvals_.MergeFrom(from.strvals_);
  int64vals_.MergeFrom(from.int64vals_);
  if (from.indicator().size() > 0) {

    indicator_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.indicator_);
  }
  if (from.combcondition().size() > 0) {

    combcondition_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.combcondition_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.group() != 0) {
    _internal_set_group(from._internal_group());
  }
  if (from.ctrlindex() != 0) {
    _internal_set_ctrlindex(from._internal_ctrlindex());
  }
}

void CtrlCondition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tradingpb.CtrlCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CtrlCondition::CopyFrom(const CtrlCondition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tradingpb.CtrlCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CtrlCondition::IsInitialized() const {
  return true;
}

void CtrlCondition::InternalSwap(CtrlCondition* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  vals_.InternalSwap(&other->vals_);
  operators_.InternalSwap(&other->operators_);
  minvals_.InternalSwap(&other->minvals_);
  maxvals_.InternalSwap(&other->maxvals_);
  offvals_.InternalSwap(&other->offvals_);
  strvals_.InternalSwap(&other->strvals_);
  int64vals_.InternalSwap(&other->int64vals_);
  indicator_.Swap(&other->indicator_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  combcondition_.Swap(&other->combcondition_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(group_, other->group_);
  swap(ctrlindex_, other->ctrlindex_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CtrlCondition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IndicatorData::InitAsDefaultInstance() {
}
class IndicatorData::_Internal {
 public:
};

IndicatorData::IndicatorData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tradingpb.IndicatorData)
}
IndicatorData::IndicatorData(const IndicatorData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      vals_(from.vals_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ts_ = from.ts_;
  // @@protoc_insertion_point(copy_constructor:tradingpb.IndicatorData)
}

void IndicatorData::SharedCtor() {
  ts_ = PROTOBUF_LONGLONG(0);
}

IndicatorData::~IndicatorData() {
  // @@protoc_insertion_point(destructor:tradingpb.IndicatorData)
  SharedDtor();
}

void IndicatorData::SharedDtor() {
}

void IndicatorData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IndicatorData& IndicatorData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IndicatorData_trading2_2eproto.base);
  return *internal_default_instance();
}


void IndicatorData::Clear() {
// @@protoc_insertion_point(message_clear_start:tradingpb.IndicatorData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vals_.Clear();
  ts_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* IndicatorData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float vals = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_vals(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          _internal_add_vals(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int64 ts = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IndicatorData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tradingpb.IndicatorData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float vals = 1;
  if (this->_internal_vals_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_vals(), target);
  }

  // int64 ts = 2;
  if (this->ts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_ts(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tradingpb.IndicatorData)
  return target;
}

size_t IndicatorData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tradingpb.IndicatorData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float vals = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_vals_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _vals_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int64 ts = 2;
  if (this->ts() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ts());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IndicatorData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tradingpb.IndicatorData)
  GOOGLE_DCHECK_NE(&from, this);
  const IndicatorData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IndicatorData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tradingpb.IndicatorData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tradingpb.IndicatorData)
    MergeFrom(*source);
  }
}

void IndicatorData::MergeFrom(const IndicatorData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tradingpb.IndicatorData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vals_.MergeFrom(from.vals_);
  if (from.ts() != 0) {
    _internal_set_ts(from._internal_ts());
  }
}

void IndicatorData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tradingpb.IndicatorData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndicatorData::CopyFrom(const IndicatorData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tradingpb.IndicatorData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndicatorData::IsInitialized() const {
  return true;
}

void IndicatorData::InternalSwap(IndicatorData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  vals_.InternalSwap(&other->vals_);
  swap(ts_, other->ts_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IndicatorData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Indicator::InitAsDefaultInstance() {
}
class Indicator::_Internal {
 public:
};

Indicator::Indicator()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tradingpb.Indicator)
}
Indicator::Indicator(const Indicator& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fullname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_fullname().empty()) {
    fullname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fullname_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:tradingpb.Indicator)
}

void Indicator::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Indicator_trading2_2eproto.base);
  fullname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

Indicator::~Indicator() {
  // @@protoc_insertion_point(destructor:tradingpb.Indicator)
  SharedDtor();
}

void Indicator::SharedDtor() {
  fullname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Indicator::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Indicator& Indicator::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Indicator_trading2_2eproto.base);
  return *internal_default_instance();
}


void Indicator::Clear() {
// @@protoc_insertion_point(message_clear_start:tradingpb.Indicator)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  fullname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  _internal_metadata_.Clear();
}

const char* Indicator::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string fullname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_fullname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tradingpb.Indicator.fullname"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tradingpb.IndicatorType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::tradingpb::IndicatorType>(val));
        } else goto handle_unusual;
        continue;
      // repeated .tradingpb.IndicatorData data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Indicator::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tradingpb.Indicator)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string fullname = 1;
  if (this->fullname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fullname().data(), static_cast<int>(this->_internal_fullname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tradingpb.Indicator.fullname");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_fullname(), target);
  }

  // .tradingpb.IndicatorType type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // repeated .tradingpb.IndicatorData data = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tradingpb.Indicator)
  return target;
}

size_t Indicator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tradingpb.Indicator)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tradingpb.IndicatorData data = 3;
  total_size += 1UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string fullname = 1;
  if (this->fullname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fullname());
  }

  // .tradingpb.IndicatorType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Indicator::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tradingpb.Indicator)
  GOOGLE_DCHECK_NE(&from, this);
  const Indicator* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Indicator>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tradingpb.Indicator)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tradingpb.Indicator)
    MergeFrom(*source);
  }
}

void Indicator::MergeFrom(const Indicator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tradingpb.Indicator)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  if (from.fullname().size() > 0) {

    fullname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fullname_);
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void Indicator::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tradingpb.Indicator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Indicator::CopyFrom(const Indicator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tradingpb.Indicator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Indicator::IsInitialized() const {
  return true;
}

void Indicator::InternalSwap(Indicator* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  data_.InternalSwap(&other->data_);
  fullname_.Swap(&other->fullname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Indicator::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BuyParams::InitAsDefaultInstance() {
}
class BuyParams::_Internal {
 public:
};

BuyParams::BuyParams()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tradingpb.BuyParams)
}
BuyParams::BuyParams(const BuyParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  assetcode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_assetcode().empty()) {
    assetcode_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.assetcode_);
  }
  timetypebuyasset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_timetypebuyasset().empty()) {
    timetypebuyasset_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.timetypebuyasset_);
  }
  typebuyasset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_typebuyasset().empty()) {
    typebuyasset_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.typebuyasset_);
  }
  ::memcpy(&initmoney_, &from.initmoney_,
    static_cast<size_t>(reinterpret_cast<char*>(&perlimitprice_) -
    reinterpret_cast<char*>(&initmoney_)) + sizeof(perlimitprice_));
  // @@protoc_insertion_point(copy_constructor:tradingpb.BuyParams)
}

void BuyParams::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BuyParams_trading2_2eproto.base);
  assetcode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  timetypebuyasset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  typebuyasset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&initmoney_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&perlimitprice_) -
      reinterpret_cast<char*>(&initmoney_)) + sizeof(perlimitprice_));
}

BuyParams::~BuyParams() {
  // @@protoc_insertion_point(destructor:tradingpb.BuyParams)
  SharedDtor();
}

void BuyParams::SharedDtor() {
  assetcode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  timetypebuyasset_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  typebuyasset_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BuyParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BuyParams& BuyParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BuyParams_trading2_2eproto.base);
  return *internal_default_instance();
}


void BuyParams::Clear() {
// @@protoc_insertion_point(message_clear_start:tradingpb.BuyParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  assetcode_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  timetypebuyasset_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  typebuyasset_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&initmoney_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&perlimitprice_) -
      reinterpret_cast<char*>(&initmoney_)) + sizeof(perlimitprice_));
  _internal_metadata_.Clear();
}

const char* BuyParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float initMoney = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          initmoney_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float perMoney = 2 [deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          permoney_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float volume = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          volume_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float aipMoney = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          aipmoney_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float perInitMoney = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          perinitmoney_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float perHandMoney = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          perhandmoney_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float perTotalMoney = 7 [deprecated = true];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          pertotalmoney_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // string assetCode = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_assetcode();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tradingpb.BuyParams.assetCode"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string timeTypeBuyAsset = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_timetypebuyasset();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tradingpb.BuyParams.timeTypeBuyAsset"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 tsOffBuy = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          tsoffbuy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string typeBuyAsset = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_typebuyasset();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tradingpb.BuyParams.typeBuyAsset"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 moneyParts = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          moneyparts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 nextTimes = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          nexttimes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 depositMoney = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          depositmoney_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float limitPrice = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          limitprice_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float perLimitPrice = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          perlimitprice_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BuyParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tradingpb.BuyParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float initMoney = 1 [deprecated = true];
  if (!(this->initmoney() <= 0 && this->initmoney() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_initmoney(), target);
  }

  // float perMoney = 2 [deprecated = true];
  if (!(this->permoney() <= 0 && this->permoney() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_permoney(), target);
  }

  // float volume = 3;
  if (!(this->volume() <= 0 && this->volume() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_volume(), target);
  }

  // float aipMoney = 4;
  if (!(this->aipmoney() <= 0 && this->aipmoney() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_aipmoney(), target);
  }

  // float perInitMoney = 5;
  if (!(this->perinitmoney() <= 0 && this->perinitmoney() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_perinitmoney(), target);
  }

  // float perHandMoney = 6;
  if (!(this->perhandmoney() <= 0 && this->perhandmoney() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_perhandmoney(), target);
  }

  // float perTotalMoney = 7 [deprecated = true];
  if (!(this->pertotalmoney() <= 0 && this->pertotalmoney() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_pertotalmoney(), target);
  }

  // string assetCode = 8;
  if (this->assetcode().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_assetcode().data(), static_cast<int>(this->_internal_assetcode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tradingpb.BuyParams.assetCode");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_assetcode(), target);
  }

  // string timeTypeBuyAsset = 9;
  if (this->timetypebuyasset().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_timetypebuyasset().data(), static_cast<int>(this->_internal_timetypebuyasset().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tradingpb.BuyParams.timeTypeBuyAsset");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_timetypebuyasset(), target);
  }

  // int64 tsOffBuy = 10;
  if (this->tsoffbuy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(10, this->_internal_tsoffbuy(), target);
  }

  // string typeBuyAsset = 11;
  if (this->typebuyasset().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_typebuyasset().data(), static_cast<int>(this->_internal_typebuyasset().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tradingpb.BuyParams.typeBuyAsset");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_typebuyasset(), target);
  }

  // int32 moneyParts = 12;
  if (this->moneyparts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_moneyparts(), target);
  }

  // int32 nextTimes = 13;
  if (this->nexttimes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_nexttimes(), target);
  }

  // int32 depositMoney = 14;
  if (this->depositmoney() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_depositmoney(), target);
  }

  // float limitPrice = 15;
  if (!(this->limitprice() <= 0 && this->limitprice() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(15, this->_internal_limitprice(), target);
  }

  // float perLimitPrice = 16;
  if (!(this->perlimitprice() <= 0 && this->perlimitprice() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(16, this->_internal_perlimitprice(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tradingpb.BuyParams)
  return target;
}

size_t BuyParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tradingpb.BuyParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string assetCode = 8;
  if (this->assetcode().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_assetcode());
  }

  // string timeTypeBuyAsset = 9;
  if (this->timetypebuyasset().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_timetypebuyasset());
  }

  // string typeBuyAsset = 11;
  if (this->typebuyasset().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_typebuyasset());
  }

  // float initMoney = 1 [deprecated = true];
  if (!(this->initmoney() <= 0 && this->initmoney() >= 0)) {
    total_size += 1 + 4;
  }

  // float perMoney = 2 [deprecated = true];
  if (!(this->permoney() <= 0 && this->permoney() >= 0)) {
    total_size += 1 + 4;
  }

  // float volume = 3;
  if (!(this->volume() <= 0 && this->volume() >= 0)) {
    total_size += 1 + 4;
  }

  // float aipMoney = 4;
  if (!(this->aipmoney() <= 0 && this->aipmoney() >= 0)) {
    total_size += 1 + 4;
  }

  // float perInitMoney = 5;
  if (!(this->perinitmoney() <= 0 && this->perinitmoney() >= 0)) {
    total_size += 1 + 4;
  }

  // float perHandMoney = 6;
  if (!(this->perhandmoney() <= 0 && this->perhandmoney() >= 0)) {
    total_size += 1 + 4;
  }

  // float perTotalMoney = 7 [deprecated = true];
  if (!(this->pertotalmoney() <= 0 && this->pertotalmoney() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 moneyParts = 12;
  if (this->moneyparts() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_moneyparts());
  }

  // int64 tsOffBuy = 10;
  if (this->tsoffbuy() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_tsoffbuy());
  }

  // int32 nextTimes = 13;
  if (this->nexttimes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_nexttimes());
  }

  // int32 depositMoney = 14;
  if (this->depositmoney() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_depositmoney());
  }

  // float limitPrice = 15;
  if (!(this->limitprice() <= 0 && this->limitprice() >= 0)) {
    total_size += 1 + 4;
  }

  // float perLimitPrice = 16;
  if (!(this->perlimitprice() <= 0 && this->perlimitprice() >= 0)) {
    total_size += 2 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BuyParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tradingpb.BuyParams)
  GOOGLE_DCHECK_NE(&from, this);
  const BuyParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BuyParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tradingpb.BuyParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tradingpb.BuyParams)
    MergeFrom(*source);
  }
}

void BuyParams::MergeFrom(const BuyParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tradingpb.BuyParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.assetcode().size() > 0) {

    assetcode_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.assetcode_);
  }
  if (from.timetypebuyasset().size() > 0) {

    timetypebuyasset_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.timetypebuyasset_);
  }
  if (from.typebuyasset().size() > 0) {

    typebuyasset_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.typebuyasset_);
  }
  if (!(from.initmoney() <= 0 && from.initmoney() >= 0)) {
    _internal_set_initmoney(from._internal_initmoney());
  }
  if (!(from.permoney() <= 0 && from.permoney() >= 0)) {
    _internal_set_permoney(from._internal_permoney());
  }
  if (!(from.volume() <= 0 && from.volume() >= 0)) {
    _internal_set_volume(from._internal_volume());
  }
  if (!(from.aipmoney() <= 0 && from.aipmoney() >= 0)) {
    _internal_set_aipmoney(from._internal_aipmoney());
  }
  if (!(from.perinitmoney() <= 0 && from.perinitmoney() >= 0)) {
    _internal_set_perinitmoney(from._internal_perinitmoney());
  }
  if (!(from.perhandmoney() <= 0 && from.perhandmoney() >= 0)) {
    _internal_set_perhandmoney(from._internal_perhandmoney());
  }
  if (!(from.pertotalmoney() <= 0 && from.pertotalmoney() >= 0)) {
    _internal_set_pertotalmoney(from._internal_pertotalmoney());
  }
  if (from.moneyparts() != 0) {
    _internal_set_moneyparts(from._internal_moneyparts());
  }
  if (from.tsoffbuy() != 0) {
    _internal_set_tsoffbuy(from._internal_tsoffbuy());
  }
  if (from.nexttimes() != 0) {
    _internal_set_nexttimes(from._internal_nexttimes());
  }
  if (from.depositmoney() != 0) {
    _internal_set_depositmoney(from._internal_depositmoney());
  }
  if (!(from.limitprice() <= 0 && from.limitprice() >= 0)) {
    _internal_set_limitprice(from._internal_limitprice());
  }
  if (!(from.perlimitprice() <= 0 && from.perlimitprice() >= 0)) {
    _internal_set_perlimitprice(from._internal_perlimitprice());
  }
}

void BuyParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tradingpb.BuyParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuyParams::CopyFrom(const BuyParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tradingpb.BuyParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuyParams::IsInitialized() const {
  return true;
}

void BuyParams::InternalSwap(BuyParams* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  assetcode_.Swap(&other->assetcode_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  timetypebuyasset_.Swap(&other->timetypebuyasset_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  typebuyasset_.Swap(&other->typebuyasset_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(initmoney_, other->initmoney_);
  swap(permoney_, other->permoney_);
  swap(volume_, other->volume_);
  swap(aipmoney_, other->aipmoney_);
  swap(perinitmoney_, other->perinitmoney_);
  swap(perhandmoney_, other->perhandmoney_);
  swap(pertotalmoney_, other->pertotalmoney_);
  swap(moneyparts_, other->moneyparts_);
  swap(tsoffbuy_, other->tsoffbuy_);
  swap(nexttimes_, other->nexttimes_);
  swap(depositmoney_, other->depositmoney_);
  swap(limitprice_, other->limitprice_);
  swap(perlimitprice_, other->perlimitprice_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BuyParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SellParams::InitAsDefaultInstance() {
}
class SellParams::_Internal {
 public:
};

SellParams::SellParams()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tradingpb.SellParams)
}
SellParams::SellParams(const SellParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  assetcode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_assetcode().empty()) {
    assetcode_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.assetcode_);
  }
  timetypesellasset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_timetypesellasset().empty()) {
    timetypesellasset_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.timetypesellasset_);
  }
  typesellasset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_typesellasset().empty()) {
    typesellasset_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.typesellasset_);
  }
  ::memcpy(&volume_, &from.volume_,
    static_cast<size_t>(reinterpret_cast<char*>(&perlimitprice_) -
    reinterpret_cast<char*>(&volume_)) + sizeof(perlimitprice_));
  // @@protoc_insertion_point(copy_constructor:tradingpb.SellParams)
}

void SellParams::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SellParams_trading2_2eproto.base);
  assetcode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  timetypesellasset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  typesellasset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&volume_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&perlimitprice_) -
      reinterpret_cast<char*>(&volume_)) + sizeof(perlimitprice_));
}

SellParams::~SellParams() {
  // @@protoc_insertion_point(destructor:tradingpb.SellParams)
  SharedDtor();
}

void SellParams::SharedDtor() {
  assetcode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  timetypesellasset_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  typesellasset_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SellParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SellParams& SellParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SellParams_trading2_2eproto.base);
  return *internal_default_instance();
}


void SellParams::Clear() {
// @@protoc_insertion_point(message_clear_start:tradingpb.SellParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  assetcode_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  timetypesellasset_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  typesellasset_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&volume_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&perlimitprice_) -
      reinterpret_cast<char*>(&volume_)) + sizeof(perlimitprice_));
  _internal_metadata_.Clear();
}

const char* SellParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float volume = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          volume_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float perVolume = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          pervolume_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float money = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          money_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int64 keepTime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          keeptime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string assetCode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_assetcode();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tradingpb.SellParams.assetCode"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string timeTypeSellAsset = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_timetypesellasset();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tradingpb.SellParams.timeTypeSellAsset"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 tsOffSell = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          tsoffsell_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string typeSellAsset = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_typesellasset();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tradingpb.SellParams.typeSellAsset"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 nextTimes = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          nexttimes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float limitPrice = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          limitprice_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float perLimitPrice = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          perlimitprice_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SellParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tradingpb.SellParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float volume = 1;
  if (!(this->volume() <= 0 && this->volume() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_volume(), target);
  }

  // float perVolume = 2;
  if (!(this->pervolume() <= 0 && this->pervolume() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_pervolume(), target);
  }

  // float money = 3;
  if (!(this->money() <= 0 && this->money() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_money(), target);
  }

  // int64 keepTime = 4;
  if (this->keeptime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_keeptime(), target);
  }

  // string assetCode = 5;
  if (this->assetcode().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_assetcode().data(), static_cast<int>(this->_internal_assetcode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tradingpb.SellParams.assetCode");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_assetcode(), target);
  }

  // string timeTypeSellAsset = 6;
  if (this->timetypesellasset().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_timetypesellasset().data(), static_cast<int>(this->_internal_timetypesellasset().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tradingpb.SellParams.timeTypeSellAsset");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_timetypesellasset(), target);
  }

  // int64 tsOffSell = 7;
  if (this->tsoffsell() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_tsoffsell(), target);
  }

  // string typeSellAsset = 8;
  if (this->typesellasset().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_typesellasset().data(), static_cast<int>(this->_internal_typesellasset().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tradingpb.SellParams.typeSellAsset");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_typesellasset(), target);
  }

  // int32 nextTimes = 9;
  if (this->nexttimes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_nexttimes(), target);
  }

  // float limitPrice = 10;
  if (!(this->limitprice() <= 0 && this->limitprice() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_limitprice(), target);
  }

  // float perLimitPrice = 11;
  if (!(this->perlimitprice() <= 0 && this->perlimitprice() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_perlimitprice(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tradingpb.SellParams)
  return target;
}

size_t SellParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tradingpb.SellParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string assetCode = 5;
  if (this->assetcode().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_assetcode());
  }

  // string timeTypeSellAsset = 6;
  if (this->timetypesellasset().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_timetypesellasset());
  }

  // string typeSellAsset = 8;
  if (this->typesellasset().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_typesellasset());
  }

  // float volume = 1;
  if (!(this->volume() <= 0 && this->volume() >= 0)) {
    total_size += 1 + 4;
  }

  // float perVolume = 2;
  if (!(this->pervolume() <= 0 && this->pervolume() >= 0)) {
    total_size += 1 + 4;
  }

  // int64 keepTime = 4;
  if (this->keeptime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_keeptime());
  }

  // float money = 3;
  if (!(this->money() <= 0 && this->money() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 nextTimes = 9;
  if (this->nexttimes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_nexttimes());
  }

  // int64 tsOffSell = 7;
  if (this->tsoffsell() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_tsoffsell());
  }

  // float limitPrice = 10;
  if (!(this->limitprice() <= 0 && this->limitprice() >= 0)) {
    total_size += 1 + 4;
  }

  // float perLimitPrice = 11;
  if (!(this->perlimitprice() <= 0 && this->perlimitprice() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SellParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tradingpb.SellParams)
  GOOGLE_DCHECK_NE(&from, this);
  const SellParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SellParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tradingpb.SellParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tradingpb.SellParams)
    MergeFrom(*source);
  }
}

void SellParams::MergeFrom(const SellParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tradingpb.SellParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.assetcode().size() > 0) {

    assetcode_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.assetcode_);
  }
  if (from.timetypesellasset().size() > 0) {

    timetypesellasset_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.timetypesellasset_);
  }
  if (from.typesellasset().size() > 0) {

    typesellasset_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.typesellasset_);
  }
  if (!(from.volume() <= 0 && from.volume() >= 0)) {
    _internal_set_volume(from._internal_volume());
  }
  if (!(from.pervolume() <= 0 && from.pervolume() >= 0)) {
    _internal_set_pervolume(from._internal_pervolume());
  }
  if (from.keeptime() != 0) {
    _internal_set_keeptime(from._internal_keeptime());
  }
  if (!(from.money() <= 0 && from.money() >= 0)) {
    _internal_set_money(from._internal_money());
  }
  if (from.nexttimes() != 0) {
    _internal_set_nexttimes(from._internal_nexttimes());
  }
  if (from.tsoffsell() != 0) {
    _internal_set_tsoffsell(from._internal_tsoffsell());
  }
  if (!(from.limitprice() <= 0 && from.limitprice() >= 0)) {
    _internal_set_limitprice(from._internal_limitprice());
  }
  if (!(from.perlimitprice() <= 0 && from.perlimitprice() >= 0)) {
    _internal_set_perlimitprice(from._internal_perlimitprice());
  }
}

void SellParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tradingpb.SellParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SellParams::CopyFrom(const SellParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tradingpb.SellParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SellParams::IsInitialized() const {
  return true;
}

void SellParams::InternalSwap(SellParams* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  assetcode_.Swap(&other->assetcode_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  timetypesellasset_.Swap(&other->timetypesellasset_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  typesellasset_.Swap(&other->typesellasset_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(volume_, other->volume_);
  swap(pervolume_, other->pervolume_);
  swap(keeptime_, other->keeptime_);
  swap(money_, other->money_);
  swap(nexttimes_, other->nexttimes_);
  swap(tsoffsell_, other->tsoffsell_);
  swap(limitprice_, other->limitprice_);
  swap(perlimitprice_, other->perlimitprice_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SellParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StopLossParams::InitAsDefaultInstance() {
}
class StopLossParams::_Internal {
 public:
};

StopLossParams::StopLossParams()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tradingpb.StopLossParams)
}
StopLossParams::StopLossParams(const StopLossParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&drawdown_, &from.drawdown_,
    static_cast<size_t>(reinterpret_cast<char*>(&pervolume_) -
    reinterpret_cast<char*>(&drawdown_)) + sizeof(pervolume_));
  // @@protoc_insertion_point(copy_constructor:tradingpb.StopLossParams)
}

void StopLossParams::SharedCtor() {
  ::memset(&drawdown_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pervolume_) -
      reinterpret_cast<char*>(&drawdown_)) + sizeof(pervolume_));
}

StopLossParams::~StopLossParams() {
  // @@protoc_insertion_point(destructor:tradingpb.StopLossParams)
  SharedDtor();
}

void StopLossParams::SharedDtor() {
}

void StopLossParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StopLossParams& StopLossParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StopLossParams_trading2_2eproto.base);
  return *internal_default_instance();
}


void StopLossParams::Clear() {
// @@protoc_insertion_point(message_clear_start:tradingpb.StopLossParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&drawdown_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pervolume_) -
      reinterpret_cast<char*>(&drawdown_)) + sizeof(pervolume_));
  _internal_metadata_.Clear();
}

const char* StopLossParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float drawdown = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          drawdown_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bool isFinish = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          isfinish_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float perVolume = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          pervolume_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StopLossParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tradingpb.StopLossParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float drawdown = 1 [deprecated = true];
  if (!(this->drawdown() <= 0 && this->drawdown() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_drawdown(), target);
  }

  // bool isFinish = 2;
  if (this->isfinish() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_isfinish(), target);
  }

  // float perVolume = 3;
  if (!(this->pervolume() <= 0 && this->pervolume() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_pervolume(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tradingpb.StopLossParams)
  return target;
}

size_t StopLossParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tradingpb.StopLossParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float drawdown = 1 [deprecated = true];
  if (!(this->drawdown() <= 0 && this->drawdown() >= 0)) {
    total_size += 1 + 4;
  }

  // bool isFinish = 2;
  if (this->isfinish() != 0) {
    total_size += 1 + 1;
  }

  // float perVolume = 3;
  if (!(this->pervolume() <= 0 && this->pervolume() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StopLossParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tradingpb.StopLossParams)
  GOOGLE_DCHECK_NE(&from, this);
  const StopLossParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StopLossParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tradingpb.StopLossParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tradingpb.StopLossParams)
    MergeFrom(*source);
  }
}

void StopLossParams::MergeFrom(const StopLossParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tradingpb.StopLossParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.drawdown() <= 0 && from.drawdown() >= 0)) {
    _internal_set_drawdown(from._internal_drawdown());
  }
  if (from.isfinish() != 0) {
    _internal_set_isfinish(from._internal_isfinish());
  }
  if (!(from.pervolume() <= 0 && from.pervolume() >= 0)) {
    _internal_set_pervolume(from._internal_pervolume());
  }
}

void StopLossParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tradingpb.StopLossParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopLossParams::CopyFrom(const StopLossParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tradingpb.StopLossParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopLossParams::IsInitialized() const {
  return true;
}

void StopLossParams::InternalSwap(StopLossParams* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(drawdown_, other->drawdown_);
  swap(isfinish_, other->isfinish_);
  swap(pervolume_, other->pervolume_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StopLossParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TakeProfitParams::InitAsDefaultInstance() {
}
class TakeProfitParams::_Internal {
 public:
};

TakeProfitParams::TakeProfitParams()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tradingpb.TakeProfitParams)
}
TakeProfitParams::TakeProfitParams(const TakeProfitParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  giveto_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_giveto().empty()) {
    giveto_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.giveto_);
  }
  ::memcpy(&profit_, &from.profit_,
    static_cast<size_t>(reinterpret_cast<char*>(&isonlyprofit_) -
    reinterpret_cast<char*>(&profit_)) + sizeof(isonlyprofit_));
  // @@protoc_insertion_point(copy_constructor:tradingpb.TakeProfitParams)
}

void TakeProfitParams::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TakeProfitParams_trading2_2eproto.base);
  giveto_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&profit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isonlyprofit_) -
      reinterpret_cast<char*>(&profit_)) + sizeof(isonlyprofit_));
}

TakeProfitParams::~TakeProfitParams() {
  // @@protoc_insertion_point(destructor:tradingpb.TakeProfitParams)
  SharedDtor();
}

void TakeProfitParams::SharedDtor() {
  giveto_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TakeProfitParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TakeProfitParams& TakeProfitParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TakeProfitParams_trading2_2eproto.base);
  return *internal_default_instance();
}


void TakeProfitParams::Clear() {
// @@protoc_insertion_point(message_clear_start:tradingpb.TakeProfitParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  giveto_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&profit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isonlyprofit_) -
      reinterpret_cast<char*>(&profit_)) + sizeof(isonlyprofit_));
  _internal_metadata_.Clear();
}

const char* TakeProfitParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float profit = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          profit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bool isFinish = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          isfinish_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float perVolume = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          pervolume_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // string giveTo = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_giveto();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tradingpb.TakeProfitParams.giveTo"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isOnlyProfit = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          isonlyprofit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TakeProfitParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tradingpb.TakeProfitParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float profit = 1 [deprecated = true];
  if (!(this->profit() <= 0 && this->profit() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_profit(), target);
  }

  // bool isFinish = 2;
  if (this->isfinish() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_isfinish(), target);
  }

  // float perVolume = 3;
  if (!(this->pervolume() <= 0 && this->pervolume() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_pervolume(), target);
  }

  // string giveTo = 4;
  if (this->giveto().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_giveto().data(), static_cast<int>(this->_internal_giveto().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tradingpb.TakeProfitParams.giveTo");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_giveto(), target);
  }

  // bool isOnlyProfit = 5;
  if (this->isonlyprofit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_isonlyprofit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tradingpb.TakeProfitParams)
  return target;
}

size_t TakeProfitParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tradingpb.TakeProfitParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string giveTo = 4;
  if (this->giveto().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_giveto());
  }

  // float profit = 1 [deprecated = true];
  if (!(this->profit() <= 0 && this->profit() >= 0)) {
    total_size += 1 + 4;
  }

  // float perVolume = 3;
  if (!(this->pervolume() <= 0 && this->pervolume() >= 0)) {
    total_size += 1 + 4;
  }

  // bool isFinish = 2;
  if (this->isfinish() != 0) {
    total_size += 1 + 1;
  }

  // bool isOnlyProfit = 5;
  if (this->isonlyprofit() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TakeProfitParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tradingpb.TakeProfitParams)
  GOOGLE_DCHECK_NE(&from, this);
  const TakeProfitParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TakeProfitParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tradingpb.TakeProfitParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tradingpb.TakeProfitParams)
    MergeFrom(*source);
  }
}

void TakeProfitParams::MergeFrom(const TakeProfitParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tradingpb.TakeProfitParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.giveto().size() > 0) {

    giveto_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.giveto_);
  }
  if (!(from.profit() <= 0 && from.profit() >= 0)) {
    _internal_set_profit(from._internal_profit());
  }
  if (!(from.pervolume() <= 0 && from.pervolume() >= 0)) {
    _internal_set_pervolume(from._internal_pervolume());
  }
  if (from.isfinish() != 0) {
    _internal_set_isfinish(from._internal_isfinish());
  }
  if (from.isonlyprofit() != 0) {
    _internal_set_isonlyprofit(from._internal_isonlyprofit());
  }
}

void TakeProfitParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tradingpb.TakeProfitParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TakeProfitParams::CopyFrom(const TakeProfitParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tradingpb.TakeProfitParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TakeProfitParams::IsInitialized() const {
  return true;
}

void TakeProfitParams::InternalSwap(TakeProfitParams* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  giveto_.Swap(&other->giveto_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(profit_, other->profit_);
  swap(pervolume_, other->pervolume_);
  swap(isfinish_, other->isfinish_);
  swap(isonlyprofit_, other->isonlyprofit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TakeProfitParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InitParams::InitAsDefaultInstance() {
}
class InitParams::_Internal {
 public:
};

InitParams::InitParams()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tradingpb.InitParams)
}
InitParams::InitParams(const InitParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&money_, &from.money_,
    static_cast<size_t>(reinterpret_cast<char*>(&vomume_) -
    reinterpret_cast<char*>(&money_)) + sizeof(vomume_));
  // @@protoc_insertion_point(copy_constructor:tradingpb.InitParams)
}

void InitParams::SharedCtor() {
  ::memset(&money_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vomume_) -
      reinterpret_cast<char*>(&money_)) + sizeof(vomume_));
}

InitParams::~InitParams() {
  // @@protoc_insertion_point(destructor:tradingpb.InitParams)
  SharedDtor();
}

void InitParams::SharedDtor() {
}

void InitParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InitParams& InitParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InitParams_trading2_2eproto.base);
  return *internal_default_instance();
}


void InitParams::Clear() {
// @@protoc_insertion_point(message_clear_start:tradingpb.InitParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&money_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vomume_) -
      reinterpret_cast<char*>(&money_)) + sizeof(vomume_));
  _internal_metadata_.Clear();
}

const char* InitParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float money = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          money_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float vomume = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          vomume_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InitParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tradingpb.InitParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float money = 1;
  if (!(this->money() <= 0 && this->money() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_money(), target);
  }

  // float vomume = 2;
  if (!(this->vomume() <= 0 && this->vomume() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_vomume(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tradingpb.InitParams)
  return target;
}

size_t InitParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tradingpb.InitParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float money = 1;
  if (!(this->money() <= 0 && this->money() >= 0)) {
    total_size += 1 + 4;
  }

  // float vomume = 2;
  if (!(this->vomume() <= 0 && this->vomume() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InitParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tradingpb.InitParams)
  GOOGLE_DCHECK_NE(&from, this);
  const InitParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InitParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tradingpb.InitParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tradingpb.InitParams)
    MergeFrom(*source);
  }
}

void InitParams::MergeFrom(const InitParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tradingpb.InitParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.money() <= 0 && from.money() >= 0)) {
    _internal_set_money(from._internal_money());
  }
  if (!(from.vomume() <= 0 && from.vomume() >= 0)) {
    _internal_set_vomume(from._internal_vomume());
  }
}

void InitParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tradingpb.InitParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitParams::CopyFrom(const InitParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tradingpb.InitParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitParams::IsInitialized() const {
  return true;
}

void InitParams::InternalSwap(InitParams* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(money_, other->money_);
  swap(vomume_, other->vomume_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InitParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AIPParams::InitAsDefaultInstance() {
}
class AIPParams::_Internal {
 public:
};

AIPParams::AIPParams()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tradingpb.AIPParams)
}
AIPParams::AIPParams(const AIPParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&money_, &from.money_,
    static_cast<size_t>(reinterpret_cast<char*>(&day_) -
    reinterpret_cast<char*>(&money_)) + sizeof(day_));
  // @@protoc_insertion_point(copy_constructor:tradingpb.AIPParams)
}

void AIPParams::SharedCtor() {
  ::memset(&money_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&day_) -
      reinterpret_cast<char*>(&money_)) + sizeof(day_));
}

AIPParams::~AIPParams() {
  // @@protoc_insertion_point(destructor:tradingpb.AIPParams)
  SharedDtor();
}

void AIPParams::SharedDtor() {
}

void AIPParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AIPParams& AIPParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AIPParams_trading2_2eproto.base);
  return *internal_default_instance();
}


void AIPParams::Clear() {
// @@protoc_insertion_point(message_clear_start:tradingpb.AIPParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&money_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&day_) -
      reinterpret_cast<char*>(&money_)) + sizeof(day_));
  _internal_metadata_.Clear();
}

const char* AIPParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float money = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          money_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .tradingpb.AIPTimeType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::tradingpb::AIPTimeType>(val));
        } else goto handle_unusual;
        continue;
      // int32 day = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          day_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AIPParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tradingpb.AIPParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float money = 1;
  if (!(this->money() <= 0 && this->money() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_money(), target);
  }

  // .tradingpb.AIPTimeType type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // int32 day = 3;
  if (this->day() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_day(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tradingpb.AIPParams)
  return target;
}

size_t AIPParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tradingpb.AIPParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float money = 1;
  if (!(this->money() <= 0 && this->money() >= 0)) {
    total_size += 1 + 4;
  }

  // .tradingpb.AIPTimeType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // int32 day = 3;
  if (this->day() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_day());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AIPParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tradingpb.AIPParams)
  GOOGLE_DCHECK_NE(&from, this);
  const AIPParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AIPParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tradingpb.AIPParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tradingpb.AIPParams)
    MergeFrom(*source);
  }
}

void AIPParams::MergeFrom(const AIPParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tradingpb.AIPParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.money() <= 0 && from.money() >= 0)) {
    _internal_set_money(from._internal_money());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.day() != 0) {
    _internal_set_day(from._internal_day());
  }
}

void AIPParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tradingpb.AIPParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AIPParams::CopyFrom(const AIPParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tradingpb.AIPParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AIPParams::IsInitialized() const {
  return true;
}

void AIPParams::InternalSwap(AIPParams* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(money_, other->money_);
  swap(type_, other->type_);
  swap(day_, other->day_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AIPParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FeeParams::InitAsDefaultInstance() {
}
class FeeParams::_Internal {
 public:
};

FeeParams::FeeParams()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tradingpb.FeeParams)
}
FeeParams::FeeParams(const FeeParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&percentage_, &from.percentage_,
    static_cast<size_t>(reinterpret_cast<char*>(&maxlimit_) -
    reinterpret_cast<char*>(&percentage_)) + sizeof(maxlimit_));
  // @@protoc_insertion_point(copy_constructor:tradingpb.FeeParams)
}

void FeeParams::SharedCtor() {
  ::memset(&percentage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maxlimit_) -
      reinterpret_cast<char*>(&percentage_)) + sizeof(maxlimit_));
}

FeeParams::~FeeParams() {
  // @@protoc_insertion_point(destructor:tradingpb.FeeParams)
  SharedDtor();
}

void FeeParams::SharedDtor() {
}

void FeeParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FeeParams& FeeParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FeeParams_trading2_2eproto.base);
  return *internal_default_instance();
}


void FeeParams::Clear() {
// @@protoc_insertion_point(message_clear_start:tradingpb.FeeParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&percentage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maxlimit_) -
      reinterpret_cast<char*>(&percentage_)) + sizeof(maxlimit_));
  _internal_metadata_.Clear();
}

const char* FeeParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float percentage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          percentage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float minLimit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          minlimit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float maxLimit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          maxlimit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FeeParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tradingpb.FeeParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float percentage = 1;
  if (!(this->percentage() <= 0 && this->percentage() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_percentage(), target);
  }

  // float minLimit = 2;
  if (!(this->minlimit() <= 0 && this->minlimit() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_minlimit(), target);
  }

  // float maxLimit = 3;
  if (!(this->maxlimit() <= 0 && this->maxlimit() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_maxlimit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tradingpb.FeeParams)
  return target;
}

size_t FeeParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tradingpb.FeeParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float percentage = 1;
  if (!(this->percentage() <= 0 && this->percentage() >= 0)) {
    total_size += 1 + 4;
  }

  // float minLimit = 2;
  if (!(this->minlimit() <= 0 && this->minlimit() >= 0)) {
    total_size += 1 + 4;
  }

  // float maxLimit = 3;
  if (!(this->maxlimit() <= 0 && this->maxlimit() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FeeParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tradingpb.FeeParams)
  GOOGLE_DCHECK_NE(&from, this);
  const FeeParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FeeParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tradingpb.FeeParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tradingpb.FeeParams)
    MergeFrom(*source);
  }
}

void FeeParams::MergeFrom(const FeeParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tradingpb.FeeParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.percentage() <= 0 && from.percentage() >= 0)) {
    _internal_set_percentage(from._internal_percentage());
  }
  if (!(from.minlimit() <= 0 && from.minlimit() >= 0)) {
    _internal_set_minlimit(from._internal_minlimit());
  }
  if (!(from.maxlimit() <= 0 && from.maxlimit() >= 0)) {
    _internal_set_maxlimit(from._internal_maxlimit());
  }
}

void FeeParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tradingpb.FeeParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeeParams::CopyFrom(const FeeParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tradingpb.FeeParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeeParams::IsInitialized() const {
  return true;
}

void FeeParams::InternalSwap(FeeParams* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(percentage_, other->percentage_);
  swap(minlimit_, other->minlimit_);
  swap(maxlimit_, other->maxlimit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FeeParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Strategy::InitAsDefaultInstance() {
  ::tradingpb::_Strategy_default_instance_._instance.get_mutable()->asset_ = const_cast< ::tradingpb::Asset*>(
      ::tradingpb::Asset::internal_default_instance());
  ::tradingpb::_Strategy_default_instance_._instance.get_mutable()->paramsbuy_ = const_cast< ::tradingpb::BuyParams*>(
      ::tradingpb::BuyParams::internal_default_instance());
  ::tradingpb::_Strategy_default_instance_._instance.get_mutable()->paramssell_ = const_cast< ::tradingpb::SellParams*>(
      ::tradingpb::SellParams::internal_default_instance());
  ::tradingpb::_Strategy_default_instance_._instance.get_mutable()->paramsstoploss_ = const_cast< ::tradingpb::StopLossParams*>(
      ::tradingpb::StopLossParams::internal_default_instance());
  ::tradingpb::_Strategy_default_instance_._instance.get_mutable()->paramstakeprofit_ = const_cast< ::tradingpb::TakeProfitParams*>(
      ::tradingpb::TakeProfitParams::internal_default_instance());
  ::tradingpb::_Strategy_default_instance_._instance.get_mutable()->paramsinit_ = const_cast< ::tradingpb::InitParams*>(
      ::tradingpb::InitParams::internal_default_instance());
  ::tradingpb::_Strategy_default_instance_._instance.get_mutable()->paramsaip_ = const_cast< ::tradingpb::AIPParams*>(
      ::tradingpb::AIPParams::internal_default_instance());
  ::tradingpb::_Strategy_default_instance_._instance.get_mutable()->feebuy_ = const_cast< ::tradingpb::FeeParams*>(
      ::tradingpb::FeeParams::internal_default_instance());
  ::tradingpb::_Strategy_default_instance_._instance.get_mutable()->feesell_ = const_cast< ::tradingpb::FeeParams*>(
      ::tradingpb::FeeParams::internal_default_instance());
}
class Strategy::_Internal {
 public:
  static const ::tradingpb::Asset& asset(const Strategy* msg);
  static const ::tradingpb::BuyParams& paramsbuy(const Strategy* msg);
  static const ::tradingpb::SellParams& paramssell(const Strategy* msg);
  static const ::tradingpb::StopLossParams& paramsstoploss(const Strategy* msg);
  static const ::tradingpb::TakeProfitParams& paramstakeprofit(const Strategy* msg);
  static const ::tradingpb::InitParams& paramsinit(const Strategy* msg);
  static const ::tradingpb::AIPParams& paramsaip(const Strategy* msg);
  static const ::tradingpb::FeeParams& feebuy(const Strategy* msg);
  static const ::tradingpb::FeeParams& feesell(const Strategy* msg);
};

const ::tradingpb::Asset&
Strategy::_Internal::asset(const Strategy* msg) {
  return *msg->asset_;
}
const ::tradingpb::BuyParams&
Strategy::_Internal::paramsbuy(const Strategy* msg) {
  return *msg->paramsbuy_;
}
const ::tradingpb::SellParams&
Strategy::_Internal::paramssell(const Strategy* msg) {
  return *msg->paramssell_;
}
const ::tradingpb::StopLossParams&
Strategy::_Internal::paramsstoploss(const Strategy* msg) {
  return *msg->paramsstoploss_;
}
const ::tradingpb::TakeProfitParams&
Strategy::_Internal::paramstakeprofit(const Strategy* msg) {
  return *msg->paramstakeprofit_;
}
const ::tradingpb::InitParams&
Strategy::_Internal::paramsinit(const Strategy* msg) {
  return *msg->paramsinit_;
}
const ::tradingpb::AIPParams&
Strategy::_Internal::paramsaip(const Strategy* msg) {
  return *msg->paramsaip_;
}
const ::tradingpb::FeeParams&
Strategy::_Internal::feebuy(const Strategy* msg) {
  return *msg->feebuy_;
}
const ::tradingpb::FeeParams&
Strategy::_Internal::feesell(const Strategy* msg) {
  return *msg->feesell_;
}
Strategy::Strategy()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tradingpb.Strategy)
}
Strategy::Strategy(const Strategy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      buy_(from.buy_),
      sell_(from.sell_),
      stoploss_(from.stoploss_),
      takeprofit_(from.takeprofit_),
      indicators_(from.indicators_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_title().empty()) {
    title_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  if (from._internal_has_asset()) {
    asset_ = new ::tradingpb::Asset(*from.asset_);
  } else {
    asset_ = nullptr;
  }
  if (from._internal_has_paramsbuy()) {
    paramsbuy_ = new ::tradingpb::BuyParams(*from.paramsbuy_);
  } else {
    paramsbuy_ = nullptr;
  }
  if (from._internal_has_paramssell()) {
    paramssell_ = new ::tradingpb::SellParams(*from.paramssell_);
  } else {
    paramssell_ = nullptr;
  }
  if (from._internal_has_paramsstoploss()) {
    paramsstoploss_ = new ::tradingpb::StopLossParams(*from.paramsstoploss_);
  } else {
    paramsstoploss_ = nullptr;
  }
  if (from._internal_has_paramstakeprofit()) {
    paramstakeprofit_ = new ::tradingpb::TakeProfitParams(*from.paramstakeprofit_);
  } else {
    paramstakeprofit_ = nullptr;
  }
  if (from._internal_has_paramsinit()) {
    paramsinit_ = new ::tradingpb::InitParams(*from.paramsinit_);
  } else {
    paramsinit_ = nullptr;
  }
  if (from._internal_has_paramsaip()) {
    paramsaip_ = new ::tradingpb::AIPParams(*from.paramsaip_);
  } else {
    paramsaip_ = nullptr;
  }
  if (from._internal_has_feebuy()) {
    feebuy_ = new ::tradingpb::FeeParams(*from.feebuy_);
  } else {
    feebuy_ = nullptr;
  }
  if (from._internal_has_feesell()) {
    feesell_ = new ::tradingpb::FeeParams(*from.feesell_);
  } else {
    feesell_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:tradingpb.Strategy)
}

void Strategy::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Strategy_trading2_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&asset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&feesell_) -
      reinterpret_cast<char*>(&asset_)) + sizeof(feesell_));
}

Strategy::~Strategy() {
  // @@protoc_insertion_point(destructor:tradingpb.Strategy)
  SharedDtor();
}

void Strategy::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete asset_;
  if (this != internal_default_instance()) delete paramsbuy_;
  if (this != internal_default_instance()) delete paramssell_;
  if (this != internal_default_instance()) delete paramsstoploss_;
  if (this != internal_default_instance()) delete paramstakeprofit_;
  if (this != internal_default_instance()) delete paramsinit_;
  if (this != internal_default_instance()) delete paramsaip_;
  if (this != internal_default_instance()) delete feebuy_;
  if (this != internal_default_instance()) delete feesell_;
}

void Strategy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Strategy& Strategy::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Strategy_trading2_2eproto.base);
  return *internal_default_instance();
}


void Strategy::Clear() {
// @@protoc_insertion_point(message_clear_start:tradingpb.Strategy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  buy_.Clear();
  sell_.Clear();
  stoploss_.Clear();
  takeprofit_.Clear();
  indicators_.Clear();
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  title_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && asset_ != nullptr) {
    delete asset_;
  }
  asset_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && paramsbuy_ != nullptr) {
    delete paramsbuy_;
  }
  paramsbuy_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && paramssell_ != nullptr) {
    delete paramssell_;
  }
  paramssell_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && paramsstoploss_ != nullptr) {
    delete paramsstoploss_;
  }
  paramsstoploss_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && paramstakeprofit_ != nullptr) {
    delete paramstakeprofit_;
  }
  paramstakeprofit_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && paramsinit_ != nullptr) {
    delete paramsinit_;
  }
  paramsinit_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && paramsaip_ != nullptr) {
    delete paramsaip_;
  }
  paramsaip_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && feebuy_ != nullptr) {
    delete feebuy_;
  }
  feebuy_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && feesell_ != nullptr) {
    delete feesell_;
  }
  feesell_ = nullptr;
  _internal_metadata_.Clear();
}

const char* Strategy::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tradingpb.Strategy.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tradingpb.Asset asset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_asset(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .tradingpb.CtrlCondition buy = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_buy(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .tradingpb.CtrlCondition sell = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sell(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .tradingpb.CtrlCondition stoploss = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stoploss(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .tradingpb.CtrlCondition takeprofit = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_takeprofit(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // .tradingpb.BuyParams paramsBuy = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_paramsbuy(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tradingpb.SellParams paramsSell = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_paramssell(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tradingpb.StopLossParams paramsStopLoss = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_paramsstoploss(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tradingpb.TakeProfitParams paramsTakeProfit = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_paramstakeprofit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tradingpb.InitParams paramsInit = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_paramsinit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tradingpb.AIPParams paramsAIP = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_paramsaip(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string title = 13 [deprecated = true];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tradingpb.Strategy.title"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string indicators = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_indicators();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tradingpb.Strategy.indicators"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else goto handle_unusual;
        continue;
      // .tradingpb.FeeParams feeBuy = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_feebuy(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tradingpb.FeeParams feeSell = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_feesell(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Strategy::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tradingpb.Strategy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tradingpb.Strategy.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .tradingpb.Asset asset = 2;
  if (this->has_asset()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::asset(this), target, stream);
  }

  // repeated .tradingpb.CtrlCondition buy = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_buy_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_buy(i), target, stream);
  }

  // repeated .tradingpb.CtrlCondition sell = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sell_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_sell(i), target, stream);
  }

  // repeated .tradingpb.CtrlCondition stoploss = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stoploss_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_stoploss(i), target, stream);
  }

  // repeated .tradingpb.CtrlCondition takeprofit = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_takeprofit_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_takeprofit(i), target, stream);
  }

  // .tradingpb.BuyParams paramsBuy = 7;
  if (this->has_paramsbuy()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::paramsbuy(this), target, stream);
  }

  // .tradingpb.SellParams paramsSell = 8;
  if (this->has_paramssell()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::paramssell(this), target, stream);
  }

  // .tradingpb.StopLossParams paramsStopLoss = 9;
  if (this->has_paramsstoploss()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::paramsstoploss(this), target, stream);
  }

  // .tradingpb.TakeProfitParams paramsTakeProfit = 10;
  if (this->has_paramstakeprofit()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::paramstakeprofit(this), target, stream);
  }

  // .tradingpb.InitParams paramsInit = 11;
  if (this->has_paramsinit()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::paramsinit(this), target, stream);
  }

  // .tradingpb.AIPParams paramsAIP = 12;
  if (this->has_paramsaip()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::paramsaip(this), target, stream);
  }

  // string title = 13 [deprecated = true];
  if (this->title().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tradingpb.Strategy.title");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_title(), target);
  }

  // repeated string indicators = 14;
  for (int i = 0, n = this->_internal_indicators_size(); i < n; i++) {
    const auto& s = this->_internal_indicators(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tradingpb.Strategy.indicators");
    target = stream->WriteString(14, s, target);
  }

  // .tradingpb.FeeParams feeBuy = 15;
  if (this->has_feebuy()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::feebuy(this), target, stream);
  }

  // .tradingpb.FeeParams feeSell = 16;
  if (this->has_feesell()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::feesell(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tradingpb.Strategy)
  return target;
}

size_t Strategy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tradingpb.Strategy)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tradingpb.CtrlCondition buy = 3;
  total_size += 1UL * this->_internal_buy_size();
  for (const auto& msg : this->buy_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .tradingpb.CtrlCondition sell = 4;
  total_size += 1UL * this->_internal_sell_size();
  for (const auto& msg : this->sell_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .tradingpb.CtrlCondition stoploss = 5;
  total_size += 1UL * this->_internal_stoploss_size();
  for (const auto& msg : this->stoploss_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .tradingpb.CtrlCondition takeprofit = 6;
  total_size += 1UL * this->_internal_takeprofit_size();
  for (const auto& msg : this->takeprofit_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string indicators = 14;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(indicators_.size());
  for (int i = 0, n = indicators_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      indicators_.Get(i));
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string title = 13 [deprecated = true];
  if (this->title().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // .tradingpb.Asset asset = 2;
  if (this->has_asset()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *asset_);
  }

  // .tradingpb.BuyParams paramsBuy = 7;
  if (this->has_paramsbuy()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *paramsbuy_);
  }

  // .tradingpb.SellParams paramsSell = 8;
  if (this->has_paramssell()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *paramssell_);
  }

  // .tradingpb.StopLossParams paramsStopLoss = 9;
  if (this->has_paramsstoploss()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *paramsstoploss_);
  }

  // .tradingpb.TakeProfitParams paramsTakeProfit = 10;
  if (this->has_paramstakeprofit()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *paramstakeprofit_);
  }

  // .tradingpb.InitParams paramsInit = 11;
  if (this->has_paramsinit()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *paramsinit_);
  }

  // .tradingpb.AIPParams paramsAIP = 12;
  if (this->has_paramsaip()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *paramsaip_);
  }

  // .tradingpb.FeeParams feeBuy = 15;
  if (this->has_feebuy()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *feebuy_);
  }

  // .tradingpb.FeeParams feeSell = 16;
  if (this->has_feesell()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *feesell_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Strategy::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tradingpb.Strategy)
  GOOGLE_DCHECK_NE(&from, this);
  const Strategy* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Strategy>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tradingpb.Strategy)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tradingpb.Strategy)
    MergeFrom(*source);
  }
}

void Strategy::MergeFrom(const Strategy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tradingpb.Strategy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  buy_.MergeFrom(from.buy_);
  sell_.MergeFrom(from.sell_);
  stoploss_.MergeFrom(from.stoploss_);
  takeprofit_.MergeFrom(from.takeprofit_);
  indicators_.MergeFrom(from.indicators_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.title().size() > 0) {

    title_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  if (from.has_asset()) {
    _internal_mutable_asset()->::tradingpb::Asset::MergeFrom(from._internal_asset());
  }
  if (from.has_paramsbuy()) {
    _internal_mutable_paramsbuy()->::tradingpb::BuyParams::MergeFrom(from._internal_paramsbuy());
  }
  if (from.has_paramssell()) {
    _internal_mutable_paramssell()->::tradingpb::SellParams::MergeFrom(from._internal_paramssell());
  }
  if (from.has_paramsstoploss()) {
    _internal_mutable_paramsstoploss()->::tradingpb::StopLossParams::MergeFrom(from._internal_paramsstoploss());
  }
  if (from.has_paramstakeprofit()) {
    _internal_mutable_paramstakeprofit()->::tradingpb::TakeProfitParams::MergeFrom(from._internal_paramstakeprofit());
  }
  if (from.has_paramsinit()) {
    _internal_mutable_paramsinit()->::tradingpb::InitParams::MergeFrom(from._internal_paramsinit());
  }
  if (from.has_paramsaip()) {
    _internal_mutable_paramsaip()->::tradingpb::AIPParams::MergeFrom(from._internal_paramsaip());
  }
  if (from.has_feebuy()) {
    _internal_mutable_feebuy()->::tradingpb::FeeParams::MergeFrom(from._internal_feebuy());
  }
  if (from.has_feesell()) {
    _internal_mutable_feesell()->::tradingpb::FeeParams::MergeFrom(from._internal_feesell());
  }
}

void Strategy::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tradingpb.Strategy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Strategy::CopyFrom(const Strategy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tradingpb.Strategy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Strategy::IsInitialized() const {
  return true;
}

void Strategy::InternalSwap(Strategy* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  buy_.InternalSwap(&other->buy_);
  sell_.InternalSwap(&other->sell_);
  stoploss_.InternalSwap(&other->stoploss_);
  takeprofit_.InternalSwap(&other->takeprofit_);
  indicators_.InternalSwap(&other->indicators_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  title_.Swap(&other->title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(asset_, other->asset_);
  swap(paramsbuy_, other->paramsbuy_);
  swap(paramssell_, other->paramssell_);
  swap(paramsstoploss_, other->paramsstoploss_);
  swap(paramstakeprofit_, other->paramstakeprofit_);
  swap(paramsinit_, other->paramsinit_);
  swap(paramsaip_, other->paramsaip_);
  swap(feebuy_, other->feebuy_);
  swap(feesell_, other->feesell_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Strategy::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PNLDataValue::InitAsDefaultInstance() {
}
class PNLDataValue::_Internal {
 public:
};

PNLDataValue::PNLDataValue()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tradingpb.PNLDataValue)
}
PNLDataValue::PNLDataValue(const PNLDataValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      tags_(from.tags_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ts_, &from.ts_,
    static_cast<size_t>(reinterpret_cast<char*>(&drawdown_) -
    reinterpret_cast<char*>(&ts_)) + sizeof(drawdown_));
  // @@protoc_insertion_point(copy_constructor:tradingpb.PNLDataValue)
}

void PNLDataValue::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PNLDataValue_trading2_2eproto.base);
  ::memset(&ts_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&drawdown_) -
      reinterpret_cast<char*>(&ts_)) + sizeof(drawdown_));
}

PNLDataValue::~PNLDataValue() {
  // @@protoc_insertion_point(destructor:tradingpb.PNLDataValue)
  SharedDtor();
}

void PNLDataValue::SharedDtor() {
}

void PNLDataValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PNLDataValue& PNLDataValue::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PNLDataValue_trading2_2eproto.base);
  return *internal_default_instance();
}


void PNLDataValue::Clear() {
// @@protoc_insertion_point(message_clear_start:tradingpb.PNLDataValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tags_.Clear();
  ::memset(&ts_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&drawdown_) -
      reinterpret_cast<char*>(&ts_)) + sizeof(drawdown_));
  _internal_metadata_.Clear();
}

const char* PNLDataValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 ts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float perValue = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          pervalue_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated string tags = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_tags();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tradingpb.PNLDataValue.tags"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // float cost = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          cost_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float volume = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          volume_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float price = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float drawdown = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          drawdown_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PNLDataValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tradingpb.PNLDataValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 ts = 1;
  if (this->ts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_ts(), target);
  }

  // float perValue = 2;
  if (!(this->pervalue() <= 0 && this->pervalue() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_pervalue(), target);
  }

  // repeated string tags = 3;
  for (int i = 0, n = this->_internal_tags_size(); i < n; i++) {
    const auto& s = this->_internal_tags(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tradingpb.PNLDataValue.tags");
    target = stream->WriteString(3, s, target);
  }

  // float cost = 4;
  if (!(this->cost() <= 0 && this->cost() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_cost(), target);
  }

  // float value = 5;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_value(), target);
  }

  // float volume = 6;
  if (!(this->volume() <= 0 && this->volume() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_volume(), target);
  }

  // float price = 7;
  if (!(this->price() <= 0 && this->price() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_price(), target);
  }

  // float drawdown = 8;
  if (!(this->drawdown() <= 0 && this->drawdown() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_drawdown(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tradingpb.PNLDataValue)
  return target;
}

size_t PNLDataValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tradingpb.PNLDataValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string tags = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(tags_.size());
  for (int i = 0, n = tags_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      tags_.Get(i));
  }

  // int64 ts = 1;
  if (this->ts() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ts());
  }

  // float perValue = 2;
  if (!(this->pervalue() <= 0 && this->pervalue() >= 0)) {
    total_size += 1 + 4;
  }

  // float cost = 4;
  if (!(this->cost() <= 0 && this->cost() >= 0)) {
    total_size += 1 + 4;
  }

  // float value = 5;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    total_size += 1 + 4;
  }

  // float volume = 6;
  if (!(this->volume() <= 0 && this->volume() >= 0)) {
    total_size += 1 + 4;
  }

  // float price = 7;
  if (!(this->price() <= 0 && this->price() >= 0)) {
    total_size += 1 + 4;
  }

  // float drawdown = 8;
  if (!(this->drawdown() <= 0 && this->drawdown() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PNLDataValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tradingpb.PNLDataValue)
  GOOGLE_DCHECK_NE(&from, this);
  const PNLDataValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PNLDataValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tradingpb.PNLDataValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tradingpb.PNLDataValue)
    MergeFrom(*source);
  }
}

void PNLDataValue::MergeFrom(const PNLDataValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tradingpb.PNLDataValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tags_.MergeFrom(from.tags_);
  if (from.ts() != 0) {
    _internal_set_ts(from._internal_ts());
  }
  if (!(from.pervalue() <= 0 && from.pervalue() >= 0)) {
    _internal_set_pervalue(from._internal_pervalue());
  }
  if (!(from.cost() <= 0 && from.cost() >= 0)) {
    _internal_set_cost(from._internal_cost());
  }
  if (!(from.value() <= 0 && from.value() >= 0)) {
    _internal_set_value(from._internal_value());
  }
  if (!(from.volume() <= 0 && from.volume() >= 0)) {
    _internal_set_volume(from._internal_volume());
  }
  if (!(from.price() <= 0 && from.price() >= 0)) {
    _internal_set_price(from._internal_price());
  }
  if (!(from.drawdown() <= 0 && from.drawdown() >= 0)) {
    _internal_set_drawdown(from._internal_drawdown());
  }
}

void PNLDataValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tradingpb.PNLDataValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PNLDataValue::CopyFrom(const PNLDataValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tradingpb.PNLDataValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PNLDataValue::IsInitialized() const {
  return true;
}

void PNLDataValue::InternalSwap(PNLDataValue* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tags_.InternalSwap(&other->tags_);
  swap(ts_, other->ts_);
  swap(pervalue_, other->pervalue_);
  swap(cost_, other->cost_);
  swap(value_, other->value_);
  swap(volume_, other->volume_);
  swap(price_, other->price_);
  swap(drawdown_, other->drawdown_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PNLDataValue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PNLAssetData::InitAsDefaultInstance() {
  ::tradingpb::_PNLAssetData_default_instance_._instance.get_mutable()->asset_ = const_cast< ::tradingpb::Asset*>(
      ::tradingpb::Asset::internal_default_instance());
}
class PNLAssetData::_Internal {
 public:
  static const ::tradingpb::Asset& asset(const PNLAssetData* msg);
};

const ::tradingpb::Asset&
PNLAssetData::_Internal::asset(const PNLAssetData* msg) {
  return *msg->asset_;
}
PNLAssetData::PNLAssetData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tradingpb.PNLAssetData)
}
PNLAssetData::PNLAssetData(const PNLAssetData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      values_(from.values_),
      lstctrl_(from.lstctrl_),
      indicators_(from.indicators_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_asset()) {
    asset_ = new ::tradingpb::Asset(*from.asset_);
  } else {
    asset_ = nullptr;
  }
  ::memcpy(&maxdrawdownstartts_, &from.maxdrawdownstartts_,
    static_cast<size_t>(reinterpret_cast<char*>(&wintimes_) -
    reinterpret_cast<char*>(&maxdrawdownstartts_)) + sizeof(wintimes_));
  // @@protoc_insertion_point(copy_constructor:tradingpb.PNLAssetData)
}

void PNLAssetData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PNLAssetData_trading2_2eproto.base);
  ::memset(&asset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&wintimes_) -
      reinterpret_cast<char*>(&asset_)) + sizeof(wintimes_));
}

PNLAssetData::~PNLAssetData() {
  // @@protoc_insertion_point(destructor:tradingpb.PNLAssetData)
  SharedDtor();
}

void PNLAssetData::SharedDtor() {
  if (this != internal_default_instance()) delete asset_;
}

void PNLAssetData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PNLAssetData& PNLAssetData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PNLAssetData_trading2_2eproto.base);
  return *internal_default_instance();
}


void PNLAssetData::Clear() {
// @@protoc_insertion_point(message_clear_start:tradingpb.PNLAssetData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  lstctrl_.Clear();
  indicators_.Clear();
  if (GetArenaNoVirtual() == nullptr && asset_ != nullptr) {
    delete asset_;
  }
  asset_ = nullptr;
  ::memset(&maxdrawdownstartts_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&wintimes_) -
      reinterpret_cast<char*>(&maxdrawdownstartts_)) + sizeof(wintimes_));
  _internal_metadata_.Clear();
}

const char* PNLAssetData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .tradingpb.Asset asset = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_asset(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .tradingpb.PNLDataValue values = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // float maxDrawdown = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          maxdrawdown_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int64 maxDrawdownStartTs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          maxdrawdownstartts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 maxDrawdownEndTs = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          maxdrawdownendts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float maxDrawup = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          maxdrawup_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int64 maxDrawupStartTs = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          maxdrawupstartts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 maxDrawupEndTs = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          maxdrawupendts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float sharpe = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          sharpe_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float annualizedReturns = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          annualizedreturns_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float annualizedVolatility = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          annualizedvolatility_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float totalReturns = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          totalreturns_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float variance = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          variance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 buyTimes = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          buytimes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 sellTimes = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          selltimes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 stoplossTimes = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          stoplosstimes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 maxUpDayTs = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          maxupdayts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float maxPerUpDay = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 149)) {
          maxperupday_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int64 maxDownDayTs = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          maxdowndayts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float maxPerDownDay = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 165)) {
          maxperdownday_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int64 maxUpWeekTs = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          maxupweekts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float maxPerUpWeek = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 181)) {
          maxperupweek_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int64 maxDownWeekTs = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          maxdownweekts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float maxPerDownWeek = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 197)) {
          maxperdownweek_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int64 maxUpMonthTs = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          maxupmonthts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float maxPerUpMonth = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 213)) {
          maxperupmonth_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int64 maxDownMonthTs = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          maxdownmonthts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float maxPerDownMonth = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 229)) {
          maxperdownmonth_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int64 maxUpYearTs = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          maxupyearts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float maxPerUpYear = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 245)) {
          maxperupyear_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int64 maxDownYearTs = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          maxdownyearts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float maxPerDownYear = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 5)) {
          maxperdownyear_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated .tradingpb.CtrlNode lstCtrl = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_lstctrl(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<266>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .tradingpb.Indicator indicators = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_indicators(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<274>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 winTimes = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          wintimes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PNLAssetData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tradingpb.PNLAssetData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tradingpb.Asset asset = 1;
  if (this->has_asset()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::asset(this), target, stream);
  }

  // repeated .tradingpb.PNLDataValue values = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_values_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_values(i), target, stream);
  }

  // float maxDrawdown = 3;
  if (!(this->maxdrawdown() <= 0 && this->maxdrawdown() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_maxdrawdown(), target);
  }

  // int64 maxDrawdownStartTs = 4;
  if (this->maxdrawdownstartts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_maxdrawdownstartts(), target);
  }

  // int64 maxDrawdownEndTs = 5;
  if (this->maxdrawdownendts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_maxdrawdownendts(), target);
  }

  // float maxDrawup = 6;
  if (!(this->maxdrawup() <= 0 && this->maxdrawup() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_maxdrawup(), target);
  }

  // int64 maxDrawupStartTs = 7;
  if (this->maxdrawupstartts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_maxdrawupstartts(), target);
  }

  // int64 maxDrawupEndTs = 8;
  if (this->maxdrawupendts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_maxdrawupendts(), target);
  }

  // float sharpe = 9;
  if (!(this->sharpe() <= 0 && this->sharpe() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_sharpe(), target);
  }

  // float annualizedReturns = 10;
  if (!(this->annualizedreturns() <= 0 && this->annualizedreturns() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_annualizedreturns(), target);
  }

  // float annualizedVolatility = 11;
  if (!(this->annualizedvolatility() <= 0 && this->annualizedvolatility() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_annualizedvolatility(), target);
  }

  // float totalReturns = 12;
  if (!(this->totalreturns() <= 0 && this->totalreturns() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_totalreturns(), target);
  }

  // float variance = 13;
  if (!(this->variance() <= 0 && this->variance() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->_internal_variance(), target);
  }

  // int32 buyTimes = 14;
  if (this->buytimes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_buytimes(), target);
  }

  // int32 sellTimes = 15;
  if (this->selltimes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_selltimes(), target);
  }

  // int32 stoplossTimes = 16;
  if (this->stoplosstimes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(16, this->_internal_stoplosstimes(), target);
  }

  // int64 maxUpDayTs = 17;
  if (this->maxupdayts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(17, this->_internal_maxupdayts(), target);
  }

  // float maxPerUpDay = 18;
  if (!(this->maxperupday() <= 0 && this->maxperupday() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(18, this->_internal_maxperupday(), target);
  }

  // int64 maxDownDayTs = 19;
  if (this->maxdowndayts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(19, this->_internal_maxdowndayts(), target);
  }

  // float maxPerDownDay = 20;
  if (!(this->maxperdownday() <= 0 && this->maxperdownday() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(20, this->_internal_maxperdownday(), target);
  }

  // int64 maxUpWeekTs = 21;
  if (this->maxupweekts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(21, this->_internal_maxupweekts(), target);
  }

  // float maxPerUpWeek = 22;
  if (!(this->maxperupweek() <= 0 && this->maxperupweek() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(22, this->_internal_maxperupweek(), target);
  }

  // int64 maxDownWeekTs = 23;
  if (this->maxdownweekts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(23, this->_internal_maxdownweekts(), target);
  }

  // float maxPerDownWeek = 24;
  if (!(this->maxperdownweek() <= 0 && this->maxperdownweek() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(24, this->_internal_maxperdownweek(), target);
  }

  // int64 maxUpMonthTs = 25;
  if (this->maxupmonthts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(25, this->_internal_maxupmonthts(), target);
  }

  // float maxPerUpMonth = 26;
  if (!(this->maxperupmonth() <= 0 && this->maxperupmonth() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(26, this->_internal_maxperupmonth(), target);
  }

  // int64 maxDownMonthTs = 27;
  if (this->maxdownmonthts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(27, this->_internal_maxdownmonthts(), target);
  }

  // float maxPerDownMonth = 28;
  if (!(this->maxperdownmonth() <= 0 && this->maxperdownmonth() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(28, this->_internal_maxperdownmonth(), target);
  }

  // int64 maxUpYearTs = 29;
  if (this->maxupyearts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(29, this->_internal_maxupyearts(), target);
  }

  // float maxPerUpYear = 30;
  if (!(this->maxperupyear() <= 0 && this->maxperupyear() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(30, this->_internal_maxperupyear(), target);
  }

  // int64 maxDownYearTs = 31;
  if (this->maxdownyearts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(31, this->_internal_maxdownyearts(), target);
  }

  // float maxPerDownYear = 32;
  if (!(this->maxperdownyear() <= 0 && this->maxperdownyear() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(32, this->_internal_maxperdownyear(), target);
  }

  // repeated .tradingpb.CtrlNode lstCtrl = 33;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_lstctrl_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(33, this->_internal_lstctrl(i), target, stream);
  }

  // repeated .tradingpb.Indicator indicators = 34;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_indicators_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(34, this->_internal_indicators(i), target, stream);
  }

  // int32 winTimes = 35;
  if (this->wintimes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(35, this->_internal_wintimes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tradingpb.PNLAssetData)
  return target;
}

size_t PNLAssetData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tradingpb.PNLAssetData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tradingpb.PNLDataValue values = 2;
  total_size += 1UL * this->_internal_values_size();
  for (const auto& msg : this->values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .tradingpb.CtrlNode lstCtrl = 33;
  total_size += 2UL * this->_internal_lstctrl_size();
  for (const auto& msg : this->lstctrl_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .tradingpb.Indicator indicators = 34;
  total_size += 2UL * this->_internal_indicators_size();
  for (const auto& msg : this->indicators_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .tradingpb.Asset asset = 1;
  if (this->has_asset()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *asset_);
  }

  // int64 maxDrawdownStartTs = 4;
  if (this->maxdrawdownstartts() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_maxdrawdownstartts());
  }

  // float maxDrawdown = 3;
  if (!(this->maxdrawdown() <= 0 && this->maxdrawdown() >= 0)) {
    total_size += 1 + 4;
  }

  // float maxDrawup = 6;
  if (!(this->maxdrawup() <= 0 && this->maxdrawup() >= 0)) {
    total_size += 1 + 4;
  }

  // int64 maxDrawdownEndTs = 5;
  if (this->maxdrawdownendts() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_maxdrawdownendts());
  }

  // int64 maxDrawupStartTs = 7;
  if (this->maxdrawupstartts() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_maxdrawupstartts());
  }

  // int64 maxDrawupEndTs = 8;
  if (this->maxdrawupendts() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_maxdrawupendts());
  }

  // float sharpe = 9;
  if (!(this->sharpe() <= 0 && this->sharpe() >= 0)) {
    total_size += 1 + 4;
  }

  // float annualizedReturns = 10;
  if (!(this->annualizedreturns() <= 0 && this->annualizedreturns() >= 0)) {
    total_size += 1 + 4;
  }

  // float annualizedVolatility = 11;
  if (!(this->annualizedvolatility() <= 0 && this->annualizedvolatility() >= 0)) {
    total_size += 1 + 4;
  }

  // float totalReturns = 12;
  if (!(this->totalreturns() <= 0 && this->totalreturns() >= 0)) {
    total_size += 1 + 4;
  }

  // float variance = 13;
  if (!(this->variance() <= 0 && this->variance() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 buyTimes = 14;
  if (this->buytimes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_buytimes());
  }

  // int32 sellTimes = 15;
  if (this->selltimes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_selltimes());
  }

  // int32 stoplossTimes = 16;
  if (this->stoplosstimes() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_stoplosstimes());
  }

  // int64 maxUpDayTs = 17;
  if (this->maxupdayts() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_maxupdayts());
  }

  // int64 maxDownDayTs = 19;
  if (this->maxdowndayts() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_maxdowndayts());
  }

  // float maxPerUpDay = 18;
  if (!(this->maxperupday() <= 0 && this->maxperupday() >= 0)) {
    total_size += 2 + 4;
  }

  // float maxPerDownDay = 20;
  if (!(this->maxperdownday() <= 0 && this->maxperdownday() >= 0)) {
    total_size += 2 + 4;
  }

  // int64 maxUpWeekTs = 21;
  if (this->maxupweekts() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_maxupweekts());
  }

  // int64 maxDownWeekTs = 23;
  if (this->maxdownweekts() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_maxdownweekts());
  }

  // float maxPerUpWeek = 22;
  if (!(this->maxperupweek() <= 0 && this->maxperupweek() >= 0)) {
    total_size += 2 + 4;
  }

  // float maxPerDownWeek = 24;
  if (!(this->maxperdownweek() <= 0 && this->maxperdownweek() >= 0)) {
    total_size += 2 + 4;
  }

  // int64 maxUpMonthTs = 25;
  if (this->maxupmonthts() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_maxupmonthts());
  }

  // int64 maxDownMonthTs = 27;
  if (this->maxdownmonthts() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_maxdownmonthts());
  }

  // float maxPerUpMonth = 26;
  if (!(this->maxperupmonth() <= 0 && this->maxperupmonth() >= 0)) {
    total_size += 2 + 4;
  }

  // float maxPerDownMonth = 28;
  if (!(this->maxperdownmonth() <= 0 && this->maxperdownmonth() >= 0)) {
    total_size += 2 + 4;
  }

  // int64 maxUpYearTs = 29;
  if (this->maxupyearts() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_maxupyearts());
  }

  // int64 maxDownYearTs = 31;
  if (this->maxdownyearts() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_maxdownyearts());
  }

  // float maxPerUpYear = 30;
  if (!(this->maxperupyear() <= 0 && this->maxperupyear() >= 0)) {
    total_size += 2 + 4;
  }

  // float maxPerDownYear = 32;
  if (!(this->maxperdownyear() <= 0 && this->maxperdownyear() >= 0)) {
    total_size += 2 + 4;
  }

  // int32 winTimes = 35;
  if (this->wintimes() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_wintimes());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PNLAssetData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tradingpb.PNLAssetData)
  GOOGLE_DCHECK_NE(&from, this);
  const PNLAssetData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PNLAssetData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tradingpb.PNLAssetData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tradingpb.PNLAssetData)
    MergeFrom(*source);
  }
}

void PNLAssetData::MergeFrom(const PNLAssetData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tradingpb.PNLAssetData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
  lstctrl_.MergeFrom(from.lstctrl_);
  indicators_.MergeFrom(from.indicators_);
  if (from.has_asset()) {
    _internal_mutable_asset()->::tradingpb::Asset::MergeFrom(from._internal_asset());
  }
  if (from.maxdrawdownstartts() != 0) {
    _internal_set_maxdrawdownstartts(from._internal_maxdrawdownstartts());
  }
  if (!(from.maxdrawdown() <= 0 && from.maxdrawdown() >= 0)) {
    _internal_set_maxdrawdown(from._internal_maxdrawdown());
  }
  if (!(from.maxdrawup() <= 0 && from.maxdrawup() >= 0)) {
    _internal_set_maxdrawup(from._internal_maxdrawup());
  }
  if (from.maxdrawdownendts() != 0) {
    _internal_set_maxdrawdownendts(from._internal_maxdrawdownendts());
  }
  if (from.maxdrawupstartts() != 0) {
    _internal_set_maxdrawupstartts(from._internal_maxdrawupstartts());
  }
  if (from.maxdrawupendts() != 0) {
    _internal_set_maxdrawupendts(from._internal_maxdrawupendts());
  }
  if (!(from.sharpe() <= 0 && from.sharpe() >= 0)) {
    _internal_set_sharpe(from._internal_sharpe());
  }
  if (!(from.annualizedreturns() <= 0 && from.annualizedreturns() >= 0)) {
    _internal_set_annualizedreturns(from._internal_annualizedreturns());
  }
  if (!(from.annualizedvolatility() <= 0 && from.annualizedvolatility() >= 0)) {
    _internal_set_annualizedvolatility(from._internal_annualizedvolatility());
  }
  if (!(from.totalreturns() <= 0 && from.totalreturns() >= 0)) {
    _internal_set_totalreturns(from._internal_totalreturns());
  }
  if (!(from.variance() <= 0 && from.variance() >= 0)) {
    _internal_set_variance(from._internal_variance());
  }
  if (from.buytimes() != 0) {
    _internal_set_buytimes(from._internal_buytimes());
  }
  if (from.selltimes() != 0) {
    _internal_set_selltimes(from._internal_selltimes());
  }
  if (from.stoplosstimes() != 0) {
    _internal_set_stoplosstimes(from._internal_stoplosstimes());
  }
  if (from.maxupdayts() != 0) {
    _internal_set_maxupdayts(from._internal_maxupdayts());
  }
  if (from.maxdowndayts() != 0) {
    _internal_set_maxdowndayts(from._internal_maxdowndayts());
  }
  if (!(from.maxperupday() <= 0 && from.maxperupday() >= 0)) {
    _internal_set_maxperupday(from._internal_maxperupday());
  }
  if (!(from.maxperdownday() <= 0 && from.maxperdownday() >= 0)) {
    _internal_set_maxperdownday(from._internal_maxperdownday());
  }
  if (from.maxupweekts() != 0) {
    _internal_set_maxupweekts(from._internal_maxupweekts());
  }
  if (from.maxdownweekts() != 0) {
    _internal_set_maxdownweekts(from._internal_maxdownweekts());
  }
  if (!(from.maxperupweek() <= 0 && from.maxperupweek() >= 0)) {
    _internal_set_maxperupweek(from._internal_maxperupweek());
  }
  if (!(from.maxperdownweek() <= 0 && from.maxperdownweek() >= 0)) {
    _internal_set_maxperdownweek(from._internal_maxperdownweek());
  }
  if (from.maxupmonthts() != 0) {
    _internal_set_maxupmonthts(from._internal_maxupmonthts());
  }
  if (from.maxdownmonthts() != 0) {
    _internal_set_maxdownmonthts(from._internal_maxdownmonthts());
  }
  if (!(from.maxperupmonth() <= 0 && from.maxperupmonth() >= 0)) {
    _internal_set_maxperupmonth(from._internal_maxperupmonth());
  }
  if (!(from.maxperdownmonth() <= 0 && from.maxperdownmonth() >= 0)) {
    _internal_set_maxperdownmonth(from._internal_maxperdownmonth());
  }
  if (from.maxupyearts() != 0) {
    _internal_set_maxupyearts(from._internal_maxupyearts());
  }
  if (from.maxdownyearts() != 0) {
    _internal_set_maxdownyearts(from._internal_maxdownyearts());
  }
  if (!(from.maxperupyear() <= 0 && from.maxperupyear() >= 0)) {
    _internal_set_maxperupyear(from._internal_maxperupyear());
  }
  if (!(from.maxperdownyear() <= 0 && from.maxperdownyear() >= 0)) {
    _internal_set_maxperdownyear(from._internal_maxperdownyear());
  }
  if (from.wintimes() != 0) {
    _internal_set_wintimes(from._internal_wintimes());
  }
}

void PNLAssetData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tradingpb.PNLAssetData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PNLAssetData::CopyFrom(const PNLAssetData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tradingpb.PNLAssetData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PNLAssetData::IsInitialized() const {
  return true;
}

void PNLAssetData::InternalSwap(PNLAssetData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  values_.InternalSwap(&other->values_);
  lstctrl_.InternalSwap(&other->lstctrl_);
  indicators_.InternalSwap(&other->indicators_);
  swap(asset_, other->asset_);
  swap(maxdrawdownstartts_, other->maxdrawdownstartts_);
  swap(maxdrawdown_, other->maxdrawdown_);
  swap(maxdrawup_, other->maxdrawup_);
  swap(maxdrawdownendts_, other->maxdrawdownendts_);
  swap(maxdrawupstartts_, other->maxdrawupstartts_);
  swap(maxdrawupendts_, other->maxdrawupendts_);
  swap(sharpe_, other->sharpe_);
  swap(annualizedreturns_, other->annualizedreturns_);
  swap(annualizedvolatility_, other->annualizedvolatility_);
  swap(totalreturns_, other->totalreturns_);
  swap(variance_, other->variance_);
  swap(buytimes_, other->buytimes_);
  swap(selltimes_, other->selltimes_);
  swap(stoplosstimes_, other->stoplosstimes_);
  swap(maxupdayts_, other->maxupdayts_);
  swap(maxdowndayts_, other->maxdowndayts_);
  swap(maxperupday_, other->maxperupday_);
  swap(maxperdownday_, other->maxperdownday_);
  swap(maxupweekts_, other->maxupweekts_);
  swap(maxdownweekts_, other->maxdownweekts_);
  swap(maxperupweek_, other->maxperupweek_);
  swap(maxperdownweek_, other->maxperdownweek_);
  swap(maxupmonthts_, other->maxupmonthts_);
  swap(maxdownmonthts_, other->maxdownmonthts_);
  swap(maxperupmonth_, other->maxperupmonth_);
  swap(maxperdownmonth_, other->maxperdownmonth_);
  swap(maxupyearts_, other->maxupyearts_);
  swap(maxdownyearts_, other->maxdownyearts_);
  swap(maxperupyear_, other->maxperupyear_);
  swap(maxperdownyear_, other->maxperdownyear_);
  swap(wintimes_, other->wintimes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PNLAssetData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PNLData::InitAsDefaultInstance() {
  ::tradingpb::_PNLData_default_instance_._instance.get_mutable()->total_ = const_cast< ::tradingpb::PNLAssetData*>(
      ::tradingpb::PNLAssetData::internal_default_instance());
}
class PNLData::_Internal {
 public:
  static const ::tradingpb::PNLAssetData& total(const PNLData* msg);
};

const ::tradingpb::PNLAssetData&
PNLData::_Internal::total(const PNLData* msg) {
  return *msg->total_;
}
PNLData::PNLData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tradingpb.PNLData)
}
PNLData::PNLData(const PNLData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      assets_(from.assets_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_title().empty()) {
    title_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  if (from._internal_has_total()) {
    total_ = new ::tradingpb::PNLAssetData(*from.total_);
  } else {
    total_ = nullptr;
  }
  lastts_ = from.lastts_;
  // @@protoc_insertion_point(copy_constructor:tradingpb.PNLData)
}

void PNLData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PNLData_trading2_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&total_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lastts_) -
      reinterpret_cast<char*>(&total_)) + sizeof(lastts_));
}

PNLData::~PNLData() {
  // @@protoc_insertion_point(destructor:tradingpb.PNLData)
  SharedDtor();
}

void PNLData::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete total_;
}

void PNLData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PNLData& PNLData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PNLData_trading2_2eproto.base);
  return *internal_default_instance();
}


void PNLData::Clear() {
// @@protoc_insertion_point(message_clear_start:tradingpb.PNLData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  assets_.Clear();
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  title_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && total_ != nullptr) {
    delete total_;
  }
  total_ = nullptr;
  lastts_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* PNLData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tradingpb.PNLData.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tradingpb.PNLAssetData total = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_total(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .tradingpb.PNLAssetData assets = 3 [deprecated = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_assets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // string title = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tradingpb.PNLData.title"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 lastts = 5 [deprecated = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          lastts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PNLData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tradingpb.PNLData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [deprecated = true];
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tradingpb.PNLData.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .tradingpb.PNLAssetData total = 2;
  if (this->has_total()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::total(this), target, stream);
  }

  // repeated .tradingpb.PNLAssetData assets = 3 [deprecated = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_assets_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_assets(i), target, stream);
  }

  // string title = 4;
  if (this->title().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tradingpb.PNLData.title");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_title(), target);
  }

  // int64 lastts = 5 [deprecated = true];
  if (this->lastts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_lastts(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tradingpb.PNLData)
  return target;
}

size_t PNLData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tradingpb.PNLData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tradingpb.PNLAssetData assets = 3 [deprecated = true];
  total_size += 1UL * this->_internal_assets_size();
  for (const auto& msg : this->assets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1 [deprecated = true];
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string title = 4;
  if (this->title().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // .tradingpb.PNLAssetData total = 2;
  if (this->has_total()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *total_);
  }

  // int64 lastts = 5 [deprecated = true];
  if (this->lastts() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_lastts());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PNLData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tradingpb.PNLData)
  GOOGLE_DCHECK_NE(&from, this);
  const PNLData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PNLData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tradingpb.PNLData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tradingpb.PNLData)
    MergeFrom(*source);
  }
}

void PNLData::MergeFrom(const PNLData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tradingpb.PNLData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  assets_.MergeFrom(from.assets_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.title().size() > 0) {

    title_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  if (from.has_total()) {
    _internal_mutable_total()->::tradingpb::PNLAssetData::MergeFrom(from._internal_total());
  }
  if (from.lastts() != 0) {
    _internal_set_lastts(from._internal_lastts());
  }
}

void PNLData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tradingpb.PNLData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PNLData::CopyFrom(const PNLData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tradingpb.PNLData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PNLData::IsInitialized() const {
  return true;
}

void PNLData::InternalSwap(PNLData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  assets_.InternalSwap(&other->assets_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  title_.Swap(&other->title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(total_, other->total_);
  swap(lastts_, other->lastts_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PNLData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SimTradingParams::InitAsDefaultInstance() {
  ::tradingpb::_SimTradingParams_default_instance_._instance.get_mutable()->wallet_ = const_cast< ::tradingpb::Wallet*>(
      ::tradingpb::Wallet::internal_default_instance());
}
class SimTradingParams::_Internal {
 public:
  static const ::tradingpb::Wallet& wallet(const SimTradingParams* msg);
};

const ::tradingpb::Wallet&
SimTradingParams::_Internal::wallet(const SimTradingParams* msg) {
  return *msg->wallet_;
}
SimTradingParams::SimTradingParams()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tradingpb.SimTradingParams)
}
SimTradingParams::SimTradingParams(const SimTradingParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      assets_(from.assets_),
      baselines_(from.baselines_),
      strategies_(from.strategies_),
      indicators_(from.indicators_),
      candles_(from.candles_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_title().empty()) {
    title_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  if (from._internal_has_wallet()) {
    wallet_ = new ::tradingpb::Wallet(*from.wallet_);
  } else {
    wallet_ = nullptr;
  }
  ::memcpy(&startts_, &from.startts_,
    static_cast<size_t>(reinterpret_cast<char*>(&offset_) -
    reinterpret_cast<char*>(&startts_)) + sizeof(offset_));
  // @@protoc_insertion_point(copy_constructor:tradingpb.SimTradingParams)
}

void SimTradingParams::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SimTradingParams_trading2_2eproto.base);
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&wallet_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&offset_) -
      reinterpret_cast<char*>(&wallet_)) + sizeof(offset_));
}

SimTradingParams::~SimTradingParams() {
  // @@protoc_insertion_point(destructor:tradingpb.SimTradingParams)
  SharedDtor();
}

void SimTradingParams::SharedDtor() {
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete wallet_;
}

void SimTradingParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SimTradingParams& SimTradingParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SimTradingParams_trading2_2eproto.base);
  return *internal_default_instance();
}


void SimTradingParams::Clear() {
// @@protoc_insertion_point(message_clear_start:tradingpb.SimTradingParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  assets_.Clear();
  baselines_.Clear();
  strategies_.Clear();
  indicators_.Clear();
  candles_.Clear();
  title_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && wallet_ != nullptr) {
    delete wallet_;
  }
  wallet_ = nullptr;
  ::memset(&startts_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&offset_) -
      reinterpret_cast<char*>(&startts_)) + sizeof(offset_));
  _internal_metadata_.Clear();
}

const char* SimTradingParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .tradingpb.Asset assets = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_assets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .tradingpb.Asset baselines = 2 [deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_baselines(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // int64 startTs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          startts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 endTs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          endts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .tradingpb.Strategy strategies = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_strategies(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // .tradingpb.Wallet wallet = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_wallet(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string title = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tradingpb.SimTradingParams.title"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 mainAssetIndex = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          mainassetindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string indicators = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_indicators();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tradingpb.SimTradingParams.indicators"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 offset = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .tradingpb.Candles candles = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_candles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SimTradingParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tradingpb.SimTradingParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tradingpb.Asset assets = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_assets_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_assets(i), target, stream);
  }

  // repeated .tradingpb.Asset baselines = 2 [deprecated = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_baselines_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_baselines(i), target, stream);
  }

  // int64 startTs = 3;
  if (this->startts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_startts(), target);
  }

  // int64 endTs = 4;
  if (this->endts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_endts(), target);
  }

  // repeated .tradingpb.Strategy strategies = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_strategies_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_strategies(i), target, stream);
  }

  // .tradingpb.Wallet wallet = 6;
  if (this->has_wallet()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::wallet(this), target, stream);
  }

  // string title = 7;
  if (this->title().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tradingpb.SimTradingParams.title");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_title(), target);
  }

  // int32 mainAssetIndex = 8;
  if (this->mainassetindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_mainassetindex(), target);
  }

  // repeated string indicators = 9;
  for (int i = 0, n = this->_internal_indicators_size(); i < n; i++) {
    const auto& s = this->_internal_indicators(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tradingpb.SimTradingParams.indicators");
    target = stream->WriteString(9, s, target);
  }

  // int32 offset = 10;
  if (this->offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_offset(), target);
  }

  // repeated .tradingpb.Candles candles = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_candles_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_candles(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tradingpb.SimTradingParams)
  return target;
}

size_t SimTradingParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tradingpb.SimTradingParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tradingpb.Asset assets = 1;
  total_size += 1UL * this->_internal_assets_size();
  for (const auto& msg : this->assets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .tradingpb.Asset baselines = 2 [deprecated = true];
  total_size += 1UL * this->_internal_baselines_size();
  for (const auto& msg : this->baselines_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .tradingpb.Strategy strategies = 5;
  total_size += 1UL * this->_internal_strategies_size();
  for (const auto& msg : this->strategies_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string indicators = 9;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(indicators_.size());
  for (int i = 0, n = indicators_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      indicators_.Get(i));
  }

  // repeated .tradingpb.Candles candles = 11;
  total_size += 1UL * this->_internal_candles_size();
  for (const auto& msg : this->candles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string title = 7;
  if (this->title().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // .tradingpb.Wallet wallet = 6;
  if (this->has_wallet()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *wallet_);
  }

  // int64 startTs = 3;
  if (this->startts() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_startts());
  }

  // int64 endTs = 4;
  if (this->endts() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_endts());
  }

  // int32 mainAssetIndex = 8;
  if (this->mainassetindex() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mainassetindex());
  }

  // int32 offset = 10;
  if (this->offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_offset());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SimTradingParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tradingpb.SimTradingParams)
  GOOGLE_DCHECK_NE(&from, this);
  const SimTradingParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SimTradingParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tradingpb.SimTradingParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tradingpb.SimTradingParams)
    MergeFrom(*source);
  }
}

void SimTradingParams::MergeFrom(const SimTradingParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tradingpb.SimTradingParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  assets_.MergeFrom(from.assets_);
  baselines_.MergeFrom(from.baselines_);
  strategies_.MergeFrom(from.strategies_);
  indicators_.MergeFrom(from.indicators_);
  candles_.MergeFrom(from.candles_);
  if (from.title().size() > 0) {

    title_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  if (from.has_wallet()) {
    _internal_mutable_wallet()->::tradingpb::Wallet::MergeFrom(from._internal_wallet());
  }
  if (from.startts() != 0) {
    _internal_set_startts(from._internal_startts());
  }
  if (from.endts() != 0) {
    _internal_set_endts(from._internal_endts());
  }
  if (from.mainassetindex() != 0) {
    _internal_set_mainassetindex(from._internal_mainassetindex());
  }
  if (from.offset() != 0) {
    _internal_set_offset(from._internal_offset());
  }
}

void SimTradingParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tradingpb.SimTradingParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimTradingParams::CopyFrom(const SimTradingParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tradingpb.SimTradingParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimTradingParams::IsInitialized() const {
  return true;
}

void SimTradingParams::InternalSwap(SimTradingParams* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  assets_.InternalSwap(&other->assets_);
  baselines_.InternalSwap(&other->baselines_);
  strategies_.InternalSwap(&other->strategies_);
  indicators_.InternalSwap(&other->indicators_);
  candles_.InternalSwap(&other->candles_);
  title_.Swap(&other->title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(wallet_, other->wallet_);
  swap(startts_, other->startts_);
  swap(endts_, other->endts_);
  swap(mainassetindex_, other->mainassetindex_);
  swap(offset_, other->offset_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SimTradingParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TradingNodeInfo::InitAsDefaultInstance() {
}
class TradingNodeInfo::_Internal {
 public:
};

TradingNodeInfo::TradingNodeInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tradingpb.TradingNodeInfo)
}
TradingNodeInfo::TradingNodeInfo(const TradingNodeInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&maxtasks_, &from.maxtasks_,
    static_cast<size_t>(reinterpret_cast<char*>(&curtasks_) -
    reinterpret_cast<char*>(&maxtasks_)) + sizeof(curtasks_));
  // @@protoc_insertion_point(copy_constructor:tradingpb.TradingNodeInfo)
}

void TradingNodeInfo::SharedCtor() {
  ::memset(&maxtasks_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&curtasks_) -
      reinterpret_cast<char*>(&maxtasks_)) + sizeof(curtasks_));
}

TradingNodeInfo::~TradingNodeInfo() {
  // @@protoc_insertion_point(destructor:tradingpb.TradingNodeInfo)
  SharedDtor();
}

void TradingNodeInfo::SharedDtor() {
}

void TradingNodeInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TradingNodeInfo& TradingNodeInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TradingNodeInfo_trading2_2eproto.base);
  return *internal_default_instance();
}


void TradingNodeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:tradingpb.TradingNodeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&maxtasks_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&curtasks_) -
      reinterpret_cast<char*>(&maxtasks_)) + sizeof(curtasks_));
  _internal_metadata_.Clear();
}

const char* TradingNodeInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 maxTasks = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          maxtasks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 curTasks = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          curtasks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TradingNodeInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tradingpb.TradingNodeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 maxTasks = 1;
  if (this->maxtasks() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_maxtasks(), target);
  }

  // int32 curTasks = 2;
  if (this->curtasks() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_curtasks(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tradingpb.TradingNodeInfo)
  return target;
}

size_t TradingNodeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tradingpb.TradingNodeInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 maxTasks = 1;
  if (this->maxtasks() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_maxtasks());
  }

  // int32 curTasks = 2;
  if (this->curtasks() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_curtasks());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TradingNodeInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tradingpb.TradingNodeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const TradingNodeInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TradingNodeInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tradingpb.TradingNodeInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tradingpb.TradingNodeInfo)
    MergeFrom(*source);
  }
}

void TradingNodeInfo::MergeFrom(const TradingNodeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tradingpb.TradingNodeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.maxtasks() != 0) {
    _internal_set_maxtasks(from._internal_maxtasks());
  }
  if (from.curtasks() != 0) {
    _internal_set_curtasks(from._internal_curtasks());
  }
}

void TradingNodeInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tradingpb.TradingNodeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TradingNodeInfo::CopyFrom(const TradingNodeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tradingpb.TradingNodeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradingNodeInfo::IsInitialized() const {
  return true;
}

void TradingNodeInfo::InternalSwap(TradingNodeInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(maxtasks_, other->maxtasks_);
  swap(curtasks_, other->curtasks_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TradingNodeInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SimTradingCacheNode::InitAsDefaultInstance() {
  ::tradingpb::_SimTradingCacheNode_default_instance_._instance.get_mutable()->params_ = const_cast< ::tradingpb::SimTradingParams*>(
      ::tradingpb::SimTradingParams::internal_default_instance());
}
class SimTradingCacheNode::_Internal {
 public:
  static const ::tradingpb::SimTradingParams& params(const SimTradingCacheNode* msg);
};

const ::tradingpb::SimTradingParams&
SimTradingCacheNode::_Internal::params(const SimTradingCacheNode* msg) {
  return *msg->params_;
}
SimTradingCacheNode::SimTradingCacheNode()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tradingpb.SimTradingCacheNode)
}
SimTradingCacheNode::SimTradingCacheNode(const SimTradingCacheNode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hash().empty()) {
    hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  buf_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_buf().empty()) {
    buf_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.buf_);
  }
  if (from._internal_has_params()) {
    params_ = new ::tradingpb::SimTradingParams(*from.params_);
  } else {
    params_ = nullptr;
  }
  lastts_ = from.lastts_;
  // @@protoc_insertion_point(copy_constructor:tradingpb.SimTradingCacheNode)
}

void SimTradingCacheNode::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SimTradingCacheNode_trading2_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  buf_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&params_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lastts_) -
      reinterpret_cast<char*>(&params_)) + sizeof(lastts_));
}

SimTradingCacheNode::~SimTradingCacheNode() {
  // @@protoc_insertion_point(destructor:tradingpb.SimTradingCacheNode)
  SharedDtor();
}

void SimTradingCacheNode::SharedDtor() {
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  buf_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete params_;
}

void SimTradingCacheNode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SimTradingCacheNode& SimTradingCacheNode::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SimTradingCacheNode_trading2_2eproto.base);
  return *internal_default_instance();
}


void SimTradingCacheNode::Clear() {
// @@protoc_insertion_point(message_clear_start:tradingpb.SimTradingCacheNode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  buf_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && params_ != nullptr) {
    delete params_;
  }
  params_ = nullptr;
  lastts_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* SimTradingCacheNode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .tradingpb.SimTradingParams params = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tradingpb.SimTradingCacheNode.key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 lastTs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          lastts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string hash = 4 [deprecated = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tradingpb.SimTradingCacheNode.hash"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes buf = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_buf();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SimTradingCacheNode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tradingpb.SimTradingCacheNode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tradingpb.SimTradingParams params = 1;
  if (this->has_params()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::params(this), target, stream);
  }

  // string key = 2;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tradingpb.SimTradingCacheNode.key");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_key(), target);
  }

  // int64 lastTs = 3;
  if (this->lastts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_lastts(), target);
  }

  // string hash = 4 [deprecated = true];
  if (this->hash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hash().data(), static_cast<int>(this->_internal_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tradingpb.SimTradingCacheNode.hash");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_hash(), target);
  }

  // bytes buf = 5;
  if (this->buf().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_buf(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tradingpb.SimTradingCacheNode)
  return target;
}

size_t SimTradingCacheNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tradingpb.SimTradingCacheNode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 2;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // string hash = 4 [deprecated = true];
  if (this->hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hash());
  }

  // bytes buf = 5;
  if (this->buf().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_buf());
  }

  // .tradingpb.SimTradingParams params = 1;
  if (this->has_params()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *params_);
  }

  // int64 lastTs = 3;
  if (this->lastts() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_lastts());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SimTradingCacheNode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tradingpb.SimTradingCacheNode)
  GOOGLE_DCHECK_NE(&from, this);
  const SimTradingCacheNode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SimTradingCacheNode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tradingpb.SimTradingCacheNode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tradingpb.SimTradingCacheNode)
    MergeFrom(*source);
  }
}

void SimTradingCacheNode::MergeFrom(const SimTradingCacheNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tradingpb.SimTradingCacheNode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.hash().size() > 0) {

    hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  if (from.buf().size() > 0) {

    buf_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.buf_);
  }
  if (from.has_params()) {
    _internal_mutable_params()->::tradingpb::SimTradingParams::MergeFrom(from._internal_params());
  }
  if (from.lastts() != 0) {
    _internal_set_lastts(from._internal_lastts());
  }
}

void SimTradingCacheNode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tradingpb.SimTradingCacheNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimTradingCacheNode::CopyFrom(const SimTradingCacheNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tradingpb.SimTradingCacheNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimTradingCacheNode::IsInitialized() const {
  return true;
}

void SimTradingCacheNode::InternalSwap(SimTradingCacheNode* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  hash_.Swap(&other->hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  buf_.Swap(&other->buf_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(params_, other->params_);
  swap(lastts_, other->lastts_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SimTradingCacheNode::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SimTradingCache::InitAsDefaultInstance() {
}
class SimTradingCache::_Internal {
 public:
};

SimTradingCache::SimTradingCache()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tradingpb.SimTradingCache)
}
SimTradingCache::SimTradingCache(const SimTradingCache& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      nodes_(from.nodes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tradingpb.SimTradingCache)
}

void SimTradingCache::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SimTradingCache_trading2_2eproto.base);
}

SimTradingCache::~SimTradingCache() {
  // @@protoc_insertion_point(destructor:tradingpb.SimTradingCache)
  SharedDtor();
}

void SimTradingCache::SharedDtor() {
}

void SimTradingCache::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SimTradingCache& SimTradingCache::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SimTradingCache_trading2_2eproto.base);
  return *internal_default_instance();
}


void SimTradingCache::Clear() {
// @@protoc_insertion_point(message_clear_start:tradingpb.SimTradingCache)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nodes_.Clear();
  _internal_metadata_.Clear();
}

const char* SimTradingCache::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .tradingpb.SimTradingCacheNode nodes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_nodes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SimTradingCache::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tradingpb.SimTradingCache)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tradingpb.SimTradingCacheNode nodes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_nodes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_nodes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tradingpb.SimTradingCache)
  return target;
}

size_t SimTradingCache::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tradingpb.SimTradingCache)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tradingpb.SimTradingCacheNode nodes = 1;
  total_size += 1UL * this->_internal_nodes_size();
  for (const auto& msg : this->nodes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SimTradingCache::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tradingpb.SimTradingCache)
  GOOGLE_DCHECK_NE(&from, this);
  const SimTradingCache* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SimTradingCache>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tradingpb.SimTradingCache)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tradingpb.SimTradingCache)
    MergeFrom(*source);
  }
}

void SimTradingCache::MergeFrom(const SimTradingCache& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tradingpb.SimTradingCache)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  nodes_.MergeFrom(from.nodes_);
}

void SimTradingCache::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tradingpb.SimTradingCache)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimTradingCache::CopyFrom(const SimTradingCache& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tradingpb.SimTradingCache)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimTradingCache::IsInitialized() const {
  return true;
}

void SimTradingCache::InternalSwap(SimTradingCache* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  nodes_.InternalSwap(&other->nodes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SimTradingCache::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace tradingpb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tradingpb::BasicRequestData* Arena::CreateMaybeMessage< ::tradingpb::BasicRequestData >(Arena* arena) {
  return Arena::CreateInternal< ::tradingpb::BasicRequestData >(arena);
}
template<> PROTOBUF_NOINLINE ::tradingpb::Candle* Arena::CreateMaybeMessage< ::tradingpb::Candle >(Arena* arena) {
  return Arena::CreateInternal< ::tradingpb::Candle >(arena);
}
template<> PROTOBUF_NOINLINE ::tradingpb::Candles_MapCandlesEntry_DoNotUse* Arena::CreateMaybeMessage< ::tradingpb::Candles_MapCandlesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::tradingpb::Candles_MapCandlesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::tradingpb::Candles* Arena::CreateMaybeMessage< ::tradingpb::Candles >(Arena* arena) {
  return Arena::CreateInternal< ::tradingpb::Candles >(arena);
}
template<> PROTOBUF_NOINLINE ::tradingpb::Asset* Arena::CreateMaybeMessage< ::tradingpb::Asset >(Arena* arena) {
  return Arena::CreateInternal< ::tradingpb::Asset >(arena);
}
template<> PROTOBUF_NOINLINE ::tradingpb::CtrlNodeAssetInfo* Arena::CreateMaybeMessage< ::tradingpb::CtrlNodeAssetInfo >(Arena* arena) {
  return Arena::CreateInternal< ::tradingpb::CtrlNodeAssetInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::tradingpb::CtrlNode_MapAssetsInfoEntry_DoNotUse* Arena::CreateMaybeMessage< ::tradingpb::CtrlNode_MapAssetsInfoEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::tradingpb::CtrlNode_MapAssetsInfoEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::tradingpb::CtrlNode* Arena::CreateMaybeMessage< ::tradingpb::CtrlNode >(Arena* arena) {
  return Arena::CreateInternal< ::tradingpb::CtrlNode >(arena);
}
template<> PROTOBUF_NOINLINE ::tradingpb::WalletAsset* Arena::CreateMaybeMessage< ::tradingpb::WalletAsset >(Arena* arena) {
  return Arena::CreateInternal< ::tradingpb::WalletAsset >(arena);
}
template<> PROTOBUF_NOINLINE ::tradingpb::Wallet* Arena::CreateMaybeMessage< ::tradingpb::Wallet >(Arena* arena) {
  return Arena::CreateInternal< ::tradingpb::Wallet >(arena);
}
template<> PROTOBUF_NOINLINE ::tradingpb::CtrlCondition* Arena::CreateMaybeMessage< ::tradingpb::CtrlCondition >(Arena* arena) {
  return Arena::CreateInternal< ::tradingpb::CtrlCondition >(arena);
}
template<> PROTOBUF_NOINLINE ::tradingpb::IndicatorData* Arena::CreateMaybeMessage< ::tradingpb::IndicatorData >(Arena* arena) {
  return Arena::CreateInternal< ::tradingpb::IndicatorData >(arena);
}
template<> PROTOBUF_NOINLINE ::tradingpb::Indicator* Arena::CreateMaybeMessage< ::tradingpb::Indicator >(Arena* arena) {
  return Arena::CreateInternal< ::tradingpb::Indicator >(arena);
}
template<> PROTOBUF_NOINLINE ::tradingpb::BuyParams* Arena::CreateMaybeMessage< ::tradingpb::BuyParams >(Arena* arena) {
  return Arena::CreateInternal< ::tradingpb::BuyParams >(arena);
}
template<> PROTOBUF_NOINLINE ::tradingpb::SellParams* Arena::CreateMaybeMessage< ::tradingpb::SellParams >(Arena* arena) {
  return Arena::CreateInternal< ::tradingpb::SellParams >(arena);
}
template<> PROTOBUF_NOINLINE ::tradingpb::StopLossParams* Arena::CreateMaybeMessage< ::tradingpb::StopLossParams >(Arena* arena) {
  return Arena::CreateInternal< ::tradingpb::StopLossParams >(arena);
}
template<> PROTOBUF_NOINLINE ::tradingpb::TakeProfitParams* Arena::CreateMaybeMessage< ::tradingpb::TakeProfitParams >(Arena* arena) {
  return Arena::CreateInternal< ::tradingpb::TakeProfitParams >(arena);
}
template<> PROTOBUF_NOINLINE ::tradingpb::InitParams* Arena::CreateMaybeMessage< ::tradingpb::InitParams >(Arena* arena) {
  return Arena::CreateInternal< ::tradingpb::InitParams >(arena);
}
template<> PROTOBUF_NOINLINE ::tradingpb::AIPParams* Arena::CreateMaybeMessage< ::tradingpb::AIPParams >(Arena* arena) {
  return Arena::CreateInternal< ::tradingpb::AIPParams >(arena);
}
template<> PROTOBUF_NOINLINE ::tradingpb::FeeParams* Arena::CreateMaybeMessage< ::tradingpb::FeeParams >(Arena* arena) {
  return Arena::CreateInternal< ::tradingpb::FeeParams >(arena);
}
template<> PROTOBUF_NOINLINE ::tradingpb::Strategy* Arena::CreateMaybeMessage< ::tradingpb::Strategy >(Arena* arena) {
  return Arena::CreateInternal< ::tradingpb::Strategy >(arena);
}
template<> PROTOBUF_NOINLINE ::tradingpb::PNLDataValue* Arena::CreateMaybeMessage< ::tradingpb::PNLDataValue >(Arena* arena) {
  return Arena::CreateInternal< ::tradingpb::PNLDataValue >(arena);
}
template<> PROTOBUF_NOINLINE ::tradingpb::PNLAssetData* Arena::CreateMaybeMessage< ::tradingpb::PNLAssetData >(Arena* arena) {
  return Arena::CreateInternal< ::tradingpb::PNLAssetData >(arena);
}
template<> PROTOBUF_NOINLINE ::tradingpb::PNLData* Arena::CreateMaybeMessage< ::tradingpb::PNLData >(Arena* arena) {
  return Arena::CreateInternal< ::tradingpb::PNLData >(arena);
}
template<> PROTOBUF_NOINLINE ::tradingpb::SimTradingParams* Arena::CreateMaybeMessage< ::tradingpb::SimTradingParams >(Arena* arena) {
  return Arena::CreateInternal< ::tradingpb::SimTradingParams >(arena);
}
template<> PROTOBUF_NOINLINE ::tradingpb::TradingNodeInfo* Arena::CreateMaybeMessage< ::tradingpb::TradingNodeInfo >(Arena* arena) {
  return Arena::CreateInternal< ::tradingpb::TradingNodeInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::tradingpb::SimTradingCacheNode* Arena::CreateMaybeMessage< ::tradingpb::SimTradingCacheNode >(Arena* arena) {
  return Arena::CreateInternal< ::tradingpb::SimTradingCacheNode >(arena);
}
template<> PROTOBUF_NOINLINE ::tradingpb::SimTradingCache* Arena::CreateMaybeMessage< ::tradingpb::SimTradingCache >(Arena* arena) {
  return Arena::CreateInternal< ::tradingpb::SimTradingCache >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

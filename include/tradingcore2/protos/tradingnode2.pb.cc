// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tradingnode2.proto

#include "tradingnode2.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_trading2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BasicRequestData_trading2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_trading2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PNLData_trading2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_trading2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_SimTradingParams_trading2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_trading2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TradingNodeInfo_trading2_2eproto;
namespace tradingpb {
class RequestServerInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RequestServerInfo> _instance;
} _RequestServerInfo_default_instance_;
class ReplyServerInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReplyServerInfo> _instance;
} _ReplyServerInfo_default_instance_;
class RequestCalcPNLDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RequestCalcPNL> _instance;
} _RequestCalcPNL_default_instance_;
class ReplyCalcPNLDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReplyCalcPNL> _instance;
} _ReplyCalcPNL_default_instance_;
}  // namespace tradingpb
static void InitDefaultsscc_info_ReplyCalcPNL_tradingnode2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tradingpb::_ReplyCalcPNL_default_instance_;
    new (ptr) ::tradingpb::ReplyCalcPNL();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tradingpb::ReplyCalcPNL::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ReplyCalcPNL_tradingnode2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ReplyCalcPNL_tradingnode2_2eproto}, {
      &scc_info_TradingNodeInfo_trading2_2eproto.base,
      &scc_info_PNLData_trading2_2eproto.base,}};

static void InitDefaultsscc_info_ReplyServerInfo_tradingnode2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tradingpb::_ReplyServerInfo_default_instance_;
    new (ptr) ::tradingpb::ReplyServerInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tradingpb::ReplyServerInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReplyServerInfo_tradingnode2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ReplyServerInfo_tradingnode2_2eproto}, {
      &scc_info_TradingNodeInfo_trading2_2eproto.base,}};

static void InitDefaultsscc_info_RequestCalcPNL_tradingnode2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tradingpb::_RequestCalcPNL_default_instance_;
    new (ptr) ::tradingpb::RequestCalcPNL();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tradingpb::RequestCalcPNL::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RequestCalcPNL_tradingnode2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_RequestCalcPNL_tradingnode2_2eproto}, {
      &scc_info_BasicRequestData_trading2_2eproto.base,
      &scc_info_SimTradingParams_trading2_2eproto.base,}};

static void InitDefaultsscc_info_RequestServerInfo_tradingnode2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tradingpb::_RequestServerInfo_default_instance_;
    new (ptr) ::tradingpb::RequestServerInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tradingpb::RequestServerInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RequestServerInfo_tradingnode2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RequestServerInfo_tradingnode2_2eproto}, {
      &scc_info_BasicRequestData_trading2_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_tradingnode2_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_tradingnode2_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_tradingnode2_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_tradingnode2_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tradingpb::RequestServerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tradingpb::RequestServerInfo, basicrequest_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tradingpb::ReplyServerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tradingpb::ReplyServerInfo, nodeinfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tradingpb::RequestCalcPNL, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tradingpb::RequestCalcPNL, basicrequest_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::RequestCalcPNL, params_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tradingpb::ReplyCalcPNL, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tradingpb::ReplyCalcPNL, nodeinfo_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::ReplyCalcPNL, pnl_),
  PROTOBUF_FIELD_OFFSET(::tradingpb::ReplyCalcPNL, runseconds_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::tradingpb::RequestServerInfo)},
  { 6, -1, sizeof(::tradingpb::ReplyServerInfo)},
  { 12, -1, sizeof(::tradingpb::RequestCalcPNL)},
  { 19, -1, sizeof(::tradingpb::ReplyCalcPNL)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tradingpb::_RequestServerInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tradingpb::_ReplyServerInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tradingpb::_RequestCalcPNL_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tradingpb::_ReplyCalcPNL_default_instance_),
};

const char descriptor_table_protodef_tradingnode2_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022tradingnode2.proto\022\ttradingpb\032\016trading"
  "2.proto\"F\n\021RequestServerInfo\0221\n\014basicReq"
  "uest\030\001 \001(\0132\033.tradingpb.BasicRequestData\""
  "\?\n\017ReplyServerInfo\022,\n\010nodeInfo\030\001 \001(\0132\032.t"
  "radingpb.TradingNodeInfo\"p\n\016RequestCalcP"
  "NL\0221\n\014basicRequest\030\001 \001(\0132\033.tradingpb.Bas"
  "icRequestData\022+\n\006params\030\002 \001(\0132\033.tradingp"
  "b.SimTradingParams\"q\n\014ReplyCalcPNL\022,\n\010no"
  "deInfo\030\001 \001(\0132\032.tradingpb.TradingNodeInfo"
  "\022\037\n\003pnl\030\002 \003(\0132\022.tradingpb.PNLData\022\022\n\nrun"
  "Seconds\030\003 \001(\0032\234\001\n\014TradingNode2\022K\n\rgetSer"
  "verInfo\022\034.tradingpb.RequestServerInfo\032\032."
  "tradingpb.ReplyServerInfo\"\000\022\?\n\007calcPNL\022\031"
  ".tradingpb.RequestCalcPNL\032\027.tradingpb.Re"
  "plyCalcPNL\"\000B(Z&github.com/zhs007/tradin"
  "gdb2/tradingpbb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_tradingnode2_2eproto_deps[1] = {
  &::descriptor_table_trading2_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_tradingnode2_2eproto_sccs[4] = {
  &scc_info_ReplyCalcPNL_tradingnode2_2eproto.base,
  &scc_info_ReplyServerInfo_tradingnode2_2eproto.base,
  &scc_info_RequestCalcPNL_tradingnode2_2eproto.base,
  &scc_info_RequestServerInfo_tradingnode2_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_tradingnode2_2eproto_once;
static bool descriptor_table_tradingnode2_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tradingnode2_2eproto = {
  &descriptor_table_tradingnode2_2eproto_initialized, descriptor_table_protodef_tradingnode2_2eproto, "tradingnode2.proto", 622,
  &descriptor_table_tradingnode2_2eproto_once, descriptor_table_tradingnode2_2eproto_sccs, descriptor_table_tradingnode2_2eproto_deps, 4, 1,
  schemas, file_default_instances, TableStruct_tradingnode2_2eproto::offsets,
  file_level_metadata_tradingnode2_2eproto, 4, file_level_enum_descriptors_tradingnode2_2eproto, file_level_service_descriptors_tradingnode2_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_tradingnode2_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_tradingnode2_2eproto), true);
namespace tradingpb {

// ===================================================================

void RequestServerInfo::InitAsDefaultInstance() {
  ::tradingpb::_RequestServerInfo_default_instance_._instance.get_mutable()->basicrequest_ = const_cast< ::tradingpb::BasicRequestData*>(
      ::tradingpb::BasicRequestData::internal_default_instance());
}
class RequestServerInfo::_Internal {
 public:
  static const ::tradingpb::BasicRequestData& basicrequest(const RequestServerInfo* msg);
};

const ::tradingpb::BasicRequestData&
RequestServerInfo::_Internal::basicrequest(const RequestServerInfo* msg) {
  return *msg->basicrequest_;
}
void RequestServerInfo::clear_basicrequest() {
  if (GetArenaNoVirtual() == nullptr && basicrequest_ != nullptr) {
    delete basicrequest_;
  }
  basicrequest_ = nullptr;
}
RequestServerInfo::RequestServerInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tradingpb.RequestServerInfo)
}
RequestServerInfo::RequestServerInfo(const RequestServerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_basicrequest()) {
    basicrequest_ = new ::tradingpb::BasicRequestData(*from.basicrequest_);
  } else {
    basicrequest_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:tradingpb.RequestServerInfo)
}

void RequestServerInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RequestServerInfo_tradingnode2_2eproto.base);
  basicrequest_ = nullptr;
}

RequestServerInfo::~RequestServerInfo() {
  // @@protoc_insertion_point(destructor:tradingpb.RequestServerInfo)
  SharedDtor();
}

void RequestServerInfo::SharedDtor() {
  if (this != internal_default_instance()) delete basicrequest_;
}

void RequestServerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RequestServerInfo& RequestServerInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RequestServerInfo_tradingnode2_2eproto.base);
  return *internal_default_instance();
}


void RequestServerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:tradingpb.RequestServerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && basicrequest_ != nullptr) {
    delete basicrequest_;
  }
  basicrequest_ = nullptr;
  _internal_metadata_.Clear();
}

const char* RequestServerInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .tradingpb.BasicRequestData basicRequest = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_basicrequest(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RequestServerInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tradingpb.RequestServerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tradingpb.BasicRequestData basicRequest = 1;
  if (this->has_basicrequest()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::basicrequest(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tradingpb.RequestServerInfo)
  return target;
}

size_t RequestServerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tradingpb.RequestServerInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tradingpb.BasicRequestData basicRequest = 1;
  if (this->has_basicrequest()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *basicrequest_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestServerInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tradingpb.RequestServerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestServerInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RequestServerInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tradingpb.RequestServerInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tradingpb.RequestServerInfo)
    MergeFrom(*source);
  }
}

void RequestServerInfo::MergeFrom(const RequestServerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tradingpb.RequestServerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_basicrequest()) {
    _internal_mutable_basicrequest()->::tradingpb::BasicRequestData::MergeFrom(from._internal_basicrequest());
  }
}

void RequestServerInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tradingpb.RequestServerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestServerInfo::CopyFrom(const RequestServerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tradingpb.RequestServerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestServerInfo::IsInitialized() const {
  return true;
}

void RequestServerInfo::InternalSwap(RequestServerInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(basicrequest_, other->basicrequest_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestServerInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReplyServerInfo::InitAsDefaultInstance() {
  ::tradingpb::_ReplyServerInfo_default_instance_._instance.get_mutable()->nodeinfo_ = const_cast< ::tradingpb::TradingNodeInfo*>(
      ::tradingpb::TradingNodeInfo::internal_default_instance());
}
class ReplyServerInfo::_Internal {
 public:
  static const ::tradingpb::TradingNodeInfo& nodeinfo(const ReplyServerInfo* msg);
};

const ::tradingpb::TradingNodeInfo&
ReplyServerInfo::_Internal::nodeinfo(const ReplyServerInfo* msg) {
  return *msg->nodeinfo_;
}
void ReplyServerInfo::clear_nodeinfo() {
  if (GetArenaNoVirtual() == nullptr && nodeinfo_ != nullptr) {
    delete nodeinfo_;
  }
  nodeinfo_ = nullptr;
}
ReplyServerInfo::ReplyServerInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tradingpb.ReplyServerInfo)
}
ReplyServerInfo::ReplyServerInfo(const ReplyServerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_nodeinfo()) {
    nodeinfo_ = new ::tradingpb::TradingNodeInfo(*from.nodeinfo_);
  } else {
    nodeinfo_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:tradingpb.ReplyServerInfo)
}

void ReplyServerInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReplyServerInfo_tradingnode2_2eproto.base);
  nodeinfo_ = nullptr;
}

ReplyServerInfo::~ReplyServerInfo() {
  // @@protoc_insertion_point(destructor:tradingpb.ReplyServerInfo)
  SharedDtor();
}

void ReplyServerInfo::SharedDtor() {
  if (this != internal_default_instance()) delete nodeinfo_;
}

void ReplyServerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReplyServerInfo& ReplyServerInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReplyServerInfo_tradingnode2_2eproto.base);
  return *internal_default_instance();
}


void ReplyServerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:tradingpb.ReplyServerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && nodeinfo_ != nullptr) {
    delete nodeinfo_;
  }
  nodeinfo_ = nullptr;
  _internal_metadata_.Clear();
}

const char* ReplyServerInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .tradingpb.TradingNodeInfo nodeInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_nodeinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReplyServerInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tradingpb.ReplyServerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tradingpb.TradingNodeInfo nodeInfo = 1;
  if (this->has_nodeinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::nodeinfo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tradingpb.ReplyServerInfo)
  return target;
}

size_t ReplyServerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tradingpb.ReplyServerInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tradingpb.TradingNodeInfo nodeInfo = 1;
  if (this->has_nodeinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *nodeinfo_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReplyServerInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tradingpb.ReplyServerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ReplyServerInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReplyServerInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tradingpb.ReplyServerInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tradingpb.ReplyServerInfo)
    MergeFrom(*source);
  }
}

void ReplyServerInfo::MergeFrom(const ReplyServerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tradingpb.ReplyServerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_nodeinfo()) {
    _internal_mutable_nodeinfo()->::tradingpb::TradingNodeInfo::MergeFrom(from._internal_nodeinfo());
  }
}

void ReplyServerInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tradingpb.ReplyServerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplyServerInfo::CopyFrom(const ReplyServerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tradingpb.ReplyServerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplyServerInfo::IsInitialized() const {
  return true;
}

void ReplyServerInfo::InternalSwap(ReplyServerInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(nodeinfo_, other->nodeinfo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReplyServerInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RequestCalcPNL::InitAsDefaultInstance() {
  ::tradingpb::_RequestCalcPNL_default_instance_._instance.get_mutable()->basicrequest_ = const_cast< ::tradingpb::BasicRequestData*>(
      ::tradingpb::BasicRequestData::internal_default_instance());
  ::tradingpb::_RequestCalcPNL_default_instance_._instance.get_mutable()->params_ = const_cast< ::tradingpb::SimTradingParams*>(
      ::tradingpb::SimTradingParams::internal_default_instance());
}
class RequestCalcPNL::_Internal {
 public:
  static const ::tradingpb::BasicRequestData& basicrequest(const RequestCalcPNL* msg);
  static const ::tradingpb::SimTradingParams& params(const RequestCalcPNL* msg);
};

const ::tradingpb::BasicRequestData&
RequestCalcPNL::_Internal::basicrequest(const RequestCalcPNL* msg) {
  return *msg->basicrequest_;
}
const ::tradingpb::SimTradingParams&
RequestCalcPNL::_Internal::params(const RequestCalcPNL* msg) {
  return *msg->params_;
}
void RequestCalcPNL::clear_basicrequest() {
  if (GetArenaNoVirtual() == nullptr && basicrequest_ != nullptr) {
    delete basicrequest_;
  }
  basicrequest_ = nullptr;
}
void RequestCalcPNL::clear_params() {
  if (GetArenaNoVirtual() == nullptr && params_ != nullptr) {
    delete params_;
  }
  params_ = nullptr;
}
RequestCalcPNL::RequestCalcPNL()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tradingpb.RequestCalcPNL)
}
RequestCalcPNL::RequestCalcPNL(const RequestCalcPNL& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_basicrequest()) {
    basicrequest_ = new ::tradingpb::BasicRequestData(*from.basicrequest_);
  } else {
    basicrequest_ = nullptr;
  }
  if (from._internal_has_params()) {
    params_ = new ::tradingpb::SimTradingParams(*from.params_);
  } else {
    params_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:tradingpb.RequestCalcPNL)
}

void RequestCalcPNL::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RequestCalcPNL_tradingnode2_2eproto.base);
  ::memset(&basicrequest_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&params_) -
      reinterpret_cast<char*>(&basicrequest_)) + sizeof(params_));
}

RequestCalcPNL::~RequestCalcPNL() {
  // @@protoc_insertion_point(destructor:tradingpb.RequestCalcPNL)
  SharedDtor();
}

void RequestCalcPNL::SharedDtor() {
  if (this != internal_default_instance()) delete basicrequest_;
  if (this != internal_default_instance()) delete params_;
}

void RequestCalcPNL::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RequestCalcPNL& RequestCalcPNL::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RequestCalcPNL_tradingnode2_2eproto.base);
  return *internal_default_instance();
}


void RequestCalcPNL::Clear() {
// @@protoc_insertion_point(message_clear_start:tradingpb.RequestCalcPNL)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && basicrequest_ != nullptr) {
    delete basicrequest_;
  }
  basicrequest_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && params_ != nullptr) {
    delete params_;
  }
  params_ = nullptr;
  _internal_metadata_.Clear();
}

const char* RequestCalcPNL::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .tradingpb.BasicRequestData basicRequest = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_basicrequest(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tradingpb.SimTradingParams params = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RequestCalcPNL::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tradingpb.RequestCalcPNL)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tradingpb.BasicRequestData basicRequest = 1;
  if (this->has_basicrequest()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::basicrequest(this), target, stream);
  }

  // .tradingpb.SimTradingParams params = 2;
  if (this->has_params()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::params(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tradingpb.RequestCalcPNL)
  return target;
}

size_t RequestCalcPNL::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tradingpb.RequestCalcPNL)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tradingpb.BasicRequestData basicRequest = 1;
  if (this->has_basicrequest()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *basicrequest_);
  }

  // .tradingpb.SimTradingParams params = 2;
  if (this->has_params()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *params_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestCalcPNL::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tradingpb.RequestCalcPNL)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestCalcPNL* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RequestCalcPNL>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tradingpb.RequestCalcPNL)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tradingpb.RequestCalcPNL)
    MergeFrom(*source);
  }
}

void RequestCalcPNL::MergeFrom(const RequestCalcPNL& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tradingpb.RequestCalcPNL)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_basicrequest()) {
    _internal_mutable_basicrequest()->::tradingpb::BasicRequestData::MergeFrom(from._internal_basicrequest());
  }
  if (from.has_params()) {
    _internal_mutable_params()->::tradingpb::SimTradingParams::MergeFrom(from._internal_params());
  }
}

void RequestCalcPNL::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tradingpb.RequestCalcPNL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestCalcPNL::CopyFrom(const RequestCalcPNL& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tradingpb.RequestCalcPNL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestCalcPNL::IsInitialized() const {
  return true;
}

void RequestCalcPNL::InternalSwap(RequestCalcPNL* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(basicrequest_, other->basicrequest_);
  swap(params_, other->params_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestCalcPNL::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReplyCalcPNL::InitAsDefaultInstance() {
  ::tradingpb::_ReplyCalcPNL_default_instance_._instance.get_mutable()->nodeinfo_ = const_cast< ::tradingpb::TradingNodeInfo*>(
      ::tradingpb::TradingNodeInfo::internal_default_instance());
}
class ReplyCalcPNL::_Internal {
 public:
  static const ::tradingpb::TradingNodeInfo& nodeinfo(const ReplyCalcPNL* msg);
};

const ::tradingpb::TradingNodeInfo&
ReplyCalcPNL::_Internal::nodeinfo(const ReplyCalcPNL* msg) {
  return *msg->nodeinfo_;
}
void ReplyCalcPNL::clear_nodeinfo() {
  if (GetArenaNoVirtual() == nullptr && nodeinfo_ != nullptr) {
    delete nodeinfo_;
  }
  nodeinfo_ = nullptr;
}
void ReplyCalcPNL::clear_pnl() {
  pnl_.Clear();
}
ReplyCalcPNL::ReplyCalcPNL()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tradingpb.ReplyCalcPNL)
}
ReplyCalcPNL::ReplyCalcPNL(const ReplyCalcPNL& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      pnl_(from.pnl_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_nodeinfo()) {
    nodeinfo_ = new ::tradingpb::TradingNodeInfo(*from.nodeinfo_);
  } else {
    nodeinfo_ = nullptr;
  }
  runseconds_ = from.runseconds_;
  // @@protoc_insertion_point(copy_constructor:tradingpb.ReplyCalcPNL)
}

void ReplyCalcPNL::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReplyCalcPNL_tradingnode2_2eproto.base);
  ::memset(&nodeinfo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&runseconds_) -
      reinterpret_cast<char*>(&nodeinfo_)) + sizeof(runseconds_));
}

ReplyCalcPNL::~ReplyCalcPNL() {
  // @@protoc_insertion_point(destructor:tradingpb.ReplyCalcPNL)
  SharedDtor();
}

void ReplyCalcPNL::SharedDtor() {
  if (this != internal_default_instance()) delete nodeinfo_;
}

void ReplyCalcPNL::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReplyCalcPNL& ReplyCalcPNL::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReplyCalcPNL_tradingnode2_2eproto.base);
  return *internal_default_instance();
}


void ReplyCalcPNL::Clear() {
// @@protoc_insertion_point(message_clear_start:tradingpb.ReplyCalcPNL)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pnl_.Clear();
  if (GetArenaNoVirtual() == nullptr && nodeinfo_ != nullptr) {
    delete nodeinfo_;
  }
  nodeinfo_ = nullptr;
  runseconds_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* ReplyCalcPNL::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .tradingpb.TradingNodeInfo nodeInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_nodeinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .tradingpb.PNLData pnl = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pnl(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // int64 runSeconds = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          runseconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReplyCalcPNL::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tradingpb.ReplyCalcPNL)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tradingpb.TradingNodeInfo nodeInfo = 1;
  if (this->has_nodeinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::nodeinfo(this), target, stream);
  }

  // repeated .tradingpb.PNLData pnl = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pnl_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_pnl(i), target, stream);
  }

  // int64 runSeconds = 3;
  if (this->runseconds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_runseconds(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tradingpb.ReplyCalcPNL)
  return target;
}

size_t ReplyCalcPNL::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tradingpb.ReplyCalcPNL)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tradingpb.PNLData pnl = 2;
  total_size += 1UL * this->_internal_pnl_size();
  for (const auto& msg : this->pnl_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .tradingpb.TradingNodeInfo nodeInfo = 1;
  if (this->has_nodeinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *nodeinfo_);
  }

  // int64 runSeconds = 3;
  if (this->runseconds() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_runseconds());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReplyCalcPNL::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tradingpb.ReplyCalcPNL)
  GOOGLE_DCHECK_NE(&from, this);
  const ReplyCalcPNL* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReplyCalcPNL>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tradingpb.ReplyCalcPNL)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tradingpb.ReplyCalcPNL)
    MergeFrom(*source);
  }
}

void ReplyCalcPNL::MergeFrom(const ReplyCalcPNL& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tradingpb.ReplyCalcPNL)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pnl_.MergeFrom(from.pnl_);
  if (from.has_nodeinfo()) {
    _internal_mutable_nodeinfo()->::tradingpb::TradingNodeInfo::MergeFrom(from._internal_nodeinfo());
  }
  if (from.runseconds() != 0) {
    _internal_set_runseconds(from._internal_runseconds());
  }
}

void ReplyCalcPNL::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tradingpb.ReplyCalcPNL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplyCalcPNL::CopyFrom(const ReplyCalcPNL& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tradingpb.ReplyCalcPNL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplyCalcPNL::IsInitialized() const {
  return true;
}

void ReplyCalcPNL::InternalSwap(ReplyCalcPNL* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  pnl_.InternalSwap(&other->pnl_);
  swap(nodeinfo_, other->nodeinfo_);
  swap(runseconds_, other->runseconds_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReplyCalcPNL::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace tradingpb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tradingpb::RequestServerInfo* Arena::CreateMaybeMessage< ::tradingpb::RequestServerInfo >(Arena* arena) {
  return Arena::CreateInternal< ::tradingpb::RequestServerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::tradingpb::ReplyServerInfo* Arena::CreateMaybeMessage< ::tradingpb::ReplyServerInfo >(Arena* arena) {
  return Arena::CreateInternal< ::tradingpb::ReplyServerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::tradingpb::RequestCalcPNL* Arena::CreateMaybeMessage< ::tradingpb::RequestCalcPNL >(Arena* arena) {
  return Arena::CreateInternal< ::tradingpb::RequestCalcPNL >(arena);
}
template<> PROTOBUF_NOINLINE ::tradingpb::ReplyCalcPNL* Arena::CreateMaybeMessage< ::tradingpb::ReplyCalcPNL >(Arena* arena) {
  return Arena::CreateInternal< ::tradingpb::ReplyCalcPNL >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

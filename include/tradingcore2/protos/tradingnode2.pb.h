// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tradingnode2.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tradingnode2_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tradingnode2_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tradingnode2_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tradingnode2_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tradingnode2_2eproto;
namespace tradingpb {
class Asset;
class AssetDefaultTypeInternal;
extern AssetDefaultTypeInternal _Asset_default_instance_;
class CtrlCondition;
class CtrlConditionDefaultTypeInternal;
extern CtrlConditionDefaultTypeInternal _CtrlCondition_default_instance_;
class PNLData;
class PNLDataDefaultTypeInternal;
extern PNLDataDefaultTypeInternal _PNLData_default_instance_;
class PNLDataValue;
class PNLDataValueDefaultTypeInternal;
extern PNLDataValueDefaultTypeInternal _PNLDataValue_default_instance_;
class ReplyCalcPNL;
class ReplyCalcPNLDefaultTypeInternal;
extern ReplyCalcPNLDefaultTypeInternal _ReplyCalcPNL_default_instance_;
class RequestCalcPNL;
class RequestCalcPNLDefaultTypeInternal;
extern RequestCalcPNLDefaultTypeInternal _RequestCalcPNL_default_instance_;
class Strategy;
class StrategyDefaultTypeInternal;
extern StrategyDefaultTypeInternal _Strategy_default_instance_;
}  // namespace tradingpb
PROTOBUF_NAMESPACE_OPEN
template<> ::tradingpb::Asset* Arena::CreateMaybeMessage<::tradingpb::Asset>(Arena*);
template<> ::tradingpb::CtrlCondition* Arena::CreateMaybeMessage<::tradingpb::CtrlCondition>(Arena*);
template<> ::tradingpb::PNLData* Arena::CreateMaybeMessage<::tradingpb::PNLData>(Arena*);
template<> ::tradingpb::PNLDataValue* Arena::CreateMaybeMessage<::tradingpb::PNLDataValue>(Arena*);
template<> ::tradingpb::ReplyCalcPNL* Arena::CreateMaybeMessage<::tradingpb::ReplyCalcPNL>(Arena*);
template<> ::tradingpb::RequestCalcPNL* Arena::CreateMaybeMessage<::tradingpb::RequestCalcPNL>(Arena*);
template<> ::tradingpb::Strategy* Arena::CreateMaybeMessage<::tradingpb::Strategy>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tradingpb {

// ===================================================================

class Asset :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tradingpb.Asset) */ {
 public:
  Asset();
  virtual ~Asset();

  Asset(const Asset& from);
  Asset(Asset&& from) noexcept
    : Asset() {
    *this = ::std::move(from);
  }

  inline Asset& operator=(const Asset& from) {
    CopyFrom(from);
    return *this;
  }
  inline Asset& operator=(Asset&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Asset& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Asset* internal_default_instance() {
    return reinterpret_cast<const Asset*>(
               &_Asset_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Asset& a, Asset& b) {
    a.Swap(&b);
  }
  inline void Swap(Asset* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Asset* New() const final {
    return CreateMaybeMessage<Asset>(nullptr);
  }

  Asset* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Asset>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Asset& from);
  void MergeFrom(const Asset& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Asset* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tradingpb.Asset";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tradingnode2_2eproto);
    return ::descriptor_table_tradingnode2_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarketFieldNumber = 1,
    kCodeFieldNumber = 2,
  };
  // string market = 1;
  void clear_market();
  const std::string& market() const;
  void set_market(const std::string& value);
  void set_market(std::string&& value);
  void set_market(const char* value);
  void set_market(const char* value, size_t size);
  std::string* mutable_market();
  std::string* release_market();
  void set_allocated_market(std::string* market);
  private:
  const std::string& _internal_market() const;
  void _internal_set_market(const std::string& value);
  std::string* _internal_mutable_market();
  public:

  // string code = 2;
  void clear_code();
  const std::string& code() const;
  void set_code(const std::string& value);
  void set_code(std::string&& value);
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  std::string* mutable_code();
  std::string* release_code();
  void set_allocated_code(std::string* code);
  private:
  const std::string& _internal_code() const;
  void _internal_set_code(const std::string& value);
  std::string* _internal_mutable_code();
  public:

  // @@protoc_insertion_point(class_scope:tradingpb.Asset)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr market_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tradingnode2_2eproto;
};
// -------------------------------------------------------------------

class CtrlCondition :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tradingpb.CtrlCondition) */ {
 public:
  CtrlCondition();
  virtual ~CtrlCondition();

  CtrlCondition(const CtrlCondition& from);
  CtrlCondition(CtrlCondition&& from) noexcept
    : CtrlCondition() {
    *this = ::std::move(from);
  }

  inline CtrlCondition& operator=(const CtrlCondition& from) {
    CopyFrom(from);
    return *this;
  }
  inline CtrlCondition& operator=(CtrlCondition&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CtrlCondition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CtrlCondition* internal_default_instance() {
    return reinterpret_cast<const CtrlCondition*>(
               &_CtrlCondition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CtrlCondition& a, CtrlCondition& b) {
    a.Swap(&b);
  }
  inline void Swap(CtrlCondition* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CtrlCondition* New() const final {
    return CreateMaybeMessage<CtrlCondition>(nullptr);
  }

  CtrlCondition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CtrlCondition>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CtrlCondition& from);
  void MergeFrom(const CtrlCondition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CtrlCondition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tradingpb.CtrlCondition";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tradingnode2_2eproto);
    return ::descriptor_table_tradingnode2_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValsFieldNumber = 2,
    kOperatorsFieldNumber = 3,
    kIndicatorFieldNumber = 1,
    kCombConditionFieldNumber = 4,
  };
  // repeated float vals = 2;
  int vals_size() const;
  private:
  int _internal_vals_size() const;
  public:
  void clear_vals();
  private:
  float _internal_vals(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_vals() const;
  void _internal_add_vals(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_vals();
  public:
  float vals(int index) const;
  void set_vals(int index, float value);
  void add_vals(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      vals() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_vals();

  // repeated string operators = 3;
  int operators_size() const;
  private:
  int _internal_operators_size() const;
  public:
  void clear_operators();
  const std::string& operators(int index) const;
  std::string* mutable_operators(int index);
  void set_operators(int index, const std::string& value);
  void set_operators(int index, std::string&& value);
  void set_operators(int index, const char* value);
  void set_operators(int index, const char* value, size_t size);
  std::string* add_operators();
  void add_operators(const std::string& value);
  void add_operators(std::string&& value);
  void add_operators(const char* value);
  void add_operators(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& operators() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_operators();
  private:
  const std::string& _internal_operators(int index) const;
  std::string* _internal_add_operators();
  public:

  // string indicator = 1;
  void clear_indicator();
  const std::string& indicator() const;
  void set_indicator(const std::string& value);
  void set_indicator(std::string&& value);
  void set_indicator(const char* value);
  void set_indicator(const char* value, size_t size);
  std::string* mutable_indicator();
  std::string* release_indicator();
  void set_allocated_indicator(std::string* indicator);
  private:
  const std::string& _internal_indicator() const;
  void _internal_set_indicator(const std::string& value);
  std::string* _internal_mutable_indicator();
  public:

  // string combCondition = 4;
  void clear_combcondition();
  const std::string& combcondition() const;
  void set_combcondition(const std::string& value);
  void set_combcondition(std::string&& value);
  void set_combcondition(const char* value);
  void set_combcondition(const char* value, size_t size);
  std::string* mutable_combcondition();
  std::string* release_combcondition();
  void set_allocated_combcondition(std::string* combcondition);
  private:
  const std::string& _internal_combcondition() const;
  void _internal_set_combcondition(const std::string& value);
  std::string* _internal_mutable_combcondition();
  public:

  // @@protoc_insertion_point(class_scope:tradingpb.CtrlCondition)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > vals_;
  mutable std::atomic<int> _vals_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> operators_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr indicator_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr combcondition_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tradingnode2_2eproto;
};
// -------------------------------------------------------------------

class Strategy :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tradingpb.Strategy) */ {
 public:
  Strategy();
  virtual ~Strategy();

  Strategy(const Strategy& from);
  Strategy(Strategy&& from) noexcept
    : Strategy() {
    *this = ::std::move(from);
  }

  inline Strategy& operator=(const Strategy& from) {
    CopyFrom(from);
    return *this;
  }
  inline Strategy& operator=(Strategy&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Strategy& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Strategy* internal_default_instance() {
    return reinterpret_cast<const Strategy*>(
               &_Strategy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Strategy& a, Strategy& b) {
    a.Swap(&b);
  }
  inline void Swap(Strategy* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Strategy* New() const final {
    return CreateMaybeMessage<Strategy>(nullptr);
  }

  Strategy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Strategy>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Strategy& from);
  void MergeFrom(const Strategy& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Strategy* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tradingpb.Strategy";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tradingnode2_2eproto);
    return ::descriptor_table_tradingnode2_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBuyFieldNumber = 3,
    kSellFieldNumber = 4,
    kStoplossFieldNumber = 5,
    kNameFieldNumber = 1,
    kAssetFieldNumber = 2,
  };
  // repeated .tradingpb.CtrlCondition buy = 3;
  int buy_size() const;
  private:
  int _internal_buy_size() const;
  public:
  void clear_buy();
  ::tradingpb::CtrlCondition* mutable_buy(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tradingpb::CtrlCondition >*
      mutable_buy();
  private:
  const ::tradingpb::CtrlCondition& _internal_buy(int index) const;
  ::tradingpb::CtrlCondition* _internal_add_buy();
  public:
  const ::tradingpb::CtrlCondition& buy(int index) const;
  ::tradingpb::CtrlCondition* add_buy();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tradingpb::CtrlCondition >&
      buy() const;

  // repeated .tradingpb.CtrlCondition sell = 4;
  int sell_size() const;
  private:
  int _internal_sell_size() const;
  public:
  void clear_sell();
  ::tradingpb::CtrlCondition* mutable_sell(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tradingpb::CtrlCondition >*
      mutable_sell();
  private:
  const ::tradingpb::CtrlCondition& _internal_sell(int index) const;
  ::tradingpb::CtrlCondition* _internal_add_sell();
  public:
  const ::tradingpb::CtrlCondition& sell(int index) const;
  ::tradingpb::CtrlCondition* add_sell();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tradingpb::CtrlCondition >&
      sell() const;

  // repeated .tradingpb.CtrlCondition stoploss = 5;
  int stoploss_size() const;
  private:
  int _internal_stoploss_size() const;
  public:
  void clear_stoploss();
  ::tradingpb::CtrlCondition* mutable_stoploss(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tradingpb::CtrlCondition >*
      mutable_stoploss();
  private:
  const ::tradingpb::CtrlCondition& _internal_stoploss(int index) const;
  ::tradingpb::CtrlCondition* _internal_add_stoploss();
  public:
  const ::tradingpb::CtrlCondition& stoploss(int index) const;
  ::tradingpb::CtrlCondition* add_stoploss();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tradingpb::CtrlCondition >&
      stoploss() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .tradingpb.Asset asset = 2;
  bool has_asset() const;
  private:
  bool _internal_has_asset() const;
  public:
  void clear_asset();
  const ::tradingpb::Asset& asset() const;
  ::tradingpb::Asset* release_asset();
  ::tradingpb::Asset* mutable_asset();
  void set_allocated_asset(::tradingpb::Asset* asset);
  private:
  const ::tradingpb::Asset& _internal_asset() const;
  ::tradingpb::Asset* _internal_mutable_asset();
  public:

  // @@protoc_insertion_point(class_scope:tradingpb.Strategy)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tradingpb::CtrlCondition > buy_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tradingpb::CtrlCondition > sell_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tradingpb::CtrlCondition > stoploss_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::tradingpb::Asset* asset_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tradingnode2_2eproto;
};
// -------------------------------------------------------------------

class PNLDataValue :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tradingpb.PNLDataValue) */ {
 public:
  PNLDataValue();
  virtual ~PNLDataValue();

  PNLDataValue(const PNLDataValue& from);
  PNLDataValue(PNLDataValue&& from) noexcept
    : PNLDataValue() {
    *this = ::std::move(from);
  }

  inline PNLDataValue& operator=(const PNLDataValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline PNLDataValue& operator=(PNLDataValue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PNLDataValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PNLDataValue* internal_default_instance() {
    return reinterpret_cast<const PNLDataValue*>(
               &_PNLDataValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PNLDataValue& a, PNLDataValue& b) {
    a.Swap(&b);
  }
  inline void Swap(PNLDataValue* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PNLDataValue* New() const final {
    return CreateMaybeMessage<PNLDataValue>(nullptr);
  }

  PNLDataValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PNLDataValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PNLDataValue& from);
  void MergeFrom(const PNLDataValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PNLDataValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tradingpb.PNLDataValue";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tradingnode2_2eproto);
    return ::descriptor_table_tradingnode2_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTsFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // int64 ts = 1;
  void clear_ts();
  ::PROTOBUF_NAMESPACE_ID::int64 ts() const;
  void set_ts(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_ts() const;
  void _internal_set_ts(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // float value = 2;
  void clear_value();
  float value() const;
  void set_value(float value);
  private:
  float _internal_value() const;
  void _internal_set_value(float value);
  public:

  // @@protoc_insertion_point(class_scope:tradingpb.PNLDataValue)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 ts_;
  float value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tradingnode2_2eproto;
};
// -------------------------------------------------------------------

class PNLData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tradingpb.PNLData) */ {
 public:
  PNLData();
  virtual ~PNLData();

  PNLData(const PNLData& from);
  PNLData(PNLData&& from) noexcept
    : PNLData() {
    *this = ::std::move(from);
  }

  inline PNLData& operator=(const PNLData& from) {
    CopyFrom(from);
    return *this;
  }
  inline PNLData& operator=(PNLData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PNLData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PNLData* internal_default_instance() {
    return reinterpret_cast<const PNLData*>(
               &_PNLData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PNLData& a, PNLData& b) {
    a.Swap(&b);
  }
  inline void Swap(PNLData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PNLData* New() const final {
    return CreateMaybeMessage<PNLData>(nullptr);
  }

  PNLData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PNLData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PNLData& from);
  void MergeFrom(const PNLData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PNLData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tradingpb.PNLData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tradingnode2_2eproto);
    return ::descriptor_table_tradingnode2_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 3,
    kNameFieldNumber = 1,
    kAssetFieldNumber = 2,
    kMaxDrawdownStartTsFieldNumber = 5,
    kMaxDrawdownFieldNumber = 4,
    kMaxDrawupFieldNumber = 7,
    kMaxDrawdownEndTsFieldNumber = 6,
    kMaxDrawupStartTsFieldNumber = 8,
    kMaxDrawupEndTsFieldNumber = 9,
    kSharpeFieldNumber = 10,
    kAnnualizedReturnsFieldNumber = 11,
    kAnnualizedVolatilityFieldNumber = 12,
    kTotalReturnsFieldNumber = 13,
    kVarianceFieldNumber = 14,
    kBuyTimesFieldNumber = 15,
    kSellTimesFieldNumber = 16,
    kStoplossTimesFieldNumber = 17,
    kMaxUpDayTsFieldNumber = 18,
    kMaxDownDayTsFieldNumber = 20,
    kMaxPerUpDayFieldNumber = 19,
    kMaxPerDownDayFieldNumber = 21,
    kMaxUpWeekTsFieldNumber = 22,
    kMaxDownWeekTsFieldNumber = 24,
    kMaxPerUpWeekFieldNumber = 23,
    kMaxPerDownWeekFieldNumber = 25,
    kMaxUpMonthTsFieldNumber = 26,
    kMaxDownMonthTsFieldNumber = 28,
    kMaxPerUpMonthFieldNumber = 27,
    kMaxPerDownMonthFieldNumber = 29,
    kMaxUpYearTsFieldNumber = 30,
    kMaxDownYearTsFieldNumber = 32,
    kMaxPerUpYearFieldNumber = 31,
    kMaxPerDownYearFieldNumber = 33,
  };
  // repeated .tradingpb.PNLDataValue values = 3;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  ::tradingpb::PNLDataValue* mutable_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tradingpb::PNLDataValue >*
      mutable_values();
  private:
  const ::tradingpb::PNLDataValue& _internal_values(int index) const;
  ::tradingpb::PNLDataValue* _internal_add_values();
  public:
  const ::tradingpb::PNLDataValue& values(int index) const;
  ::tradingpb::PNLDataValue* add_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tradingpb::PNLDataValue >&
      values() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .tradingpb.Asset asset = 2;
  bool has_asset() const;
  private:
  bool _internal_has_asset() const;
  public:
  void clear_asset();
  const ::tradingpb::Asset& asset() const;
  ::tradingpb::Asset* release_asset();
  ::tradingpb::Asset* mutable_asset();
  void set_allocated_asset(::tradingpb::Asset* asset);
  private:
  const ::tradingpb::Asset& _internal_asset() const;
  ::tradingpb::Asset* _internal_mutable_asset();
  public:

  // int64 maxDrawdownStartTs = 5;
  void clear_maxdrawdownstartts();
  ::PROTOBUF_NAMESPACE_ID::int64 maxdrawdownstartts() const;
  void set_maxdrawdownstartts(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_maxdrawdownstartts() const;
  void _internal_set_maxdrawdownstartts(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // float maxDrawdown = 4;
  void clear_maxdrawdown();
  float maxdrawdown() const;
  void set_maxdrawdown(float value);
  private:
  float _internal_maxdrawdown() const;
  void _internal_set_maxdrawdown(float value);
  public:

  // float maxDrawup = 7;
  void clear_maxdrawup();
  float maxdrawup() const;
  void set_maxdrawup(float value);
  private:
  float _internal_maxdrawup() const;
  void _internal_set_maxdrawup(float value);
  public:

  // int64 maxDrawdownEndTs = 6;
  void clear_maxdrawdownendts();
  ::PROTOBUF_NAMESPACE_ID::int64 maxdrawdownendts() const;
  void set_maxdrawdownendts(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_maxdrawdownendts() const;
  void _internal_set_maxdrawdownendts(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 maxDrawupStartTs = 8;
  void clear_maxdrawupstartts();
  ::PROTOBUF_NAMESPACE_ID::int64 maxdrawupstartts() const;
  void set_maxdrawupstartts(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_maxdrawupstartts() const;
  void _internal_set_maxdrawupstartts(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 maxDrawupEndTs = 9;
  void clear_maxdrawupendts();
  ::PROTOBUF_NAMESPACE_ID::int64 maxdrawupendts() const;
  void set_maxdrawupendts(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_maxdrawupendts() const;
  void _internal_set_maxdrawupendts(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // float sharpe = 10;
  void clear_sharpe();
  float sharpe() const;
  void set_sharpe(float value);
  private:
  float _internal_sharpe() const;
  void _internal_set_sharpe(float value);
  public:

  // float annualizedReturns = 11;
  void clear_annualizedreturns();
  float annualizedreturns() const;
  void set_annualizedreturns(float value);
  private:
  float _internal_annualizedreturns() const;
  void _internal_set_annualizedreturns(float value);
  public:

  // float annualizedVolatility = 12;
  void clear_annualizedvolatility();
  float annualizedvolatility() const;
  void set_annualizedvolatility(float value);
  private:
  float _internal_annualizedvolatility() const;
  void _internal_set_annualizedvolatility(float value);
  public:

  // float totalReturns = 13;
  void clear_totalreturns();
  float totalreturns() const;
  void set_totalreturns(float value);
  private:
  float _internal_totalreturns() const;
  void _internal_set_totalreturns(float value);
  public:

  // float variance = 14;
  void clear_variance();
  float variance() const;
  void set_variance(float value);
  private:
  float _internal_variance() const;
  void _internal_set_variance(float value);
  public:

  // int32 buyTimes = 15;
  void clear_buytimes();
  ::PROTOBUF_NAMESPACE_ID::int32 buytimes() const;
  void set_buytimes(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_buytimes() const;
  void _internal_set_buytimes(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 sellTimes = 16;
  void clear_selltimes();
  ::PROTOBUF_NAMESPACE_ID::int32 selltimes() const;
  void set_selltimes(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_selltimes() const;
  void _internal_set_selltimes(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 stoplossTimes = 17;
  void clear_stoplosstimes();
  ::PROTOBUF_NAMESPACE_ID::int32 stoplosstimes() const;
  void set_stoplosstimes(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_stoplosstimes() const;
  void _internal_set_stoplosstimes(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 maxUpDayTs = 18;
  void clear_maxupdayts();
  ::PROTOBUF_NAMESPACE_ID::int64 maxupdayts() const;
  void set_maxupdayts(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_maxupdayts() const;
  void _internal_set_maxupdayts(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 maxDownDayTs = 20;
  void clear_maxdowndayts();
  ::PROTOBUF_NAMESPACE_ID::int64 maxdowndayts() const;
  void set_maxdowndayts(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_maxdowndayts() const;
  void _internal_set_maxdowndayts(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // float maxPerUpDay = 19;
  void clear_maxperupday();
  float maxperupday() const;
  void set_maxperupday(float value);
  private:
  float _internal_maxperupday() const;
  void _internal_set_maxperupday(float value);
  public:

  // float maxPerDownDay = 21;
  void clear_maxperdownday();
  float maxperdownday() const;
  void set_maxperdownday(float value);
  private:
  float _internal_maxperdownday() const;
  void _internal_set_maxperdownday(float value);
  public:

  // int64 maxUpWeekTs = 22;
  void clear_maxupweekts();
  ::PROTOBUF_NAMESPACE_ID::int64 maxupweekts() const;
  void set_maxupweekts(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_maxupweekts() const;
  void _internal_set_maxupweekts(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 maxDownWeekTs = 24;
  void clear_maxdownweekts();
  ::PROTOBUF_NAMESPACE_ID::int64 maxdownweekts() const;
  void set_maxdownweekts(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_maxdownweekts() const;
  void _internal_set_maxdownweekts(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // float maxPerUpWeek = 23;
  void clear_maxperupweek();
  float maxperupweek() const;
  void set_maxperupweek(float value);
  private:
  float _internal_maxperupweek() const;
  void _internal_set_maxperupweek(float value);
  public:

  // float maxPerDownWeek = 25;
  void clear_maxperdownweek();
  float maxperdownweek() const;
  void set_maxperdownweek(float value);
  private:
  float _internal_maxperdownweek() const;
  void _internal_set_maxperdownweek(float value);
  public:

  // int64 maxUpMonthTs = 26;
  void clear_maxupmonthts();
  ::PROTOBUF_NAMESPACE_ID::int64 maxupmonthts() const;
  void set_maxupmonthts(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_maxupmonthts() const;
  void _internal_set_maxupmonthts(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 maxDownMonthTs = 28;
  void clear_maxdownmonthts();
  ::PROTOBUF_NAMESPACE_ID::int64 maxdownmonthts() const;
  void set_maxdownmonthts(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_maxdownmonthts() const;
  void _internal_set_maxdownmonthts(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // float maxPerUpMonth = 27;
  void clear_maxperupmonth();
  float maxperupmonth() const;
  void set_maxperupmonth(float value);
  private:
  float _internal_maxperupmonth() const;
  void _internal_set_maxperupmonth(float value);
  public:

  // float maxPerDownMonth = 29;
  void clear_maxperdownmonth();
  float maxperdownmonth() const;
  void set_maxperdownmonth(float value);
  private:
  float _internal_maxperdownmonth() const;
  void _internal_set_maxperdownmonth(float value);
  public:

  // int64 maxUpYearTs = 30;
  void clear_maxupyearts();
  ::PROTOBUF_NAMESPACE_ID::int64 maxupyearts() const;
  void set_maxupyearts(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_maxupyearts() const;
  void _internal_set_maxupyearts(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 maxDownYearTs = 32;
  void clear_maxdownyearts();
  ::PROTOBUF_NAMESPACE_ID::int64 maxdownyearts() const;
  void set_maxdownyearts(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_maxdownyearts() const;
  void _internal_set_maxdownyearts(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // float maxPerUpYear = 31;
  void clear_maxperupyear();
  float maxperupyear() const;
  void set_maxperupyear(float value);
  private:
  float _internal_maxperupyear() const;
  void _internal_set_maxperupyear(float value);
  public:

  // float maxPerDownYear = 33;
  void clear_maxperdownyear();
  float maxperdownyear() const;
  void set_maxperdownyear(float value);
  private:
  float _internal_maxperdownyear() const;
  void _internal_set_maxperdownyear(float value);
  public:

  // @@protoc_insertion_point(class_scope:tradingpb.PNLData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tradingpb::PNLDataValue > values_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::tradingpb::Asset* asset_;
  ::PROTOBUF_NAMESPACE_ID::int64 maxdrawdownstartts_;
  float maxdrawdown_;
  float maxdrawup_;
  ::PROTOBUF_NAMESPACE_ID::int64 maxdrawdownendts_;
  ::PROTOBUF_NAMESPACE_ID::int64 maxdrawupstartts_;
  ::PROTOBUF_NAMESPACE_ID::int64 maxdrawupendts_;
  float sharpe_;
  float annualizedreturns_;
  float annualizedvolatility_;
  float totalreturns_;
  float variance_;
  ::PROTOBUF_NAMESPACE_ID::int32 buytimes_;
  ::PROTOBUF_NAMESPACE_ID::int32 selltimes_;
  ::PROTOBUF_NAMESPACE_ID::int32 stoplosstimes_;
  ::PROTOBUF_NAMESPACE_ID::int64 maxupdayts_;
  ::PROTOBUF_NAMESPACE_ID::int64 maxdowndayts_;
  float maxperupday_;
  float maxperdownday_;
  ::PROTOBUF_NAMESPACE_ID::int64 maxupweekts_;
  ::PROTOBUF_NAMESPACE_ID::int64 maxdownweekts_;
  float maxperupweek_;
  float maxperdownweek_;
  ::PROTOBUF_NAMESPACE_ID::int64 maxupmonthts_;
  ::PROTOBUF_NAMESPACE_ID::int64 maxdownmonthts_;
  float maxperupmonth_;
  float maxperdownmonth_;
  ::PROTOBUF_NAMESPACE_ID::int64 maxupyearts_;
  ::PROTOBUF_NAMESPACE_ID::int64 maxdownyearts_;
  float maxperupyear_;
  float maxperdownyear_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tradingnode2_2eproto;
};
// -------------------------------------------------------------------

class RequestCalcPNL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tradingpb.RequestCalcPNL) */ {
 public:
  RequestCalcPNL();
  virtual ~RequestCalcPNL();

  RequestCalcPNL(const RequestCalcPNL& from);
  RequestCalcPNL(RequestCalcPNL&& from) noexcept
    : RequestCalcPNL() {
    *this = ::std::move(from);
  }

  inline RequestCalcPNL& operator=(const RequestCalcPNL& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestCalcPNL& operator=(RequestCalcPNL&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RequestCalcPNL& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestCalcPNL* internal_default_instance() {
    return reinterpret_cast<const RequestCalcPNL*>(
               &_RequestCalcPNL_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(RequestCalcPNL& a, RequestCalcPNL& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestCalcPNL* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestCalcPNL* New() const final {
    return CreateMaybeMessage<RequestCalcPNL>(nullptr);
  }

  RequestCalcPNL* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestCalcPNL>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestCalcPNL& from);
  void MergeFrom(const RequestCalcPNL& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestCalcPNL* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tradingpb.RequestCalcPNL";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tradingnode2_2eproto);
    return ::descriptor_table_tradingnode2_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAssetsFieldNumber = 2,
    kBaselinesFieldNumber = 3,
    kStrategiesFieldNumber = 6,
    kTokenFieldNumber = 1,
    kStartTsFieldNumber = 4,
    kEndTsFieldNumber = 5,
  };
  // repeated .tradingpb.Asset assets = 2;
  int assets_size() const;
  private:
  int _internal_assets_size() const;
  public:
  void clear_assets();
  ::tradingpb::Asset* mutable_assets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tradingpb::Asset >*
      mutable_assets();
  private:
  const ::tradingpb::Asset& _internal_assets(int index) const;
  ::tradingpb::Asset* _internal_add_assets();
  public:
  const ::tradingpb::Asset& assets(int index) const;
  ::tradingpb::Asset* add_assets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tradingpb::Asset >&
      assets() const;

  // repeated .tradingpb.Asset baselines = 3;
  int baselines_size() const;
  private:
  int _internal_baselines_size() const;
  public:
  void clear_baselines();
  ::tradingpb::Asset* mutable_baselines(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tradingpb::Asset >*
      mutable_baselines();
  private:
  const ::tradingpb::Asset& _internal_baselines(int index) const;
  ::tradingpb::Asset* _internal_add_baselines();
  public:
  const ::tradingpb::Asset& baselines(int index) const;
  ::tradingpb::Asset* add_baselines();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tradingpb::Asset >&
      baselines() const;

  // repeated .tradingpb.Strategy strategies = 6;
  int strategies_size() const;
  private:
  int _internal_strategies_size() const;
  public:
  void clear_strategies();
  ::tradingpb::Strategy* mutable_strategies(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tradingpb::Strategy >*
      mutable_strategies();
  private:
  const ::tradingpb::Strategy& _internal_strategies(int index) const;
  ::tradingpb::Strategy* _internal_add_strategies();
  public:
  const ::tradingpb::Strategy& strategies(int index) const;
  ::tradingpb::Strategy* add_strategies();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tradingpb::Strategy >&
      strategies() const;

  // string token = 1;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // int64 startTs = 4;
  void clear_startts();
  ::PROTOBUF_NAMESPACE_ID::int64 startts() const;
  void set_startts(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_startts() const;
  void _internal_set_startts(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 endTs = 5;
  void clear_endts();
  ::PROTOBUF_NAMESPACE_ID::int64 endts() const;
  void set_endts(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_endts() const;
  void _internal_set_endts(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:tradingpb.RequestCalcPNL)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tradingpb::Asset > assets_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tradingpb::Asset > baselines_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tradingpb::Strategy > strategies_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::int64 startts_;
  ::PROTOBUF_NAMESPACE_ID::int64 endts_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tradingnode2_2eproto;
};
// -------------------------------------------------------------------

class ReplyCalcPNL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tradingpb.ReplyCalcPNL) */ {
 public:
  ReplyCalcPNL();
  virtual ~ReplyCalcPNL();

  ReplyCalcPNL(const ReplyCalcPNL& from);
  ReplyCalcPNL(ReplyCalcPNL&& from) noexcept
    : ReplyCalcPNL() {
    *this = ::std::move(from);
  }

  inline ReplyCalcPNL& operator=(const ReplyCalcPNL& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReplyCalcPNL& operator=(ReplyCalcPNL&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReplyCalcPNL& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReplyCalcPNL* internal_default_instance() {
    return reinterpret_cast<const ReplyCalcPNL*>(
               &_ReplyCalcPNL_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ReplyCalcPNL& a, ReplyCalcPNL& b) {
    a.Swap(&b);
  }
  inline void Swap(ReplyCalcPNL* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReplyCalcPNL* New() const final {
    return CreateMaybeMessage<ReplyCalcPNL>(nullptr);
  }

  ReplyCalcPNL* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReplyCalcPNL>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReplyCalcPNL& from);
  void MergeFrom(const ReplyCalcPNL& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReplyCalcPNL* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tradingpb.ReplyCalcPNL";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tradingnode2_2eproto);
    return ::descriptor_table_tradingnode2_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPnlFieldNumber = 1,
  };
  // repeated .tradingpb.PNLData pnl = 1;
  int pnl_size() const;
  private:
  int _internal_pnl_size() const;
  public:
  void clear_pnl();
  ::tradingpb::PNLData* mutable_pnl(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tradingpb::PNLData >*
      mutable_pnl();
  private:
  const ::tradingpb::PNLData& _internal_pnl(int index) const;
  ::tradingpb::PNLData* _internal_add_pnl();
  public:
  const ::tradingpb::PNLData& pnl(int index) const;
  ::tradingpb::PNLData* add_pnl();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tradingpb::PNLData >&
      pnl() const;

  // @@protoc_insertion_point(class_scope:tradingpb.ReplyCalcPNL)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tradingpb::PNLData > pnl_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tradingnode2_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Asset

// string market = 1;
inline void Asset::clear_market() {
  market_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Asset::market() const {
  // @@protoc_insertion_point(field_get:tradingpb.Asset.market)
  return _internal_market();
}
inline void Asset::set_market(const std::string& value) {
  _internal_set_market(value);
  // @@protoc_insertion_point(field_set:tradingpb.Asset.market)
}
inline std::string* Asset::mutable_market() {
  // @@protoc_insertion_point(field_mutable:tradingpb.Asset.market)
  return _internal_mutable_market();
}
inline const std::string& Asset::_internal_market() const {
  return market_.GetNoArena();
}
inline void Asset::_internal_set_market(const std::string& value) {
  
  market_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Asset::set_market(std::string&& value) {
  
  market_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tradingpb.Asset.market)
}
inline void Asset::set_market(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  market_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tradingpb.Asset.market)
}
inline void Asset::set_market(const char* value, size_t size) {
  
  market_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tradingpb.Asset.market)
}
inline std::string* Asset::_internal_mutable_market() {
  
  return market_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Asset::release_market() {
  // @@protoc_insertion_point(field_release:tradingpb.Asset.market)
  
  return market_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Asset::set_allocated_market(std::string* market) {
  if (market != nullptr) {
    
  } else {
    
  }
  market_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), market);
  // @@protoc_insertion_point(field_set_allocated:tradingpb.Asset.market)
}

// string code = 2;
inline void Asset::clear_code() {
  code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Asset::code() const {
  // @@protoc_insertion_point(field_get:tradingpb.Asset.code)
  return _internal_code();
}
inline void Asset::set_code(const std::string& value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:tradingpb.Asset.code)
}
inline std::string* Asset::mutable_code() {
  // @@protoc_insertion_point(field_mutable:tradingpb.Asset.code)
  return _internal_mutable_code();
}
inline const std::string& Asset::_internal_code() const {
  return code_.GetNoArena();
}
inline void Asset::_internal_set_code(const std::string& value) {
  
  code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Asset::set_code(std::string&& value) {
  
  code_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tradingpb.Asset.code)
}
inline void Asset::set_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tradingpb.Asset.code)
}
inline void Asset::set_code(const char* value, size_t size) {
  
  code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tradingpb.Asset.code)
}
inline std::string* Asset::_internal_mutable_code() {
  
  return code_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Asset::release_code() {
  // @@protoc_insertion_point(field_release:tradingpb.Asset.code)
  
  return code_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Asset::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  code_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:tradingpb.Asset.code)
}

// -------------------------------------------------------------------

// CtrlCondition

// string indicator = 1;
inline void CtrlCondition::clear_indicator() {
  indicator_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CtrlCondition::indicator() const {
  // @@protoc_insertion_point(field_get:tradingpb.CtrlCondition.indicator)
  return _internal_indicator();
}
inline void CtrlCondition::set_indicator(const std::string& value) {
  _internal_set_indicator(value);
  // @@protoc_insertion_point(field_set:tradingpb.CtrlCondition.indicator)
}
inline std::string* CtrlCondition::mutable_indicator() {
  // @@protoc_insertion_point(field_mutable:tradingpb.CtrlCondition.indicator)
  return _internal_mutable_indicator();
}
inline const std::string& CtrlCondition::_internal_indicator() const {
  return indicator_.GetNoArena();
}
inline void CtrlCondition::_internal_set_indicator(const std::string& value) {
  
  indicator_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CtrlCondition::set_indicator(std::string&& value) {
  
  indicator_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tradingpb.CtrlCondition.indicator)
}
inline void CtrlCondition::set_indicator(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  indicator_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tradingpb.CtrlCondition.indicator)
}
inline void CtrlCondition::set_indicator(const char* value, size_t size) {
  
  indicator_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tradingpb.CtrlCondition.indicator)
}
inline std::string* CtrlCondition::_internal_mutable_indicator() {
  
  return indicator_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CtrlCondition::release_indicator() {
  // @@protoc_insertion_point(field_release:tradingpb.CtrlCondition.indicator)
  
  return indicator_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CtrlCondition::set_allocated_indicator(std::string* indicator) {
  if (indicator != nullptr) {
    
  } else {
    
  }
  indicator_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), indicator);
  // @@protoc_insertion_point(field_set_allocated:tradingpb.CtrlCondition.indicator)
}

// repeated float vals = 2;
inline int CtrlCondition::_internal_vals_size() const {
  return vals_.size();
}
inline int CtrlCondition::vals_size() const {
  return _internal_vals_size();
}
inline void CtrlCondition::clear_vals() {
  vals_.Clear();
}
inline float CtrlCondition::_internal_vals(int index) const {
  return vals_.Get(index);
}
inline float CtrlCondition::vals(int index) const {
  // @@protoc_insertion_point(field_get:tradingpb.CtrlCondition.vals)
  return _internal_vals(index);
}
inline void CtrlCondition::set_vals(int index, float value) {
  vals_.Set(index, value);
  // @@protoc_insertion_point(field_set:tradingpb.CtrlCondition.vals)
}
inline void CtrlCondition::_internal_add_vals(float value) {
  vals_.Add(value);
}
inline void CtrlCondition::add_vals(float value) {
  _internal_add_vals(value);
  // @@protoc_insertion_point(field_add:tradingpb.CtrlCondition.vals)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CtrlCondition::_internal_vals() const {
  return vals_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CtrlCondition::vals() const {
  // @@protoc_insertion_point(field_list:tradingpb.CtrlCondition.vals)
  return _internal_vals();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CtrlCondition::_internal_mutable_vals() {
  return &vals_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CtrlCondition::mutable_vals() {
  // @@protoc_insertion_point(field_mutable_list:tradingpb.CtrlCondition.vals)
  return _internal_mutable_vals();
}

// repeated string operators = 3;
inline int CtrlCondition::_internal_operators_size() const {
  return operators_.size();
}
inline int CtrlCondition::operators_size() const {
  return _internal_operators_size();
}
inline void CtrlCondition::clear_operators() {
  operators_.Clear();
}
inline std::string* CtrlCondition::add_operators() {
  // @@protoc_insertion_point(field_add_mutable:tradingpb.CtrlCondition.operators)
  return _internal_add_operators();
}
inline const std::string& CtrlCondition::_internal_operators(int index) const {
  return operators_.Get(index);
}
inline const std::string& CtrlCondition::operators(int index) const {
  // @@protoc_insertion_point(field_get:tradingpb.CtrlCondition.operators)
  return _internal_operators(index);
}
inline std::string* CtrlCondition::mutable_operators(int index) {
  // @@protoc_insertion_point(field_mutable:tradingpb.CtrlCondition.operators)
  return operators_.Mutable(index);
}
inline void CtrlCondition::set_operators(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:tradingpb.CtrlCondition.operators)
  operators_.Mutable(index)->assign(value);
}
inline void CtrlCondition::set_operators(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:tradingpb.CtrlCondition.operators)
  operators_.Mutable(index)->assign(std::move(value));
}
inline void CtrlCondition::set_operators(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  operators_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tradingpb.CtrlCondition.operators)
}
inline void CtrlCondition::set_operators(int index, const char* value, size_t size) {
  operators_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tradingpb.CtrlCondition.operators)
}
inline std::string* CtrlCondition::_internal_add_operators() {
  return operators_.Add();
}
inline void CtrlCondition::add_operators(const std::string& value) {
  operators_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tradingpb.CtrlCondition.operators)
}
inline void CtrlCondition::add_operators(std::string&& value) {
  operators_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:tradingpb.CtrlCondition.operators)
}
inline void CtrlCondition::add_operators(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  operators_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tradingpb.CtrlCondition.operators)
}
inline void CtrlCondition::add_operators(const char* value, size_t size) {
  operators_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tradingpb.CtrlCondition.operators)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CtrlCondition::operators() const {
  // @@protoc_insertion_point(field_list:tradingpb.CtrlCondition.operators)
  return operators_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CtrlCondition::mutable_operators() {
  // @@protoc_insertion_point(field_mutable_list:tradingpb.CtrlCondition.operators)
  return &operators_;
}

// string combCondition = 4;
inline void CtrlCondition::clear_combcondition() {
  combcondition_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CtrlCondition::combcondition() const {
  // @@protoc_insertion_point(field_get:tradingpb.CtrlCondition.combCondition)
  return _internal_combcondition();
}
inline void CtrlCondition::set_combcondition(const std::string& value) {
  _internal_set_combcondition(value);
  // @@protoc_insertion_point(field_set:tradingpb.CtrlCondition.combCondition)
}
inline std::string* CtrlCondition::mutable_combcondition() {
  // @@protoc_insertion_point(field_mutable:tradingpb.CtrlCondition.combCondition)
  return _internal_mutable_combcondition();
}
inline const std::string& CtrlCondition::_internal_combcondition() const {
  return combcondition_.GetNoArena();
}
inline void CtrlCondition::_internal_set_combcondition(const std::string& value) {
  
  combcondition_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CtrlCondition::set_combcondition(std::string&& value) {
  
  combcondition_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tradingpb.CtrlCondition.combCondition)
}
inline void CtrlCondition::set_combcondition(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  combcondition_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tradingpb.CtrlCondition.combCondition)
}
inline void CtrlCondition::set_combcondition(const char* value, size_t size) {
  
  combcondition_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tradingpb.CtrlCondition.combCondition)
}
inline std::string* CtrlCondition::_internal_mutable_combcondition() {
  
  return combcondition_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CtrlCondition::release_combcondition() {
  // @@protoc_insertion_point(field_release:tradingpb.CtrlCondition.combCondition)
  
  return combcondition_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CtrlCondition::set_allocated_combcondition(std::string* combcondition) {
  if (combcondition != nullptr) {
    
  } else {
    
  }
  combcondition_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), combcondition);
  // @@protoc_insertion_point(field_set_allocated:tradingpb.CtrlCondition.combCondition)
}

// -------------------------------------------------------------------

// Strategy

// string name = 1;
inline void Strategy::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Strategy::name() const {
  // @@protoc_insertion_point(field_get:tradingpb.Strategy.name)
  return _internal_name();
}
inline void Strategy::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:tradingpb.Strategy.name)
}
inline std::string* Strategy::mutable_name() {
  // @@protoc_insertion_point(field_mutable:tradingpb.Strategy.name)
  return _internal_mutable_name();
}
inline const std::string& Strategy::_internal_name() const {
  return name_.GetNoArena();
}
inline void Strategy::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Strategy::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tradingpb.Strategy.name)
}
inline void Strategy::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tradingpb.Strategy.name)
}
inline void Strategy::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tradingpb.Strategy.name)
}
inline std::string* Strategy::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Strategy::release_name() {
  // @@protoc_insertion_point(field_release:tradingpb.Strategy.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Strategy::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:tradingpb.Strategy.name)
}

// .tradingpb.Asset asset = 2;
inline bool Strategy::_internal_has_asset() const {
  return this != internal_default_instance() && asset_ != nullptr;
}
inline bool Strategy::has_asset() const {
  return _internal_has_asset();
}
inline void Strategy::clear_asset() {
  if (GetArenaNoVirtual() == nullptr && asset_ != nullptr) {
    delete asset_;
  }
  asset_ = nullptr;
}
inline const ::tradingpb::Asset& Strategy::_internal_asset() const {
  const ::tradingpb::Asset* p = asset_;
  return p != nullptr ? *p : *reinterpret_cast<const ::tradingpb::Asset*>(
      &::tradingpb::_Asset_default_instance_);
}
inline const ::tradingpb::Asset& Strategy::asset() const {
  // @@protoc_insertion_point(field_get:tradingpb.Strategy.asset)
  return _internal_asset();
}
inline ::tradingpb::Asset* Strategy::release_asset() {
  // @@protoc_insertion_point(field_release:tradingpb.Strategy.asset)
  
  ::tradingpb::Asset* temp = asset_;
  asset_ = nullptr;
  return temp;
}
inline ::tradingpb::Asset* Strategy::_internal_mutable_asset() {
  
  if (asset_ == nullptr) {
    auto* p = CreateMaybeMessage<::tradingpb::Asset>(GetArenaNoVirtual());
    asset_ = p;
  }
  return asset_;
}
inline ::tradingpb::Asset* Strategy::mutable_asset() {
  // @@protoc_insertion_point(field_mutable:tradingpb.Strategy.asset)
  return _internal_mutable_asset();
}
inline void Strategy::set_allocated_asset(::tradingpb::Asset* asset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete asset_;
  }
  if (asset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      asset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, asset, submessage_arena);
    }
    
  } else {
    
  }
  asset_ = asset;
  // @@protoc_insertion_point(field_set_allocated:tradingpb.Strategy.asset)
}

// repeated .tradingpb.CtrlCondition buy = 3;
inline int Strategy::_internal_buy_size() const {
  return buy_.size();
}
inline int Strategy::buy_size() const {
  return _internal_buy_size();
}
inline void Strategy::clear_buy() {
  buy_.Clear();
}
inline ::tradingpb::CtrlCondition* Strategy::mutable_buy(int index) {
  // @@protoc_insertion_point(field_mutable:tradingpb.Strategy.buy)
  return buy_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tradingpb::CtrlCondition >*
Strategy::mutable_buy() {
  // @@protoc_insertion_point(field_mutable_list:tradingpb.Strategy.buy)
  return &buy_;
}
inline const ::tradingpb::CtrlCondition& Strategy::_internal_buy(int index) const {
  return buy_.Get(index);
}
inline const ::tradingpb::CtrlCondition& Strategy::buy(int index) const {
  // @@protoc_insertion_point(field_get:tradingpb.Strategy.buy)
  return _internal_buy(index);
}
inline ::tradingpb::CtrlCondition* Strategy::_internal_add_buy() {
  return buy_.Add();
}
inline ::tradingpb::CtrlCondition* Strategy::add_buy() {
  // @@protoc_insertion_point(field_add:tradingpb.Strategy.buy)
  return _internal_add_buy();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tradingpb::CtrlCondition >&
Strategy::buy() const {
  // @@protoc_insertion_point(field_list:tradingpb.Strategy.buy)
  return buy_;
}

// repeated .tradingpb.CtrlCondition sell = 4;
inline int Strategy::_internal_sell_size() const {
  return sell_.size();
}
inline int Strategy::sell_size() const {
  return _internal_sell_size();
}
inline void Strategy::clear_sell() {
  sell_.Clear();
}
inline ::tradingpb::CtrlCondition* Strategy::mutable_sell(int index) {
  // @@protoc_insertion_point(field_mutable:tradingpb.Strategy.sell)
  return sell_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tradingpb::CtrlCondition >*
Strategy::mutable_sell() {
  // @@protoc_insertion_point(field_mutable_list:tradingpb.Strategy.sell)
  return &sell_;
}
inline const ::tradingpb::CtrlCondition& Strategy::_internal_sell(int index) const {
  return sell_.Get(index);
}
inline const ::tradingpb::CtrlCondition& Strategy::sell(int index) const {
  // @@protoc_insertion_point(field_get:tradingpb.Strategy.sell)
  return _internal_sell(index);
}
inline ::tradingpb::CtrlCondition* Strategy::_internal_add_sell() {
  return sell_.Add();
}
inline ::tradingpb::CtrlCondition* Strategy::add_sell() {
  // @@protoc_insertion_point(field_add:tradingpb.Strategy.sell)
  return _internal_add_sell();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tradingpb::CtrlCondition >&
Strategy::sell() const {
  // @@protoc_insertion_point(field_list:tradingpb.Strategy.sell)
  return sell_;
}

// repeated .tradingpb.CtrlCondition stoploss = 5;
inline int Strategy::_internal_stoploss_size() const {
  return stoploss_.size();
}
inline int Strategy::stoploss_size() const {
  return _internal_stoploss_size();
}
inline void Strategy::clear_stoploss() {
  stoploss_.Clear();
}
inline ::tradingpb::CtrlCondition* Strategy::mutable_stoploss(int index) {
  // @@protoc_insertion_point(field_mutable:tradingpb.Strategy.stoploss)
  return stoploss_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tradingpb::CtrlCondition >*
Strategy::mutable_stoploss() {
  // @@protoc_insertion_point(field_mutable_list:tradingpb.Strategy.stoploss)
  return &stoploss_;
}
inline const ::tradingpb::CtrlCondition& Strategy::_internal_stoploss(int index) const {
  return stoploss_.Get(index);
}
inline const ::tradingpb::CtrlCondition& Strategy::stoploss(int index) const {
  // @@protoc_insertion_point(field_get:tradingpb.Strategy.stoploss)
  return _internal_stoploss(index);
}
inline ::tradingpb::CtrlCondition* Strategy::_internal_add_stoploss() {
  return stoploss_.Add();
}
inline ::tradingpb::CtrlCondition* Strategy::add_stoploss() {
  // @@protoc_insertion_point(field_add:tradingpb.Strategy.stoploss)
  return _internal_add_stoploss();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tradingpb::CtrlCondition >&
Strategy::stoploss() const {
  // @@protoc_insertion_point(field_list:tradingpb.Strategy.stoploss)
  return stoploss_;
}

// -------------------------------------------------------------------

// PNLDataValue

// int64 ts = 1;
inline void PNLDataValue::clear_ts() {
  ts_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PNLDataValue::_internal_ts() const {
  return ts_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PNLDataValue::ts() const {
  // @@protoc_insertion_point(field_get:tradingpb.PNLDataValue.ts)
  return _internal_ts();
}
inline void PNLDataValue::_internal_set_ts(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  ts_ = value;
}
inline void PNLDataValue::set_ts(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_ts(value);
  // @@protoc_insertion_point(field_set:tradingpb.PNLDataValue.ts)
}

// float value = 2;
inline void PNLDataValue::clear_value() {
  value_ = 0;
}
inline float PNLDataValue::_internal_value() const {
  return value_;
}
inline float PNLDataValue::value() const {
  // @@protoc_insertion_point(field_get:tradingpb.PNLDataValue.value)
  return _internal_value();
}
inline void PNLDataValue::_internal_set_value(float value) {
  
  value_ = value;
}
inline void PNLDataValue::set_value(float value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:tradingpb.PNLDataValue.value)
}

// -------------------------------------------------------------------

// PNLData

// string name = 1;
inline void PNLData::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PNLData::name() const {
  // @@protoc_insertion_point(field_get:tradingpb.PNLData.name)
  return _internal_name();
}
inline void PNLData::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:tradingpb.PNLData.name)
}
inline std::string* PNLData::mutable_name() {
  // @@protoc_insertion_point(field_mutable:tradingpb.PNLData.name)
  return _internal_mutable_name();
}
inline const std::string& PNLData::_internal_name() const {
  return name_.GetNoArena();
}
inline void PNLData::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PNLData::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tradingpb.PNLData.name)
}
inline void PNLData::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tradingpb.PNLData.name)
}
inline void PNLData::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tradingpb.PNLData.name)
}
inline std::string* PNLData::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PNLData::release_name() {
  // @@protoc_insertion_point(field_release:tradingpb.PNLData.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PNLData::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:tradingpb.PNLData.name)
}

// .tradingpb.Asset asset = 2;
inline bool PNLData::_internal_has_asset() const {
  return this != internal_default_instance() && asset_ != nullptr;
}
inline bool PNLData::has_asset() const {
  return _internal_has_asset();
}
inline void PNLData::clear_asset() {
  if (GetArenaNoVirtual() == nullptr && asset_ != nullptr) {
    delete asset_;
  }
  asset_ = nullptr;
}
inline const ::tradingpb::Asset& PNLData::_internal_asset() const {
  const ::tradingpb::Asset* p = asset_;
  return p != nullptr ? *p : *reinterpret_cast<const ::tradingpb::Asset*>(
      &::tradingpb::_Asset_default_instance_);
}
inline const ::tradingpb::Asset& PNLData::asset() const {
  // @@protoc_insertion_point(field_get:tradingpb.PNLData.asset)
  return _internal_asset();
}
inline ::tradingpb::Asset* PNLData::release_asset() {
  // @@protoc_insertion_point(field_release:tradingpb.PNLData.asset)
  
  ::tradingpb::Asset* temp = asset_;
  asset_ = nullptr;
  return temp;
}
inline ::tradingpb::Asset* PNLData::_internal_mutable_asset() {
  
  if (asset_ == nullptr) {
    auto* p = CreateMaybeMessage<::tradingpb::Asset>(GetArenaNoVirtual());
    asset_ = p;
  }
  return asset_;
}
inline ::tradingpb::Asset* PNLData::mutable_asset() {
  // @@protoc_insertion_point(field_mutable:tradingpb.PNLData.asset)
  return _internal_mutable_asset();
}
inline void PNLData::set_allocated_asset(::tradingpb::Asset* asset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete asset_;
  }
  if (asset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      asset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, asset, submessage_arena);
    }
    
  } else {
    
  }
  asset_ = asset;
  // @@protoc_insertion_point(field_set_allocated:tradingpb.PNLData.asset)
}

// repeated .tradingpb.PNLDataValue values = 3;
inline int PNLData::_internal_values_size() const {
  return values_.size();
}
inline int PNLData::values_size() const {
  return _internal_values_size();
}
inline void PNLData::clear_values() {
  values_.Clear();
}
inline ::tradingpb::PNLDataValue* PNLData::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:tradingpb.PNLData.values)
  return values_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tradingpb::PNLDataValue >*
PNLData::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:tradingpb.PNLData.values)
  return &values_;
}
inline const ::tradingpb::PNLDataValue& PNLData::_internal_values(int index) const {
  return values_.Get(index);
}
inline const ::tradingpb::PNLDataValue& PNLData::values(int index) const {
  // @@protoc_insertion_point(field_get:tradingpb.PNLData.values)
  return _internal_values(index);
}
inline ::tradingpb::PNLDataValue* PNLData::_internal_add_values() {
  return values_.Add();
}
inline ::tradingpb::PNLDataValue* PNLData::add_values() {
  // @@protoc_insertion_point(field_add:tradingpb.PNLData.values)
  return _internal_add_values();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tradingpb::PNLDataValue >&
PNLData::values() const {
  // @@protoc_insertion_point(field_list:tradingpb.PNLData.values)
  return values_;
}

// float maxDrawdown = 4;
inline void PNLData::clear_maxdrawdown() {
  maxdrawdown_ = 0;
}
inline float PNLData::_internal_maxdrawdown() const {
  return maxdrawdown_;
}
inline float PNLData::maxdrawdown() const {
  // @@protoc_insertion_point(field_get:tradingpb.PNLData.maxDrawdown)
  return _internal_maxdrawdown();
}
inline void PNLData::_internal_set_maxdrawdown(float value) {
  
  maxdrawdown_ = value;
}
inline void PNLData::set_maxdrawdown(float value) {
  _internal_set_maxdrawdown(value);
  // @@protoc_insertion_point(field_set:tradingpb.PNLData.maxDrawdown)
}

// int64 maxDrawdownStartTs = 5;
inline void PNLData::clear_maxdrawdownstartts() {
  maxdrawdownstartts_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PNLData::_internal_maxdrawdownstartts() const {
  return maxdrawdownstartts_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PNLData::maxdrawdownstartts() const {
  // @@protoc_insertion_point(field_get:tradingpb.PNLData.maxDrawdownStartTs)
  return _internal_maxdrawdownstartts();
}
inline void PNLData::_internal_set_maxdrawdownstartts(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  maxdrawdownstartts_ = value;
}
inline void PNLData::set_maxdrawdownstartts(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_maxdrawdownstartts(value);
  // @@protoc_insertion_point(field_set:tradingpb.PNLData.maxDrawdownStartTs)
}

// int64 maxDrawdownEndTs = 6;
inline void PNLData::clear_maxdrawdownendts() {
  maxdrawdownendts_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PNLData::_internal_maxdrawdownendts() const {
  return maxdrawdownendts_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PNLData::maxdrawdownendts() const {
  // @@protoc_insertion_point(field_get:tradingpb.PNLData.maxDrawdownEndTs)
  return _internal_maxdrawdownendts();
}
inline void PNLData::_internal_set_maxdrawdownendts(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  maxdrawdownendts_ = value;
}
inline void PNLData::set_maxdrawdownendts(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_maxdrawdownendts(value);
  // @@protoc_insertion_point(field_set:tradingpb.PNLData.maxDrawdownEndTs)
}

// float maxDrawup = 7;
inline void PNLData::clear_maxdrawup() {
  maxdrawup_ = 0;
}
inline float PNLData::_internal_maxdrawup() const {
  return maxdrawup_;
}
inline float PNLData::maxdrawup() const {
  // @@protoc_insertion_point(field_get:tradingpb.PNLData.maxDrawup)
  return _internal_maxdrawup();
}
inline void PNLData::_internal_set_maxdrawup(float value) {
  
  maxdrawup_ = value;
}
inline void PNLData::set_maxdrawup(float value) {
  _internal_set_maxdrawup(value);
  // @@protoc_insertion_point(field_set:tradingpb.PNLData.maxDrawup)
}

// int64 maxDrawupStartTs = 8;
inline void PNLData::clear_maxdrawupstartts() {
  maxdrawupstartts_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PNLData::_internal_maxdrawupstartts() const {
  return maxdrawupstartts_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PNLData::maxdrawupstartts() const {
  // @@protoc_insertion_point(field_get:tradingpb.PNLData.maxDrawupStartTs)
  return _internal_maxdrawupstartts();
}
inline void PNLData::_internal_set_maxdrawupstartts(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  maxdrawupstartts_ = value;
}
inline void PNLData::set_maxdrawupstartts(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_maxdrawupstartts(value);
  // @@protoc_insertion_point(field_set:tradingpb.PNLData.maxDrawupStartTs)
}

// int64 maxDrawupEndTs = 9;
inline void PNLData::clear_maxdrawupendts() {
  maxdrawupendts_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PNLData::_internal_maxdrawupendts() const {
  return maxdrawupendts_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PNLData::maxdrawupendts() const {
  // @@protoc_insertion_point(field_get:tradingpb.PNLData.maxDrawupEndTs)
  return _internal_maxdrawupendts();
}
inline void PNLData::_internal_set_maxdrawupendts(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  maxdrawupendts_ = value;
}
inline void PNLData::set_maxdrawupendts(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_maxdrawupendts(value);
  // @@protoc_insertion_point(field_set:tradingpb.PNLData.maxDrawupEndTs)
}

// float sharpe = 10;
inline void PNLData::clear_sharpe() {
  sharpe_ = 0;
}
inline float PNLData::_internal_sharpe() const {
  return sharpe_;
}
inline float PNLData::sharpe() const {
  // @@protoc_insertion_point(field_get:tradingpb.PNLData.sharpe)
  return _internal_sharpe();
}
inline void PNLData::_internal_set_sharpe(float value) {
  
  sharpe_ = value;
}
inline void PNLData::set_sharpe(float value) {
  _internal_set_sharpe(value);
  // @@protoc_insertion_point(field_set:tradingpb.PNLData.sharpe)
}

// float annualizedReturns = 11;
inline void PNLData::clear_annualizedreturns() {
  annualizedreturns_ = 0;
}
inline float PNLData::_internal_annualizedreturns() const {
  return annualizedreturns_;
}
inline float PNLData::annualizedreturns() const {
  // @@protoc_insertion_point(field_get:tradingpb.PNLData.annualizedReturns)
  return _internal_annualizedreturns();
}
inline void PNLData::_internal_set_annualizedreturns(float value) {
  
  annualizedreturns_ = value;
}
inline void PNLData::set_annualizedreturns(float value) {
  _internal_set_annualizedreturns(value);
  // @@protoc_insertion_point(field_set:tradingpb.PNLData.annualizedReturns)
}

// float annualizedVolatility = 12;
inline void PNLData::clear_annualizedvolatility() {
  annualizedvolatility_ = 0;
}
inline float PNLData::_internal_annualizedvolatility() const {
  return annualizedvolatility_;
}
inline float PNLData::annualizedvolatility() const {
  // @@protoc_insertion_point(field_get:tradingpb.PNLData.annualizedVolatility)
  return _internal_annualizedvolatility();
}
inline void PNLData::_internal_set_annualizedvolatility(float value) {
  
  annualizedvolatility_ = value;
}
inline void PNLData::set_annualizedvolatility(float value) {
  _internal_set_annualizedvolatility(value);
  // @@protoc_insertion_point(field_set:tradingpb.PNLData.annualizedVolatility)
}

// float totalReturns = 13;
inline void PNLData::clear_totalreturns() {
  totalreturns_ = 0;
}
inline float PNLData::_internal_totalreturns() const {
  return totalreturns_;
}
inline float PNLData::totalreturns() const {
  // @@protoc_insertion_point(field_get:tradingpb.PNLData.totalReturns)
  return _internal_totalreturns();
}
inline void PNLData::_internal_set_totalreturns(float value) {
  
  totalreturns_ = value;
}
inline void PNLData::set_totalreturns(float value) {
  _internal_set_totalreturns(value);
  // @@protoc_insertion_point(field_set:tradingpb.PNLData.totalReturns)
}

// float variance = 14;
inline void PNLData::clear_variance() {
  variance_ = 0;
}
inline float PNLData::_internal_variance() const {
  return variance_;
}
inline float PNLData::variance() const {
  // @@protoc_insertion_point(field_get:tradingpb.PNLData.variance)
  return _internal_variance();
}
inline void PNLData::_internal_set_variance(float value) {
  
  variance_ = value;
}
inline void PNLData::set_variance(float value) {
  _internal_set_variance(value);
  // @@protoc_insertion_point(field_set:tradingpb.PNLData.variance)
}

// int32 buyTimes = 15;
inline void PNLData::clear_buytimes() {
  buytimes_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PNLData::_internal_buytimes() const {
  return buytimes_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PNLData::buytimes() const {
  // @@protoc_insertion_point(field_get:tradingpb.PNLData.buyTimes)
  return _internal_buytimes();
}
inline void PNLData::_internal_set_buytimes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  buytimes_ = value;
}
inline void PNLData::set_buytimes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_buytimes(value);
  // @@protoc_insertion_point(field_set:tradingpb.PNLData.buyTimes)
}

// int32 sellTimes = 16;
inline void PNLData::clear_selltimes() {
  selltimes_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PNLData::_internal_selltimes() const {
  return selltimes_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PNLData::selltimes() const {
  // @@protoc_insertion_point(field_get:tradingpb.PNLData.sellTimes)
  return _internal_selltimes();
}
inline void PNLData::_internal_set_selltimes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  selltimes_ = value;
}
inline void PNLData::set_selltimes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_selltimes(value);
  // @@protoc_insertion_point(field_set:tradingpb.PNLData.sellTimes)
}

// int32 stoplossTimes = 17;
inline void PNLData::clear_stoplosstimes() {
  stoplosstimes_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PNLData::_internal_stoplosstimes() const {
  return stoplosstimes_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PNLData::stoplosstimes() const {
  // @@protoc_insertion_point(field_get:tradingpb.PNLData.stoplossTimes)
  return _internal_stoplosstimes();
}
inline void PNLData::_internal_set_stoplosstimes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  stoplosstimes_ = value;
}
inline void PNLData::set_stoplosstimes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_stoplosstimes(value);
  // @@protoc_insertion_point(field_set:tradingpb.PNLData.stoplossTimes)
}

// int64 maxUpDayTs = 18;
inline void PNLData::clear_maxupdayts() {
  maxupdayts_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PNLData::_internal_maxupdayts() const {
  return maxupdayts_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PNLData::maxupdayts() const {
  // @@protoc_insertion_point(field_get:tradingpb.PNLData.maxUpDayTs)
  return _internal_maxupdayts();
}
inline void PNLData::_internal_set_maxupdayts(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  maxupdayts_ = value;
}
inline void PNLData::set_maxupdayts(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_maxupdayts(value);
  // @@protoc_insertion_point(field_set:tradingpb.PNLData.maxUpDayTs)
}

// float maxPerUpDay = 19;
inline void PNLData::clear_maxperupday() {
  maxperupday_ = 0;
}
inline float PNLData::_internal_maxperupday() const {
  return maxperupday_;
}
inline float PNLData::maxperupday() const {
  // @@protoc_insertion_point(field_get:tradingpb.PNLData.maxPerUpDay)
  return _internal_maxperupday();
}
inline void PNLData::_internal_set_maxperupday(float value) {
  
  maxperupday_ = value;
}
inline void PNLData::set_maxperupday(float value) {
  _internal_set_maxperupday(value);
  // @@protoc_insertion_point(field_set:tradingpb.PNLData.maxPerUpDay)
}

// int64 maxDownDayTs = 20;
inline void PNLData::clear_maxdowndayts() {
  maxdowndayts_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PNLData::_internal_maxdowndayts() const {
  return maxdowndayts_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PNLData::maxdowndayts() const {
  // @@protoc_insertion_point(field_get:tradingpb.PNLData.maxDownDayTs)
  return _internal_maxdowndayts();
}
inline void PNLData::_internal_set_maxdowndayts(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  maxdowndayts_ = value;
}
inline void PNLData::set_maxdowndayts(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_maxdowndayts(value);
  // @@protoc_insertion_point(field_set:tradingpb.PNLData.maxDownDayTs)
}

// float maxPerDownDay = 21;
inline void PNLData::clear_maxperdownday() {
  maxperdownday_ = 0;
}
inline float PNLData::_internal_maxperdownday() const {
  return maxperdownday_;
}
inline float PNLData::maxperdownday() const {
  // @@protoc_insertion_point(field_get:tradingpb.PNLData.maxPerDownDay)
  return _internal_maxperdownday();
}
inline void PNLData::_internal_set_maxperdownday(float value) {
  
  maxperdownday_ = value;
}
inline void PNLData::set_maxperdownday(float value) {
  _internal_set_maxperdownday(value);
  // @@protoc_insertion_point(field_set:tradingpb.PNLData.maxPerDownDay)
}

// int64 maxUpWeekTs = 22;
inline void PNLData::clear_maxupweekts() {
  maxupweekts_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PNLData::_internal_maxupweekts() const {
  return maxupweekts_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PNLData::maxupweekts() const {
  // @@protoc_insertion_point(field_get:tradingpb.PNLData.maxUpWeekTs)
  return _internal_maxupweekts();
}
inline void PNLData::_internal_set_maxupweekts(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  maxupweekts_ = value;
}
inline void PNLData::set_maxupweekts(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_maxupweekts(value);
  // @@protoc_insertion_point(field_set:tradingpb.PNLData.maxUpWeekTs)
}

// float maxPerUpWeek = 23;
inline void PNLData::clear_maxperupweek() {
  maxperupweek_ = 0;
}
inline float PNLData::_internal_maxperupweek() const {
  return maxperupweek_;
}
inline float PNLData::maxperupweek() const {
  // @@protoc_insertion_point(field_get:tradingpb.PNLData.maxPerUpWeek)
  return _internal_maxperupweek();
}
inline void PNLData::_internal_set_maxperupweek(float value) {
  
  maxperupweek_ = value;
}
inline void PNLData::set_maxperupweek(float value) {
  _internal_set_maxperupweek(value);
  // @@protoc_insertion_point(field_set:tradingpb.PNLData.maxPerUpWeek)
}

// int64 maxDownWeekTs = 24;
inline void PNLData::clear_maxdownweekts() {
  maxdownweekts_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PNLData::_internal_maxdownweekts() const {
  return maxdownweekts_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PNLData::maxdownweekts() const {
  // @@protoc_insertion_point(field_get:tradingpb.PNLData.maxDownWeekTs)
  return _internal_maxdownweekts();
}
inline void PNLData::_internal_set_maxdownweekts(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  maxdownweekts_ = value;
}
inline void PNLData::set_maxdownweekts(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_maxdownweekts(value);
  // @@protoc_insertion_point(field_set:tradingpb.PNLData.maxDownWeekTs)
}

// float maxPerDownWeek = 25;
inline void PNLData::clear_maxperdownweek() {
  maxperdownweek_ = 0;
}
inline float PNLData::_internal_maxperdownweek() const {
  return maxperdownweek_;
}
inline float PNLData::maxperdownweek() const {
  // @@protoc_insertion_point(field_get:tradingpb.PNLData.maxPerDownWeek)
  return _internal_maxperdownweek();
}
inline void PNLData::_internal_set_maxperdownweek(float value) {
  
  maxperdownweek_ = value;
}
inline void PNLData::set_maxperdownweek(float value) {
  _internal_set_maxperdownweek(value);
  // @@protoc_insertion_point(field_set:tradingpb.PNLData.maxPerDownWeek)
}

// int64 maxUpMonthTs = 26;
inline void PNLData::clear_maxupmonthts() {
  maxupmonthts_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PNLData::_internal_maxupmonthts() const {
  return maxupmonthts_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PNLData::maxupmonthts() const {
  // @@protoc_insertion_point(field_get:tradingpb.PNLData.maxUpMonthTs)
  return _internal_maxupmonthts();
}
inline void PNLData::_internal_set_maxupmonthts(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  maxupmonthts_ = value;
}
inline void PNLData::set_maxupmonthts(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_maxupmonthts(value);
  // @@protoc_insertion_point(field_set:tradingpb.PNLData.maxUpMonthTs)
}

// float maxPerUpMonth = 27;
inline void PNLData::clear_maxperupmonth() {
  maxperupmonth_ = 0;
}
inline float PNLData::_internal_maxperupmonth() const {
  return maxperupmonth_;
}
inline float PNLData::maxperupmonth() const {
  // @@protoc_insertion_point(field_get:tradingpb.PNLData.maxPerUpMonth)
  return _internal_maxperupmonth();
}
inline void PNLData::_internal_set_maxperupmonth(float value) {
  
  maxperupmonth_ = value;
}
inline void PNLData::set_maxperupmonth(float value) {
  _internal_set_maxperupmonth(value);
  // @@protoc_insertion_point(field_set:tradingpb.PNLData.maxPerUpMonth)
}

// int64 maxDownMonthTs = 28;
inline void PNLData::clear_maxdownmonthts() {
  maxdownmonthts_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PNLData::_internal_maxdownmonthts() const {
  return maxdownmonthts_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PNLData::maxdownmonthts() const {
  // @@protoc_insertion_point(field_get:tradingpb.PNLData.maxDownMonthTs)
  return _internal_maxdownmonthts();
}
inline void PNLData::_internal_set_maxdownmonthts(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  maxdownmonthts_ = value;
}
inline void PNLData::set_maxdownmonthts(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_maxdownmonthts(value);
  // @@protoc_insertion_point(field_set:tradingpb.PNLData.maxDownMonthTs)
}

// float maxPerDownMonth = 29;
inline void PNLData::clear_maxperdownmonth() {
  maxperdownmonth_ = 0;
}
inline float PNLData::_internal_maxperdownmonth() const {
  return maxperdownmonth_;
}
inline float PNLData::maxperdownmonth() const {
  // @@protoc_insertion_point(field_get:tradingpb.PNLData.maxPerDownMonth)
  return _internal_maxperdownmonth();
}
inline void PNLData::_internal_set_maxperdownmonth(float value) {
  
  maxperdownmonth_ = value;
}
inline void PNLData::set_maxperdownmonth(float value) {
  _internal_set_maxperdownmonth(value);
  // @@protoc_insertion_point(field_set:tradingpb.PNLData.maxPerDownMonth)
}

// int64 maxUpYearTs = 30;
inline void PNLData::clear_maxupyearts() {
  maxupyearts_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PNLData::_internal_maxupyearts() const {
  return maxupyearts_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PNLData::maxupyearts() const {
  // @@protoc_insertion_point(field_get:tradingpb.PNLData.maxUpYearTs)
  return _internal_maxupyearts();
}
inline void PNLData::_internal_set_maxupyearts(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  maxupyearts_ = value;
}
inline void PNLData::set_maxupyearts(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_maxupyearts(value);
  // @@protoc_insertion_point(field_set:tradingpb.PNLData.maxUpYearTs)
}

// float maxPerUpYear = 31;
inline void PNLData::clear_maxperupyear() {
  maxperupyear_ = 0;
}
inline float PNLData::_internal_maxperupyear() const {
  return maxperupyear_;
}
inline float PNLData::maxperupyear() const {
  // @@protoc_insertion_point(field_get:tradingpb.PNLData.maxPerUpYear)
  return _internal_maxperupyear();
}
inline void PNLData::_internal_set_maxperupyear(float value) {
  
  maxperupyear_ = value;
}
inline void PNLData::set_maxperupyear(float value) {
  _internal_set_maxperupyear(value);
  // @@protoc_insertion_point(field_set:tradingpb.PNLData.maxPerUpYear)
}

// int64 maxDownYearTs = 32;
inline void PNLData::clear_maxdownyearts() {
  maxdownyearts_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PNLData::_internal_maxdownyearts() const {
  return maxdownyearts_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PNLData::maxdownyearts() const {
  // @@protoc_insertion_point(field_get:tradingpb.PNLData.maxDownYearTs)
  return _internal_maxdownyearts();
}
inline void PNLData::_internal_set_maxdownyearts(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  maxdownyearts_ = value;
}
inline void PNLData::set_maxdownyearts(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_maxdownyearts(value);
  // @@protoc_insertion_point(field_set:tradingpb.PNLData.maxDownYearTs)
}

// float maxPerDownYear = 33;
inline void PNLData::clear_maxperdownyear() {
  maxperdownyear_ = 0;
}
inline float PNLData::_internal_maxperdownyear() const {
  return maxperdownyear_;
}
inline float PNLData::maxperdownyear() const {
  // @@protoc_insertion_point(field_get:tradingpb.PNLData.maxPerDownYear)
  return _internal_maxperdownyear();
}
inline void PNLData::_internal_set_maxperdownyear(float value) {
  
  maxperdownyear_ = value;
}
inline void PNLData::set_maxperdownyear(float value) {
  _internal_set_maxperdownyear(value);
  // @@protoc_insertion_point(field_set:tradingpb.PNLData.maxPerDownYear)
}

// -------------------------------------------------------------------

// RequestCalcPNL

// string token = 1;
inline void RequestCalcPNL::clear_token() {
  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RequestCalcPNL::token() const {
  // @@protoc_insertion_point(field_get:tradingpb.RequestCalcPNL.token)
  return _internal_token();
}
inline void RequestCalcPNL::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:tradingpb.RequestCalcPNL.token)
}
inline std::string* RequestCalcPNL::mutable_token() {
  // @@protoc_insertion_point(field_mutable:tradingpb.RequestCalcPNL.token)
  return _internal_mutable_token();
}
inline const std::string& RequestCalcPNL::_internal_token() const {
  return token_.GetNoArena();
}
inline void RequestCalcPNL::_internal_set_token(const std::string& value) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RequestCalcPNL::set_token(std::string&& value) {
  
  token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tradingpb.RequestCalcPNL.token)
}
inline void RequestCalcPNL::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tradingpb.RequestCalcPNL.token)
}
inline void RequestCalcPNL::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tradingpb.RequestCalcPNL.token)
}
inline std::string* RequestCalcPNL::_internal_mutable_token() {
  
  return token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RequestCalcPNL::release_token() {
  // @@protoc_insertion_point(field_release:tradingpb.RequestCalcPNL.token)
  
  return token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RequestCalcPNL::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:tradingpb.RequestCalcPNL.token)
}

// repeated .tradingpb.Asset assets = 2;
inline int RequestCalcPNL::_internal_assets_size() const {
  return assets_.size();
}
inline int RequestCalcPNL::assets_size() const {
  return _internal_assets_size();
}
inline void RequestCalcPNL::clear_assets() {
  assets_.Clear();
}
inline ::tradingpb::Asset* RequestCalcPNL::mutable_assets(int index) {
  // @@protoc_insertion_point(field_mutable:tradingpb.RequestCalcPNL.assets)
  return assets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tradingpb::Asset >*
RequestCalcPNL::mutable_assets() {
  // @@protoc_insertion_point(field_mutable_list:tradingpb.RequestCalcPNL.assets)
  return &assets_;
}
inline const ::tradingpb::Asset& RequestCalcPNL::_internal_assets(int index) const {
  return assets_.Get(index);
}
inline const ::tradingpb::Asset& RequestCalcPNL::assets(int index) const {
  // @@protoc_insertion_point(field_get:tradingpb.RequestCalcPNL.assets)
  return _internal_assets(index);
}
inline ::tradingpb::Asset* RequestCalcPNL::_internal_add_assets() {
  return assets_.Add();
}
inline ::tradingpb::Asset* RequestCalcPNL::add_assets() {
  // @@protoc_insertion_point(field_add:tradingpb.RequestCalcPNL.assets)
  return _internal_add_assets();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tradingpb::Asset >&
RequestCalcPNL::assets() const {
  // @@protoc_insertion_point(field_list:tradingpb.RequestCalcPNL.assets)
  return assets_;
}

// repeated .tradingpb.Asset baselines = 3;
inline int RequestCalcPNL::_internal_baselines_size() const {
  return baselines_.size();
}
inline int RequestCalcPNL::baselines_size() const {
  return _internal_baselines_size();
}
inline void RequestCalcPNL::clear_baselines() {
  baselines_.Clear();
}
inline ::tradingpb::Asset* RequestCalcPNL::mutable_baselines(int index) {
  // @@protoc_insertion_point(field_mutable:tradingpb.RequestCalcPNL.baselines)
  return baselines_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tradingpb::Asset >*
RequestCalcPNL::mutable_baselines() {
  // @@protoc_insertion_point(field_mutable_list:tradingpb.RequestCalcPNL.baselines)
  return &baselines_;
}
inline const ::tradingpb::Asset& RequestCalcPNL::_internal_baselines(int index) const {
  return baselines_.Get(index);
}
inline const ::tradingpb::Asset& RequestCalcPNL::baselines(int index) const {
  // @@protoc_insertion_point(field_get:tradingpb.RequestCalcPNL.baselines)
  return _internal_baselines(index);
}
inline ::tradingpb::Asset* RequestCalcPNL::_internal_add_baselines() {
  return baselines_.Add();
}
inline ::tradingpb::Asset* RequestCalcPNL::add_baselines() {
  // @@protoc_insertion_point(field_add:tradingpb.RequestCalcPNL.baselines)
  return _internal_add_baselines();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tradingpb::Asset >&
RequestCalcPNL::baselines() const {
  // @@protoc_insertion_point(field_list:tradingpb.RequestCalcPNL.baselines)
  return baselines_;
}

// int64 startTs = 4;
inline void RequestCalcPNL::clear_startts() {
  startts_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RequestCalcPNL::_internal_startts() const {
  return startts_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RequestCalcPNL::startts() const {
  // @@protoc_insertion_point(field_get:tradingpb.RequestCalcPNL.startTs)
  return _internal_startts();
}
inline void RequestCalcPNL::_internal_set_startts(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  startts_ = value;
}
inline void RequestCalcPNL::set_startts(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_startts(value);
  // @@protoc_insertion_point(field_set:tradingpb.RequestCalcPNL.startTs)
}

// int64 endTs = 5;
inline void RequestCalcPNL::clear_endts() {
  endts_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RequestCalcPNL::_internal_endts() const {
  return endts_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RequestCalcPNL::endts() const {
  // @@protoc_insertion_point(field_get:tradingpb.RequestCalcPNL.endTs)
  return _internal_endts();
}
inline void RequestCalcPNL::_internal_set_endts(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  endts_ = value;
}
inline void RequestCalcPNL::set_endts(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_endts(value);
  // @@protoc_insertion_point(field_set:tradingpb.RequestCalcPNL.endTs)
}

// repeated .tradingpb.Strategy strategies = 6;
inline int RequestCalcPNL::_internal_strategies_size() const {
  return strategies_.size();
}
inline int RequestCalcPNL::strategies_size() const {
  return _internal_strategies_size();
}
inline void RequestCalcPNL::clear_strategies() {
  strategies_.Clear();
}
inline ::tradingpb::Strategy* RequestCalcPNL::mutable_strategies(int index) {
  // @@protoc_insertion_point(field_mutable:tradingpb.RequestCalcPNL.strategies)
  return strategies_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tradingpb::Strategy >*
RequestCalcPNL::mutable_strategies() {
  // @@protoc_insertion_point(field_mutable_list:tradingpb.RequestCalcPNL.strategies)
  return &strategies_;
}
inline const ::tradingpb::Strategy& RequestCalcPNL::_internal_strategies(int index) const {
  return strategies_.Get(index);
}
inline const ::tradingpb::Strategy& RequestCalcPNL::strategies(int index) const {
  // @@protoc_insertion_point(field_get:tradingpb.RequestCalcPNL.strategies)
  return _internal_strategies(index);
}
inline ::tradingpb::Strategy* RequestCalcPNL::_internal_add_strategies() {
  return strategies_.Add();
}
inline ::tradingpb::Strategy* RequestCalcPNL::add_strategies() {
  // @@protoc_insertion_point(field_add:tradingpb.RequestCalcPNL.strategies)
  return _internal_add_strategies();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tradingpb::Strategy >&
RequestCalcPNL::strategies() const {
  // @@protoc_insertion_point(field_list:tradingpb.RequestCalcPNL.strategies)
  return strategies_;
}

// -------------------------------------------------------------------

// ReplyCalcPNL

// repeated .tradingpb.PNLData pnl = 1;
inline int ReplyCalcPNL::_internal_pnl_size() const {
  return pnl_.size();
}
inline int ReplyCalcPNL::pnl_size() const {
  return _internal_pnl_size();
}
inline void ReplyCalcPNL::clear_pnl() {
  pnl_.Clear();
}
inline ::tradingpb::PNLData* ReplyCalcPNL::mutable_pnl(int index) {
  // @@protoc_insertion_point(field_mutable:tradingpb.ReplyCalcPNL.pnl)
  return pnl_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tradingpb::PNLData >*
ReplyCalcPNL::mutable_pnl() {
  // @@protoc_insertion_point(field_mutable_list:tradingpb.ReplyCalcPNL.pnl)
  return &pnl_;
}
inline const ::tradingpb::PNLData& ReplyCalcPNL::_internal_pnl(int index) const {
  return pnl_.Get(index);
}
inline const ::tradingpb::PNLData& ReplyCalcPNL::pnl(int index) const {
  // @@protoc_insertion_point(field_get:tradingpb.ReplyCalcPNL.pnl)
  return _internal_pnl(index);
}
inline ::tradingpb::PNLData* ReplyCalcPNL::_internal_add_pnl() {
  return pnl_.Add();
}
inline ::tradingpb::PNLData* ReplyCalcPNL::add_pnl() {
  // @@protoc_insertion_point(field_add:tradingpb.ReplyCalcPNL.pnl)
  return _internal_add_pnl();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tradingpb::PNLData >&
ReplyCalcPNL::pnl() const {
  // @@protoc_insertion_point(field_list:tradingpb.ReplyCalcPNL.pnl)
  return pnl_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace tradingpb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tradingnode2_2eproto

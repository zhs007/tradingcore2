// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tradingdb2.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tradingdb2_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tradingdb2_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "trading2.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tradingdb2_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tradingdb2_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[19]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tradingdb2_2eproto;
namespace tradingpb {
class Candle;
class CandleDefaultTypeInternal;
extern CandleDefaultTypeInternal _Candle_default_instance_;
class Candles;
class CandlesDefaultTypeInternal;
extern CandlesDefaultTypeInternal _Candles_default_instance_;
class Candles_MapCandlesEntry_DoNotUse;
class Candles_MapCandlesEntry_DoNotUseDefaultTypeInternal;
extern Candles_MapCandlesEntry_DoNotUseDefaultTypeInternal _Candles_MapCandlesEntry_DoNotUse_default_instance_;
class Fund;
class FundDefaultTypeInternal;
extern FundDefaultTypeInternal _Fund_default_instance_;
class FundManager;
class FundManagerDefaultTypeInternal;
extern FundManagerDefaultTypeInternal _FundManager_default_instance_;
class FundResult;
class FundResultDefaultTypeInternal;
extern FundResultDefaultTypeInternal _FundResult_default_instance_;
class FundSize;
class FundSizeDefaultTypeInternal;
extern FundSizeDefaultTypeInternal _FundSize_default_instance_;
class ReplyGetCandles;
class ReplyGetCandlesDefaultTypeInternal;
extern ReplyGetCandlesDefaultTypeInternal _ReplyGetCandles_default_instance_;
class ReplyGetSymbol;
class ReplyGetSymbolDefaultTypeInternal;
extern ReplyGetSymbolDefaultTypeInternal _ReplyGetSymbol_default_instance_;
class ReplySimTrading;
class ReplySimTradingDefaultTypeInternal;
extern ReplySimTradingDefaultTypeInternal _ReplySimTrading_default_instance_;
class ReplyUpdCandles;
class ReplyUpdCandlesDefaultTypeInternal;
extern ReplyUpdCandlesDefaultTypeInternal _ReplyUpdCandles_default_instance_;
class ReplyUpdSymbol;
class ReplyUpdSymbolDefaultTypeInternal;
extern ReplyUpdSymbolDefaultTypeInternal _ReplyUpdSymbol_default_instance_;
class RequestGetCandles;
class RequestGetCandlesDefaultTypeInternal;
extern RequestGetCandlesDefaultTypeInternal _RequestGetCandles_default_instance_;
class RequestGetSymbol;
class RequestGetSymbolDefaultTypeInternal;
extern RequestGetSymbolDefaultTypeInternal _RequestGetSymbol_default_instance_;
class RequestGetSymbols;
class RequestGetSymbolsDefaultTypeInternal;
extern RequestGetSymbolsDefaultTypeInternal _RequestGetSymbols_default_instance_;
class RequestSimTrading;
class RequestSimTradingDefaultTypeInternal;
extern RequestSimTradingDefaultTypeInternal _RequestSimTrading_default_instance_;
class RequestUpdCandles;
class RequestUpdCandlesDefaultTypeInternal;
extern RequestUpdCandlesDefaultTypeInternal _RequestUpdCandles_default_instance_;
class RequestUpdSymbol;
class RequestUpdSymbolDefaultTypeInternal;
extern RequestUpdSymbolDefaultTypeInternal _RequestUpdSymbol_default_instance_;
class SymbolInfo;
class SymbolInfoDefaultTypeInternal;
extern SymbolInfoDefaultTypeInternal _SymbolInfo_default_instance_;
}  // namespace tradingpb
PROTOBUF_NAMESPACE_OPEN
template<> ::tradingpb::Candle* Arena::CreateMaybeMessage<::tradingpb::Candle>(Arena*);
template<> ::tradingpb::Candles* Arena::CreateMaybeMessage<::tradingpb::Candles>(Arena*);
template<> ::tradingpb::Candles_MapCandlesEntry_DoNotUse* Arena::CreateMaybeMessage<::tradingpb::Candles_MapCandlesEntry_DoNotUse>(Arena*);
template<> ::tradingpb::Fund* Arena::CreateMaybeMessage<::tradingpb::Fund>(Arena*);
template<> ::tradingpb::FundManager* Arena::CreateMaybeMessage<::tradingpb::FundManager>(Arena*);
template<> ::tradingpb::FundResult* Arena::CreateMaybeMessage<::tradingpb::FundResult>(Arena*);
template<> ::tradingpb::FundSize* Arena::CreateMaybeMessage<::tradingpb::FundSize>(Arena*);
template<> ::tradingpb::ReplyGetCandles* Arena::CreateMaybeMessage<::tradingpb::ReplyGetCandles>(Arena*);
template<> ::tradingpb::ReplyGetSymbol* Arena::CreateMaybeMessage<::tradingpb::ReplyGetSymbol>(Arena*);
template<> ::tradingpb::ReplySimTrading* Arena::CreateMaybeMessage<::tradingpb::ReplySimTrading>(Arena*);
template<> ::tradingpb::ReplyUpdCandles* Arena::CreateMaybeMessage<::tradingpb::ReplyUpdCandles>(Arena*);
template<> ::tradingpb::ReplyUpdSymbol* Arena::CreateMaybeMessage<::tradingpb::ReplyUpdSymbol>(Arena*);
template<> ::tradingpb::RequestGetCandles* Arena::CreateMaybeMessage<::tradingpb::RequestGetCandles>(Arena*);
template<> ::tradingpb::RequestGetSymbol* Arena::CreateMaybeMessage<::tradingpb::RequestGetSymbol>(Arena*);
template<> ::tradingpb::RequestGetSymbols* Arena::CreateMaybeMessage<::tradingpb::RequestGetSymbols>(Arena*);
template<> ::tradingpb::RequestSimTrading* Arena::CreateMaybeMessage<::tradingpb::RequestSimTrading>(Arena*);
template<> ::tradingpb::RequestUpdCandles* Arena::CreateMaybeMessage<::tradingpb::RequestUpdCandles>(Arena*);
template<> ::tradingpb::RequestUpdSymbol* Arena::CreateMaybeMessage<::tradingpb::RequestUpdSymbol>(Arena*);
template<> ::tradingpb::SymbolInfo* Arena::CreateMaybeMessage<::tradingpb::SymbolInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tradingpb {

// ===================================================================

class Candle :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tradingpb.Candle) */ {
 public:
  Candle();
  virtual ~Candle();

  Candle(const Candle& from);
  Candle(Candle&& from) noexcept
    : Candle() {
    *this = ::std::move(from);
  }

  inline Candle& operator=(const Candle& from) {
    CopyFrom(from);
    return *this;
  }
  inline Candle& operator=(Candle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Candle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Candle* internal_default_instance() {
    return reinterpret_cast<const Candle*>(
               &_Candle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Candle& a, Candle& b) {
    a.Swap(&b);
  }
  inline void Swap(Candle* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Candle* New() const final {
    return CreateMaybeMessage<Candle>(nullptr);
  }

  Candle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Candle>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Candle& from);
  void MergeFrom(const Candle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Candle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tradingpb.Candle";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tradingdb2_2eproto);
    return ::descriptor_table_tradingdb2_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTsFieldNumber = 1,
    kOpenFieldNumber = 2,
    kCloseFieldNumber = 3,
    kHighFieldNumber = 4,
    kLowFieldNumber = 5,
    kVolumeFieldNumber = 6,
    kOpenInterestFieldNumber = 7,
    kTradesFieldNumber = 8,
    kVwapFieldNumber = 9,
    kLastSizeFieldNumber = 10,
    kTurnoverFieldNumber = 11,
    kHomeNotionalFieldNumber = 12,
    kForeignNotionalFieldNumber = 13,
    kTotalMoneyFieldNumber = 14,
    kHighLimitFieldNumber = 16,
    kLowLimitFieldNumber = 17,
    kAvgFieldNumber = 18,
    kPreCloseFieldNumber = 19,
    kPausedFieldNumber = 15,
  };
  // int64 ts = 1;
  void clear_ts();
  ::PROTOBUF_NAMESPACE_ID::int64 ts() const;
  void set_ts(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_ts() const;
  void _internal_set_ts(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 open = 2;
  void clear_open();
  ::PROTOBUF_NAMESPACE_ID::int64 open() const;
  void set_open(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_open() const;
  void _internal_set_open(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 close = 3;
  void clear_close();
  ::PROTOBUF_NAMESPACE_ID::int64 close() const;
  void set_close(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_close() const;
  void _internal_set_close(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 high = 4;
  void clear_high();
  ::PROTOBUF_NAMESPACE_ID::int64 high() const;
  void set_high(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_high() const;
  void _internal_set_high(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 low = 5;
  void clear_low();
  ::PROTOBUF_NAMESPACE_ID::int64 low() const;
  void set_low(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_low() const;
  void _internal_set_low(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 volume = 6;
  void clear_volume();
  ::PROTOBUF_NAMESPACE_ID::int64 volume() const;
  void set_volume(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_volume() const;
  void _internal_set_volume(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 openInterest = 7;
  void clear_openinterest();
  ::PROTOBUF_NAMESPACE_ID::int64 openinterest() const;
  void set_openinterest(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_openinterest() const;
  void _internal_set_openinterest(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 trades = 8;
  void clear_trades();
  ::PROTOBUF_NAMESPACE_ID::int64 trades() const;
  void set_trades(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_trades() const;
  void _internal_set_trades(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // double vwap = 9;
  void clear_vwap();
  double vwap() const;
  void set_vwap(double value);
  private:
  double _internal_vwap() const;
  void _internal_set_vwap(double value);
  public:

  // int64 lastSize = 10;
  void clear_lastsize();
  ::PROTOBUF_NAMESPACE_ID::int64 lastsize() const;
  void set_lastsize(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_lastsize() const;
  void _internal_set_lastsize(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 turnover = 11;
  void clear_turnover();
  ::PROTOBUF_NAMESPACE_ID::int64 turnover() const;
  void set_turnover(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_turnover() const;
  void _internal_set_turnover(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // double homeNotional = 12;
  void clear_homenotional();
  double homenotional() const;
  void set_homenotional(double value);
  private:
  double _internal_homenotional() const;
  void _internal_set_homenotional(double value);
  public:

  // double foreignNotional = 13;
  void clear_foreignnotional();
  double foreignnotional() const;
  void set_foreignnotional(double value);
  private:
  double _internal_foreignnotional() const;
  void _internal_set_foreignnotional(double value);
  public:

  // int64 totalMoney = 14;
  void clear_totalmoney();
  ::PROTOBUF_NAMESPACE_ID::int64 totalmoney() const;
  void set_totalmoney(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_totalmoney() const;
  void _internal_set_totalmoney(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 highLimit = 16;
  void clear_highlimit();
  ::PROTOBUF_NAMESPACE_ID::int64 highlimit() const;
  void set_highlimit(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_highlimit() const;
  void _internal_set_highlimit(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 lowLimit = 17;
  void clear_lowlimit();
  ::PROTOBUF_NAMESPACE_ID::int64 lowlimit() const;
  void set_lowlimit(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_lowlimit() const;
  void _internal_set_lowlimit(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 avg = 18;
  void clear_avg();
  ::PROTOBUF_NAMESPACE_ID::int64 avg() const;
  void set_avg(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_avg() const;
  void _internal_set_avg(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 preClose = 19;
  void clear_preclose();
  ::PROTOBUF_NAMESPACE_ID::int64 preclose() const;
  void set_preclose(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_preclose() const;
  void _internal_set_preclose(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool paused = 15;
  void clear_paused();
  bool paused() const;
  void set_paused(bool value);
  private:
  bool _internal_paused() const;
  void _internal_set_paused(bool value);
  public:

  // @@protoc_insertion_point(class_scope:tradingpb.Candle)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 ts_;
  ::PROTOBUF_NAMESPACE_ID::int64 open_;
  ::PROTOBUF_NAMESPACE_ID::int64 close_;
  ::PROTOBUF_NAMESPACE_ID::int64 high_;
  ::PROTOBUF_NAMESPACE_ID::int64 low_;
  ::PROTOBUF_NAMESPACE_ID::int64 volume_;
  ::PROTOBUF_NAMESPACE_ID::int64 openinterest_;
  ::PROTOBUF_NAMESPACE_ID::int64 trades_;
  double vwap_;
  ::PROTOBUF_NAMESPACE_ID::int64 lastsize_;
  ::PROTOBUF_NAMESPACE_ID::int64 turnover_;
  double homenotional_;
  double foreignnotional_;
  ::PROTOBUF_NAMESPACE_ID::int64 totalmoney_;
  ::PROTOBUF_NAMESPACE_ID::int64 highlimit_;
  ::PROTOBUF_NAMESPACE_ID::int64 lowlimit_;
  ::PROTOBUF_NAMESPACE_ID::int64 avg_;
  ::PROTOBUF_NAMESPACE_ID::int64 preclose_;
  bool paused_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tradingdb2_2eproto;
};
// -------------------------------------------------------------------

class Candles_MapCandlesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Candles_MapCandlesEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int64, ::tradingpb::Candle,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Candles_MapCandlesEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int64, ::tradingpb::Candle,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  Candles_MapCandlesEntry_DoNotUse();
  Candles_MapCandlesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Candles_MapCandlesEntry_DoNotUse& other);
  static const Candles_MapCandlesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Candles_MapCandlesEntry_DoNotUse*>(&_Candles_MapCandlesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tradingdb2_2eproto);
    return ::descriptor_table_tradingdb2_2eproto.file_level_metadata[1];
  }

  public:
};

// -------------------------------------------------------------------

class Candles :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tradingpb.Candles) */ {
 public:
  Candles();
  virtual ~Candles();

  Candles(const Candles& from);
  Candles(Candles&& from) noexcept
    : Candles() {
    *this = ::std::move(from);
  }

  inline Candles& operator=(const Candles& from) {
    CopyFrom(from);
    return *this;
  }
  inline Candles& operator=(Candles&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Candles& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Candles* internal_default_instance() {
    return reinterpret_cast<const Candles*>(
               &_Candles_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Candles& a, Candles& b) {
    a.Swap(&b);
  }
  inline void Swap(Candles* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Candles* New() const final {
    return CreateMaybeMessage<Candles>(nullptr);
  }

  Candles* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Candles>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Candles& from);
  void MergeFrom(const Candles& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Candles* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tradingpb.Candles";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tradingdb2_2eproto);
    return ::descriptor_table_tradingdb2_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kCandlesFieldNumber = 4,
    kMapCandlesFieldNumber = 5,
    kMarketFieldNumber = 1,
    kSymbolFieldNumber = 2,
    kTagFieldNumber = 3,
  };
  // repeated .tradingpb.Candle candles = 4;
  int candles_size() const;
  private:
  int _internal_candles_size() const;
  public:
  void clear_candles();
  ::tradingpb::Candle* mutable_candles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tradingpb::Candle >*
      mutable_candles();
  private:
  const ::tradingpb::Candle& _internal_candles(int index) const;
  ::tradingpb::Candle* _internal_add_candles();
  public:
  const ::tradingpb::Candle& candles(int index) const;
  ::tradingpb::Candle* add_candles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tradingpb::Candle >&
      candles() const;

  // map<int64, .tradingpb.Candle> mapCandles = 5;
  int mapcandles_size() const;
  private:
  int _internal_mapcandles_size() const;
  public:
  void clear_mapcandles();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::tradingpb::Candle >&
      _internal_mapcandles() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::tradingpb::Candle >*
      _internal_mutable_mapcandles();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::tradingpb::Candle >&
      mapcandles() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::tradingpb::Candle >*
      mutable_mapcandles();

  // string market = 1;
  void clear_market();
  const std::string& market() const;
  void set_market(const std::string& value);
  void set_market(std::string&& value);
  void set_market(const char* value);
  void set_market(const char* value, size_t size);
  std::string* mutable_market();
  std::string* release_market();
  void set_allocated_market(std::string* market);
  private:
  const std::string& _internal_market() const;
  void _internal_set_market(const std::string& value);
  std::string* _internal_mutable_market();
  public:

  // string symbol = 2;
  void clear_symbol();
  const std::string& symbol() const;
  void set_symbol(const std::string& value);
  void set_symbol(std::string&& value);
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  std::string* mutable_symbol();
  std::string* release_symbol();
  void set_allocated_symbol(std::string* symbol);
  private:
  const std::string& _internal_symbol() const;
  void _internal_set_symbol(const std::string& value);
  std::string* _internal_mutable_symbol();
  public:

  // string tag = 3;
  void clear_tag();
  const std::string& tag() const;
  void set_tag(const std::string& value);
  void set_tag(std::string&& value);
  void set_tag(const char* value);
  void set_tag(const char* value, size_t size);
  std::string* mutable_tag();
  std::string* release_tag();
  void set_allocated_tag(std::string* tag);
  private:
  const std::string& _internal_tag() const;
  void _internal_set_tag(const std::string& value);
  std::string* _internal_mutable_tag();
  public:

  // @@protoc_insertion_point(class_scope:tradingpb.Candles)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tradingpb::Candle > candles_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Candles_MapCandlesEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int64, ::tradingpb::Candle,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > mapcandles_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr market_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr symbol_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tradingdb2_2eproto;
};
// -------------------------------------------------------------------

class FundSize :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tradingpb.FundSize) */ {
 public:
  FundSize();
  virtual ~FundSize();

  FundSize(const FundSize& from);
  FundSize(FundSize&& from) noexcept
    : FundSize() {
    *this = ::std::move(from);
  }

  inline FundSize& operator=(const FundSize& from) {
    CopyFrom(from);
    return *this;
  }
  inline FundSize& operator=(FundSize&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FundSize& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FundSize* internal_default_instance() {
    return reinterpret_cast<const FundSize*>(
               &_FundSize_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(FundSize& a, FundSize& b) {
    a.Swap(&b);
  }
  inline void Swap(FundSize* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FundSize* New() const final {
    return CreateMaybeMessage<FundSize>(nullptr);
  }

  FundSize* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FundSize>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FundSize& from);
  void MergeFrom(const FundSize& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FundSize* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tradingpb.FundSize";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tradingdb2_2eproto);
    return ::descriptor_table_tradingdb2_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFieldNumber = 2,
    kSizeFieldNumber = 1,
  };
  // int64 time = 2;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // float size = 1;
  void clear_size();
  float size() const;
  void set_size(float value);
  private:
  float _internal_size() const;
  void _internal_set_size(float value);
  public:

  // @@protoc_insertion_point(class_scope:tradingpb.FundSize)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_;
  float size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tradingdb2_2eproto;
};
// -------------------------------------------------------------------

class FundManager :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tradingpb.FundManager) */ {
 public:
  FundManager();
  virtual ~FundManager();

  FundManager(const FundManager& from);
  FundManager(FundManager&& from) noexcept
    : FundManager() {
    *this = ::std::move(from);
  }

  inline FundManager& operator=(const FundManager& from) {
    CopyFrom(from);
    return *this;
  }
  inline FundManager& operator=(FundManager&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FundManager& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FundManager* internal_default_instance() {
    return reinterpret_cast<const FundManager*>(
               &_FundManager_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(FundManager& a, FundManager& b) {
    a.Swap(&b);
  }
  inline void Swap(FundManager* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FundManager* New() const final {
    return CreateMaybeMessage<FundManager>(nullptr);
  }

  FundManager* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FundManager>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FundManager& from);
  void MergeFrom(const FundManager& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FundManager* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tradingpb.FundManager";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tradingdb2_2eproto);
    return ::descriptor_table_tradingdb2_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultsFieldNumber = 9,
    kNameFieldNumber = 1,
    kEducationFieldNumber = 6,
    kCountryFieldNumber = 7,
    kResumeFieldNumber = 8,
    kStartTimeFieldNumber = 2,
    kEndTimeFieldNumber = 3,
    kBirthYearFieldNumber = 4,
    kSexFieldNumber = 5,
  };
  // repeated .tradingpb.FundResult results = 9;
  int results_size() const;
  private:
  int _internal_results_size() const;
  public:
  void clear_results();
  ::tradingpb::FundResult* mutable_results(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tradingpb::FundResult >*
      mutable_results();
  private:
  const ::tradingpb::FundResult& _internal_results(int index) const;
  ::tradingpb::FundResult* _internal_add_results();
  public:
  const ::tradingpb::FundResult& results(int index) const;
  ::tradingpb::FundResult* add_results();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tradingpb::FundResult >&
      results() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string education = 6;
  void clear_education();
  const std::string& education() const;
  void set_education(const std::string& value);
  void set_education(std::string&& value);
  void set_education(const char* value);
  void set_education(const char* value, size_t size);
  std::string* mutable_education();
  std::string* release_education();
  void set_allocated_education(std::string* education);
  private:
  const std::string& _internal_education() const;
  void _internal_set_education(const std::string& value);
  std::string* _internal_mutable_education();
  public:

  // string country = 7;
  void clear_country();
  const std::string& country() const;
  void set_country(const std::string& value);
  void set_country(std::string&& value);
  void set_country(const char* value);
  void set_country(const char* value, size_t size);
  std::string* mutable_country();
  std::string* release_country();
  void set_allocated_country(std::string* country);
  private:
  const std::string& _internal_country() const;
  void _internal_set_country(const std::string& value);
  std::string* _internal_mutable_country();
  public:

  // string resume = 8;
  void clear_resume();
  const std::string& resume() const;
  void set_resume(const std::string& value);
  void set_resume(std::string&& value);
  void set_resume(const char* value);
  void set_resume(const char* value, size_t size);
  std::string* mutable_resume();
  std::string* release_resume();
  void set_allocated_resume(std::string* resume);
  private:
  const std::string& _internal_resume() const;
  void _internal_set_resume(const std::string& value);
  std::string* _internal_mutable_resume();
  public:

  // int64 startTime = 2;
  void clear_starttime();
  ::PROTOBUF_NAMESPACE_ID::int64 starttime() const;
  void set_starttime(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_starttime() const;
  void _internal_set_starttime(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 endTime = 3;
  void clear_endtime();
  ::PROTOBUF_NAMESPACE_ID::int64 endtime() const;
  void set_endtime(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_endtime() const;
  void _internal_set_endtime(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 birthYear = 4;
  void clear_birthyear();
  ::PROTOBUF_NAMESPACE_ID::int64 birthyear() const;
  void set_birthyear(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_birthyear() const;
  void _internal_set_birthyear(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool sex = 5;
  void clear_sex();
  bool sex() const;
  void set_sex(bool value);
  private:
  bool _internal_sex() const;
  void _internal_set_sex(bool value);
  public:

  // @@protoc_insertion_point(class_scope:tradingpb.FundManager)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tradingpb::FundResult > results_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr education_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr country_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr resume_;
  ::PROTOBUF_NAMESPACE_ID::int64 starttime_;
  ::PROTOBUF_NAMESPACE_ID::int64 endtime_;
  ::PROTOBUF_NAMESPACE_ID::int64 birthyear_;
  bool sex_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tradingdb2_2eproto;
};
// -------------------------------------------------------------------

class FundResult :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tradingpb.FundResult) */ {
 public:
  FundResult();
  virtual ~FundResult();

  FundResult(const FundResult& from);
  FundResult(FundResult&& from) noexcept
    : FundResult() {
    *this = ::std::move(from);
  }

  inline FundResult& operator=(const FundResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline FundResult& operator=(FundResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FundResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FundResult* internal_default_instance() {
    return reinterpret_cast<const FundResult*>(
               &_FundResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(FundResult& a, FundResult& b) {
    a.Swap(&b);
  }
  inline void Swap(FundResult* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FundResult* New() const final {
    return CreateMaybeMessage<FundResult>(nullptr);
  }

  FundResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FundResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FundResult& from);
  void MergeFrom(const FundResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FundResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tradingpb.FundResult";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tradingdb2_2eproto);
    return ::descriptor_table_tradingdb2_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 8,
    kMaxDrawdownFieldNumber = 1,
    kSharpeFieldNumber = 2,
    kAnnualizedReturnsFieldNumber = 3,
    kAnnualizedVolatilityFieldNumber = 4,
    kStartTimeFieldNumber = 6,
    kEndTimeFieldNumber = 7,
    kTotalReturnsFieldNumber = 5,
  };
  // string name = 8;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // float maxDrawdown = 1;
  void clear_maxdrawdown();
  float maxdrawdown() const;
  void set_maxdrawdown(float value);
  private:
  float _internal_maxdrawdown() const;
  void _internal_set_maxdrawdown(float value);
  public:

  // float sharpe = 2;
  void clear_sharpe();
  float sharpe() const;
  void set_sharpe(float value);
  private:
  float _internal_sharpe() const;
  void _internal_set_sharpe(float value);
  public:

  // float annualizedReturns = 3;
  void clear_annualizedreturns();
  float annualizedreturns() const;
  void set_annualizedreturns(float value);
  private:
  float _internal_annualizedreturns() const;
  void _internal_set_annualizedreturns(float value);
  public:

  // float annualizedVolatility = 4;
  void clear_annualizedvolatility();
  float annualizedvolatility() const;
  void set_annualizedvolatility(float value);
  private:
  float _internal_annualizedvolatility() const;
  void _internal_set_annualizedvolatility(float value);
  public:

  // int64 startTime = 6;
  void clear_starttime();
  ::PROTOBUF_NAMESPACE_ID::int64 starttime() const;
  void set_starttime(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_starttime() const;
  void _internal_set_starttime(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 endTime = 7;
  void clear_endtime();
  ::PROTOBUF_NAMESPACE_ID::int64 endtime() const;
  void set_endtime(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_endtime() const;
  void _internal_set_endtime(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // float totalReturns = 5;
  void clear_totalreturns();
  float totalreturns() const;
  void set_totalreturns(float value);
  private:
  float _internal_totalreturns() const;
  void _internal_set_totalreturns(float value);
  public:

  // @@protoc_insertion_point(class_scope:tradingpb.FundResult)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  float maxdrawdown_;
  float sharpe_;
  float annualizedreturns_;
  float annualizedvolatility_;
  ::PROTOBUF_NAMESPACE_ID::int64 starttime_;
  ::PROTOBUF_NAMESPACE_ID::int64 endtime_;
  float totalreturns_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tradingdb2_2eproto;
};
// -------------------------------------------------------------------

class Fund :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tradingpb.Fund) */ {
 public:
  Fund();
  virtual ~Fund();

  Fund(const Fund& from);
  Fund(Fund&& from) noexcept
    : Fund() {
    *this = ::std::move(from);
  }

  inline Fund& operator=(const Fund& from) {
    CopyFrom(from);
    return *this;
  }
  inline Fund& operator=(Fund&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Fund& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Fund* internal_default_instance() {
    return reinterpret_cast<const Fund*>(
               &_Fund_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Fund& a, Fund& b) {
    a.Swap(&b);
  }
  inline void Swap(Fund* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Fund* New() const final {
    return CreateMaybeMessage<Fund>(nullptr);
  }

  Fund* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Fund>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Fund& from);
  void MergeFrom(const Fund& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Fund* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tradingpb.Fund";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tradingdb2_2eproto);
    return ::descriptor_table_tradingdb2_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagsFieldNumber = 3,
    kSizeFieldNumber = 5,
    kManagersFieldNumber = 7,
    kResultsFieldNumber = 8,
    kCodeFieldNumber = 1,
    kNameFieldNumber = 2,
    kCompanyFieldNumber = 6,
    kCreateTimeFieldNumber = 4,
  };
  // repeated string tags = 3;
  int tags_size() const;
  private:
  int _internal_tags_size() const;
  public:
  void clear_tags();
  const std::string& tags(int index) const;
  std::string* mutable_tags(int index);
  void set_tags(int index, const std::string& value);
  void set_tags(int index, std::string&& value);
  void set_tags(int index, const char* value);
  void set_tags(int index, const char* value, size_t size);
  std::string* add_tags();
  void add_tags(const std::string& value);
  void add_tags(std::string&& value);
  void add_tags(const char* value);
  void add_tags(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& tags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_tags();
  private:
  const std::string& _internal_tags(int index) const;
  std::string* _internal_add_tags();
  public:

  // repeated .tradingpb.FundSize size = 5;
  int size_size() const;
  private:
  int _internal_size_size() const;
  public:
  void clear_size();
  ::tradingpb::FundSize* mutable_size(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tradingpb::FundSize >*
      mutable_size();
  private:
  const ::tradingpb::FundSize& _internal_size(int index) const;
  ::tradingpb::FundSize* _internal_add_size();
  public:
  const ::tradingpb::FundSize& size(int index) const;
  ::tradingpb::FundSize* add_size();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tradingpb::FundSize >&
      size() const;

  // repeated .tradingpb.FundManager managers = 7;
  int managers_size() const;
  private:
  int _internal_managers_size() const;
  public:
  void clear_managers();
  ::tradingpb::FundManager* mutable_managers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tradingpb::FundManager >*
      mutable_managers();
  private:
  const ::tradingpb::FundManager& _internal_managers(int index) const;
  ::tradingpb::FundManager* _internal_add_managers();
  public:
  const ::tradingpb::FundManager& managers(int index) const;
  ::tradingpb::FundManager* add_managers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tradingpb::FundManager >&
      managers() const;

  // repeated .tradingpb.FundResult results = 8;
  int results_size() const;
  private:
  int _internal_results_size() const;
  public:
  void clear_results();
  ::tradingpb::FundResult* mutable_results(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tradingpb::FundResult >*
      mutable_results();
  private:
  const ::tradingpb::FundResult& _internal_results(int index) const;
  ::tradingpb::FundResult* _internal_add_results();
  public:
  const ::tradingpb::FundResult& results(int index) const;
  ::tradingpb::FundResult* add_results();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tradingpb::FundResult >&
      results() const;

  // string code = 1;
  void clear_code();
  const std::string& code() const;
  void set_code(const std::string& value);
  void set_code(std::string&& value);
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  std::string* mutable_code();
  std::string* release_code();
  void set_allocated_code(std::string* code);
  private:
  const std::string& _internal_code() const;
  void _internal_set_code(const std::string& value);
  std::string* _internal_mutable_code();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string company = 6;
  void clear_company();
  const std::string& company() const;
  void set_company(const std::string& value);
  void set_company(std::string&& value);
  void set_company(const char* value);
  void set_company(const char* value, size_t size);
  std::string* mutable_company();
  std::string* release_company();
  void set_allocated_company(std::string* company);
  private:
  const std::string& _internal_company() const;
  void _internal_set_company(const std::string& value);
  std::string* _internal_mutable_company();
  public:

  // int64 createTime = 4;
  void clear_createtime();
  ::PROTOBUF_NAMESPACE_ID::int64 createtime() const;
  void set_createtime(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_createtime() const;
  void _internal_set_createtime(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:tradingpb.Fund)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> tags_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tradingpb::FundSize > size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tradingpb::FundManager > managers_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tradingpb::FundResult > results_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr company_;
  ::PROTOBUF_NAMESPACE_ID::int64 createtime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tradingdb2_2eproto;
};
// -------------------------------------------------------------------

class SymbolInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tradingpb.SymbolInfo) */ {
 public:
  SymbolInfo();
  virtual ~SymbolInfo();

  SymbolInfo(const SymbolInfo& from);
  SymbolInfo(SymbolInfo&& from) noexcept
    : SymbolInfo() {
    *this = ::std::move(from);
  }

  inline SymbolInfo& operator=(const SymbolInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SymbolInfo& operator=(SymbolInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SymbolInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SymbolInfo* internal_default_instance() {
    return reinterpret_cast<const SymbolInfo*>(
               &_SymbolInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SymbolInfo& a, SymbolInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SymbolInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SymbolInfo* New() const final {
    return CreateMaybeMessage<SymbolInfo>(nullptr);
  }

  SymbolInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SymbolInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SymbolInfo& from);
  void MergeFrom(const SymbolInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SymbolInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tradingpb.SymbolInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tradingdb2_2eproto);
    return ::descriptor_table_tradingdb2_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarketFieldNumber = 1,
    kSymbolFieldNumber = 2,
    kNameFieldNumber = 4,
    kFullnameFieldNumber = 5,
    kTypeFieldNumber = 6,
    kFundFieldNumber = 3,
  };
  // string market = 1;
  void clear_market();
  const std::string& market() const;
  void set_market(const std::string& value);
  void set_market(std::string&& value);
  void set_market(const char* value);
  void set_market(const char* value, size_t size);
  std::string* mutable_market();
  std::string* release_market();
  void set_allocated_market(std::string* market);
  private:
  const std::string& _internal_market() const;
  void _internal_set_market(const std::string& value);
  std::string* _internal_mutable_market();
  public:

  // string symbol = 2;
  void clear_symbol();
  const std::string& symbol() const;
  void set_symbol(const std::string& value);
  void set_symbol(std::string&& value);
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  std::string* mutable_symbol();
  std::string* release_symbol();
  void set_allocated_symbol(std::string* symbol);
  private:
  const std::string& _internal_symbol() const;
  void _internal_set_symbol(const std::string& value);
  std::string* _internal_mutable_symbol();
  public:

  // string name = 4;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string fullname = 5;
  void clear_fullname();
  const std::string& fullname() const;
  void set_fullname(const std::string& value);
  void set_fullname(std::string&& value);
  void set_fullname(const char* value);
  void set_fullname(const char* value, size_t size);
  std::string* mutable_fullname();
  std::string* release_fullname();
  void set_allocated_fullname(std::string* fullname);
  private:
  const std::string& _internal_fullname() const;
  void _internal_set_fullname(const std::string& value);
  std::string* _internal_mutable_fullname();
  public:

  // string type = 6;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // .tradingpb.Fund fund = 3;
  bool has_fund() const;
  private:
  bool _internal_has_fund() const;
  public:
  void clear_fund();
  const ::tradingpb::Fund& fund() const;
  ::tradingpb::Fund* release_fund();
  ::tradingpb::Fund* mutable_fund();
  void set_allocated_fund(::tradingpb::Fund* fund);
  private:
  const ::tradingpb::Fund& _internal_fund() const;
  ::tradingpb::Fund* _internal_mutable_fund();
  public:

  // @@protoc_insertion_point(class_scope:tradingpb.SymbolInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr market_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr symbol_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fullname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::tradingpb::Fund* fund_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tradingdb2_2eproto;
};
// -------------------------------------------------------------------

class RequestUpdCandles :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tradingpb.RequestUpdCandles) */ {
 public:
  RequestUpdCandles();
  virtual ~RequestUpdCandles();

  RequestUpdCandles(const RequestUpdCandles& from);
  RequestUpdCandles(RequestUpdCandles&& from) noexcept
    : RequestUpdCandles() {
    *this = ::std::move(from);
  }

  inline RequestUpdCandles& operator=(const RequestUpdCandles& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestUpdCandles& operator=(RequestUpdCandles&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RequestUpdCandles& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestUpdCandles* internal_default_instance() {
    return reinterpret_cast<const RequestUpdCandles*>(
               &_RequestUpdCandles_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(RequestUpdCandles& a, RequestUpdCandles& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestUpdCandles* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestUpdCandles* New() const final {
    return CreateMaybeMessage<RequestUpdCandles>(nullptr);
  }

  RequestUpdCandles* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestUpdCandles>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestUpdCandles& from);
  void MergeFrom(const RequestUpdCandles& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestUpdCandles* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tradingpb.RequestUpdCandles";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tradingdb2_2eproto);
    return ::descriptor_table_tradingdb2_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
    kCandlesFieldNumber = 2,
    kBasicRequestFieldNumber = 3,
  };
  // string token = 1 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_token();
  PROTOBUF_DEPRECATED const std::string& token() const;
  PROTOBUF_DEPRECATED void set_token(const std::string& value);
  PROTOBUF_DEPRECATED void set_token(std::string&& value);
  PROTOBUF_DEPRECATED void set_token(const char* value);
  PROTOBUF_DEPRECATED void set_token(const char* value, size_t size);
  PROTOBUF_DEPRECATED std::string* mutable_token();
  PROTOBUF_DEPRECATED std::string* release_token();
  PROTOBUF_DEPRECATED void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // .tradingpb.Candles candles = 2;
  bool has_candles() const;
  private:
  bool _internal_has_candles() const;
  public:
  void clear_candles();
  const ::tradingpb::Candles& candles() const;
  ::tradingpb::Candles* release_candles();
  ::tradingpb::Candles* mutable_candles();
  void set_allocated_candles(::tradingpb::Candles* candles);
  private:
  const ::tradingpb::Candles& _internal_candles() const;
  ::tradingpb::Candles* _internal_mutable_candles();
  public:

  // .tradingpb.BasicRequestData basicRequest = 3;
  bool has_basicrequest() const;
  private:
  bool _internal_has_basicrequest() const;
  public:
  void clear_basicrequest();
  const ::tradingpb::BasicRequestData& basicrequest() const;
  ::tradingpb::BasicRequestData* release_basicrequest();
  ::tradingpb::BasicRequestData* mutable_basicrequest();
  void set_allocated_basicrequest(::tradingpb::BasicRequestData* basicrequest);
  private:
  const ::tradingpb::BasicRequestData& _internal_basicrequest() const;
  ::tradingpb::BasicRequestData* _internal_mutable_basicrequest();
  public:

  // @@protoc_insertion_point(class_scope:tradingpb.RequestUpdCandles)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::tradingpb::Candles* candles_;
  ::tradingpb::BasicRequestData* basicrequest_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tradingdb2_2eproto;
};
// -------------------------------------------------------------------

class ReplyUpdCandles :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tradingpb.ReplyUpdCandles) */ {
 public:
  ReplyUpdCandles();
  virtual ~ReplyUpdCandles();

  ReplyUpdCandles(const ReplyUpdCandles& from);
  ReplyUpdCandles(ReplyUpdCandles&& from) noexcept
    : ReplyUpdCandles() {
    *this = ::std::move(from);
  }

  inline ReplyUpdCandles& operator=(const ReplyUpdCandles& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReplyUpdCandles& operator=(ReplyUpdCandles&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReplyUpdCandles& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReplyUpdCandles* internal_default_instance() {
    return reinterpret_cast<const ReplyUpdCandles*>(
               &_ReplyUpdCandles_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ReplyUpdCandles& a, ReplyUpdCandles& b) {
    a.Swap(&b);
  }
  inline void Swap(ReplyUpdCandles* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReplyUpdCandles* New() const final {
    return CreateMaybeMessage<ReplyUpdCandles>(nullptr);
  }

  ReplyUpdCandles* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReplyUpdCandles>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReplyUpdCandles& from);
  void MergeFrom(const ReplyUpdCandles& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReplyUpdCandles* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tradingpb.ReplyUpdCandles";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tradingdb2_2eproto);
    return ::descriptor_table_tradingdb2_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLengthOKFieldNumber = 1,
  };
  // int32 lengthOK = 1;
  void clear_lengthok();
  ::PROTOBUF_NAMESPACE_ID::int32 lengthok() const;
  void set_lengthok(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lengthok() const;
  void _internal_set_lengthok(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:tradingpb.ReplyUpdCandles)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 lengthok_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tradingdb2_2eproto;
};
// -------------------------------------------------------------------

class RequestGetCandles :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tradingpb.RequestGetCandles) */ {
 public:
  RequestGetCandles();
  virtual ~RequestGetCandles();

  RequestGetCandles(const RequestGetCandles& from);
  RequestGetCandles(RequestGetCandles&& from) noexcept
    : RequestGetCandles() {
    *this = ::std::move(from);
  }

  inline RequestGetCandles& operator=(const RequestGetCandles& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestGetCandles& operator=(RequestGetCandles&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RequestGetCandles& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestGetCandles* internal_default_instance() {
    return reinterpret_cast<const RequestGetCandles*>(
               &_RequestGetCandles_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(RequestGetCandles& a, RequestGetCandles& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestGetCandles* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestGetCandles* New() const final {
    return CreateMaybeMessage<RequestGetCandles>(nullptr);
  }

  RequestGetCandles* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestGetCandles>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestGetCandles& from);
  void MergeFrom(const RequestGetCandles& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestGetCandles* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tradingpb.RequestGetCandles";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tradingdb2_2eproto);
    return ::descriptor_table_tradingdb2_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagsFieldNumber = 7,
    kTokenFieldNumber = 1,
    kMarketFieldNumber = 2,
    kSymbolFieldNumber = 3,
    kTagFieldNumber = 4,
    kBasicRequestFieldNumber = 8,
    kTsStartFieldNumber = 5,
    kTsEndFieldNumber = 6,
  };
  // repeated string tags = 7;
  int tags_size() const;
  private:
  int _internal_tags_size() const;
  public:
  void clear_tags();
  const std::string& tags(int index) const;
  std::string* mutable_tags(int index);
  void set_tags(int index, const std::string& value);
  void set_tags(int index, std::string&& value);
  void set_tags(int index, const char* value);
  void set_tags(int index, const char* value, size_t size);
  std::string* add_tags();
  void add_tags(const std::string& value);
  void add_tags(std::string&& value);
  void add_tags(const char* value);
  void add_tags(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& tags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_tags();
  private:
  const std::string& _internal_tags(int index) const;
  std::string* _internal_add_tags();
  public:

  // string token = 1 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_token();
  PROTOBUF_DEPRECATED const std::string& token() const;
  PROTOBUF_DEPRECATED void set_token(const std::string& value);
  PROTOBUF_DEPRECATED void set_token(std::string&& value);
  PROTOBUF_DEPRECATED void set_token(const char* value);
  PROTOBUF_DEPRECATED void set_token(const char* value, size_t size);
  PROTOBUF_DEPRECATED std::string* mutable_token();
  PROTOBUF_DEPRECATED std::string* release_token();
  PROTOBUF_DEPRECATED void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // string market = 2;
  void clear_market();
  const std::string& market() const;
  void set_market(const std::string& value);
  void set_market(std::string&& value);
  void set_market(const char* value);
  void set_market(const char* value, size_t size);
  std::string* mutable_market();
  std::string* release_market();
  void set_allocated_market(std::string* market);
  private:
  const std::string& _internal_market() const;
  void _internal_set_market(const std::string& value);
  std::string* _internal_mutable_market();
  public:

  // string symbol = 3;
  void clear_symbol();
  const std::string& symbol() const;
  void set_symbol(const std::string& value);
  void set_symbol(std::string&& value);
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  std::string* mutable_symbol();
  std::string* release_symbol();
  void set_allocated_symbol(std::string* symbol);
  private:
  const std::string& _internal_symbol() const;
  void _internal_set_symbol(const std::string& value);
  std::string* _internal_mutable_symbol();
  public:

  // string tag = 4 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_tag();
  PROTOBUF_DEPRECATED const std::string& tag() const;
  PROTOBUF_DEPRECATED void set_tag(const std::string& value);
  PROTOBUF_DEPRECATED void set_tag(std::string&& value);
  PROTOBUF_DEPRECATED void set_tag(const char* value);
  PROTOBUF_DEPRECATED void set_tag(const char* value, size_t size);
  PROTOBUF_DEPRECATED std::string* mutable_tag();
  PROTOBUF_DEPRECATED std::string* release_tag();
  PROTOBUF_DEPRECATED void set_allocated_tag(std::string* tag);
  private:
  const std::string& _internal_tag() const;
  void _internal_set_tag(const std::string& value);
  std::string* _internal_mutable_tag();
  public:

  // .tradingpb.BasicRequestData basicRequest = 8;
  bool has_basicrequest() const;
  private:
  bool _internal_has_basicrequest() const;
  public:
  void clear_basicrequest();
  const ::tradingpb::BasicRequestData& basicrequest() const;
  ::tradingpb::BasicRequestData* release_basicrequest();
  ::tradingpb::BasicRequestData* mutable_basicrequest();
  void set_allocated_basicrequest(::tradingpb::BasicRequestData* basicrequest);
  private:
  const ::tradingpb::BasicRequestData& _internal_basicrequest() const;
  ::tradingpb::BasicRequestData* _internal_mutable_basicrequest();
  public:

  // int64 tsStart = 5;
  void clear_tsstart();
  ::PROTOBUF_NAMESPACE_ID::int64 tsstart() const;
  void set_tsstart(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_tsstart() const;
  void _internal_set_tsstart(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 tsEnd = 6;
  void clear_tsend();
  ::PROTOBUF_NAMESPACE_ID::int64 tsend() const;
  void set_tsend(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_tsend() const;
  void _internal_set_tsend(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:tradingpb.RequestGetCandles)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> tags_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr market_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr symbol_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tag_;
  ::tradingpb::BasicRequestData* basicrequest_;
  ::PROTOBUF_NAMESPACE_ID::int64 tsstart_;
  ::PROTOBUF_NAMESPACE_ID::int64 tsend_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tradingdb2_2eproto;
};
// -------------------------------------------------------------------

class ReplyGetCandles :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tradingpb.ReplyGetCandles) */ {
 public:
  ReplyGetCandles();
  virtual ~ReplyGetCandles();

  ReplyGetCandles(const ReplyGetCandles& from);
  ReplyGetCandles(ReplyGetCandles&& from) noexcept
    : ReplyGetCandles() {
    *this = ::std::move(from);
  }

  inline ReplyGetCandles& operator=(const ReplyGetCandles& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReplyGetCandles& operator=(ReplyGetCandles&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReplyGetCandles& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReplyGetCandles* internal_default_instance() {
    return reinterpret_cast<const ReplyGetCandles*>(
               &_ReplyGetCandles_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ReplyGetCandles& a, ReplyGetCandles& b) {
    a.Swap(&b);
  }
  inline void Swap(ReplyGetCandles* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReplyGetCandles* New() const final {
    return CreateMaybeMessage<ReplyGetCandles>(nullptr);
  }

  ReplyGetCandles* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReplyGetCandles>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReplyGetCandles& from);
  void MergeFrom(const ReplyGetCandles& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReplyGetCandles* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tradingpb.ReplyGetCandles";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tradingdb2_2eproto);
    return ::descriptor_table_tradingdb2_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCandlesFieldNumber = 1,
  };
  // .tradingpb.Candles candles = 1;
  bool has_candles() const;
  private:
  bool _internal_has_candles() const;
  public:
  void clear_candles();
  const ::tradingpb::Candles& candles() const;
  ::tradingpb::Candles* release_candles();
  ::tradingpb::Candles* mutable_candles();
  void set_allocated_candles(::tradingpb::Candles* candles);
  private:
  const ::tradingpb::Candles& _internal_candles() const;
  ::tradingpb::Candles* _internal_mutable_candles();
  public:

  // @@protoc_insertion_point(class_scope:tradingpb.ReplyGetCandles)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::tradingpb::Candles* candles_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tradingdb2_2eproto;
};
// -------------------------------------------------------------------

class RequestUpdSymbol :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tradingpb.RequestUpdSymbol) */ {
 public:
  RequestUpdSymbol();
  virtual ~RequestUpdSymbol();

  RequestUpdSymbol(const RequestUpdSymbol& from);
  RequestUpdSymbol(RequestUpdSymbol&& from) noexcept
    : RequestUpdSymbol() {
    *this = ::std::move(from);
  }

  inline RequestUpdSymbol& operator=(const RequestUpdSymbol& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestUpdSymbol& operator=(RequestUpdSymbol&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RequestUpdSymbol& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestUpdSymbol* internal_default_instance() {
    return reinterpret_cast<const RequestUpdSymbol*>(
               &_RequestUpdSymbol_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(RequestUpdSymbol& a, RequestUpdSymbol& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestUpdSymbol* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestUpdSymbol* New() const final {
    return CreateMaybeMessage<RequestUpdSymbol>(nullptr);
  }

  RequestUpdSymbol* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestUpdSymbol>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestUpdSymbol& from);
  void MergeFrom(const RequestUpdSymbol& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestUpdSymbol* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tradingpb.RequestUpdSymbol";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tradingdb2_2eproto);
    return ::descriptor_table_tradingdb2_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
    kSymbolFieldNumber = 2,
    kBasicRequestFieldNumber = 3,
  };
  // string token = 1 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_token();
  PROTOBUF_DEPRECATED const std::string& token() const;
  PROTOBUF_DEPRECATED void set_token(const std::string& value);
  PROTOBUF_DEPRECATED void set_token(std::string&& value);
  PROTOBUF_DEPRECATED void set_token(const char* value);
  PROTOBUF_DEPRECATED void set_token(const char* value, size_t size);
  PROTOBUF_DEPRECATED std::string* mutable_token();
  PROTOBUF_DEPRECATED std::string* release_token();
  PROTOBUF_DEPRECATED void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // .tradingpb.SymbolInfo symbol = 2;
  bool has_symbol() const;
  private:
  bool _internal_has_symbol() const;
  public:
  void clear_symbol();
  const ::tradingpb::SymbolInfo& symbol() const;
  ::tradingpb::SymbolInfo* release_symbol();
  ::tradingpb::SymbolInfo* mutable_symbol();
  void set_allocated_symbol(::tradingpb::SymbolInfo* symbol);
  private:
  const ::tradingpb::SymbolInfo& _internal_symbol() const;
  ::tradingpb::SymbolInfo* _internal_mutable_symbol();
  public:

  // .tradingpb.BasicRequestData basicRequest = 3;
  bool has_basicrequest() const;
  private:
  bool _internal_has_basicrequest() const;
  public:
  void clear_basicrequest();
  const ::tradingpb::BasicRequestData& basicrequest() const;
  ::tradingpb::BasicRequestData* release_basicrequest();
  ::tradingpb::BasicRequestData* mutable_basicrequest();
  void set_allocated_basicrequest(::tradingpb::BasicRequestData* basicrequest);
  private:
  const ::tradingpb::BasicRequestData& _internal_basicrequest() const;
  ::tradingpb::BasicRequestData* _internal_mutable_basicrequest();
  public:

  // @@protoc_insertion_point(class_scope:tradingpb.RequestUpdSymbol)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::tradingpb::SymbolInfo* symbol_;
  ::tradingpb::BasicRequestData* basicrequest_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tradingdb2_2eproto;
};
// -------------------------------------------------------------------

class ReplyUpdSymbol :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tradingpb.ReplyUpdSymbol) */ {
 public:
  ReplyUpdSymbol();
  virtual ~ReplyUpdSymbol();

  ReplyUpdSymbol(const ReplyUpdSymbol& from);
  ReplyUpdSymbol(ReplyUpdSymbol&& from) noexcept
    : ReplyUpdSymbol() {
    *this = ::std::move(from);
  }

  inline ReplyUpdSymbol& operator=(const ReplyUpdSymbol& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReplyUpdSymbol& operator=(ReplyUpdSymbol&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReplyUpdSymbol& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReplyUpdSymbol* internal_default_instance() {
    return reinterpret_cast<const ReplyUpdSymbol*>(
               &_ReplyUpdSymbol_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ReplyUpdSymbol& a, ReplyUpdSymbol& b) {
    a.Swap(&b);
  }
  inline void Swap(ReplyUpdSymbol* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReplyUpdSymbol* New() const final {
    return CreateMaybeMessage<ReplyUpdSymbol>(nullptr);
  }

  ReplyUpdSymbol* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReplyUpdSymbol>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReplyUpdSymbol& from);
  void MergeFrom(const ReplyUpdSymbol& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReplyUpdSymbol* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tradingpb.ReplyUpdSymbol";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tradingdb2_2eproto);
    return ::descriptor_table_tradingdb2_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsOKFieldNumber = 1,
  };
  // bool isOK = 1;
  void clear_isok();
  bool isok() const;
  void set_isok(bool value);
  private:
  bool _internal_isok() const;
  void _internal_set_isok(bool value);
  public:

  // @@protoc_insertion_point(class_scope:tradingpb.ReplyUpdSymbol)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool isok_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tradingdb2_2eproto;
};
// -------------------------------------------------------------------

class RequestGetSymbol :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tradingpb.RequestGetSymbol) */ {
 public:
  RequestGetSymbol();
  virtual ~RequestGetSymbol();

  RequestGetSymbol(const RequestGetSymbol& from);
  RequestGetSymbol(RequestGetSymbol&& from) noexcept
    : RequestGetSymbol() {
    *this = ::std::move(from);
  }

  inline RequestGetSymbol& operator=(const RequestGetSymbol& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestGetSymbol& operator=(RequestGetSymbol&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RequestGetSymbol& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestGetSymbol* internal_default_instance() {
    return reinterpret_cast<const RequestGetSymbol*>(
               &_RequestGetSymbol_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(RequestGetSymbol& a, RequestGetSymbol& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestGetSymbol* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestGetSymbol* New() const final {
    return CreateMaybeMessage<RequestGetSymbol>(nullptr);
  }

  RequestGetSymbol* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestGetSymbol>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestGetSymbol& from);
  void MergeFrom(const RequestGetSymbol& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestGetSymbol* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tradingpb.RequestGetSymbol";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tradingdb2_2eproto);
    return ::descriptor_table_tradingdb2_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
    kMarketFieldNumber = 2,
    kSymbolFieldNumber = 3,
    kBasicRequestFieldNumber = 4,
  };
  // string token = 1 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_token();
  PROTOBUF_DEPRECATED const std::string& token() const;
  PROTOBUF_DEPRECATED void set_token(const std::string& value);
  PROTOBUF_DEPRECATED void set_token(std::string&& value);
  PROTOBUF_DEPRECATED void set_token(const char* value);
  PROTOBUF_DEPRECATED void set_token(const char* value, size_t size);
  PROTOBUF_DEPRECATED std::string* mutable_token();
  PROTOBUF_DEPRECATED std::string* release_token();
  PROTOBUF_DEPRECATED void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // string market = 2;
  void clear_market();
  const std::string& market() const;
  void set_market(const std::string& value);
  void set_market(std::string&& value);
  void set_market(const char* value);
  void set_market(const char* value, size_t size);
  std::string* mutable_market();
  std::string* release_market();
  void set_allocated_market(std::string* market);
  private:
  const std::string& _internal_market() const;
  void _internal_set_market(const std::string& value);
  std::string* _internal_mutable_market();
  public:

  // string symbol = 3;
  void clear_symbol();
  const std::string& symbol() const;
  void set_symbol(const std::string& value);
  void set_symbol(std::string&& value);
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  std::string* mutable_symbol();
  std::string* release_symbol();
  void set_allocated_symbol(std::string* symbol);
  private:
  const std::string& _internal_symbol() const;
  void _internal_set_symbol(const std::string& value);
  std::string* _internal_mutable_symbol();
  public:

  // .tradingpb.BasicRequestData basicRequest = 4;
  bool has_basicrequest() const;
  private:
  bool _internal_has_basicrequest() const;
  public:
  void clear_basicrequest();
  const ::tradingpb::BasicRequestData& basicrequest() const;
  ::tradingpb::BasicRequestData* release_basicrequest();
  ::tradingpb::BasicRequestData* mutable_basicrequest();
  void set_allocated_basicrequest(::tradingpb::BasicRequestData* basicrequest);
  private:
  const ::tradingpb::BasicRequestData& _internal_basicrequest() const;
  ::tradingpb::BasicRequestData* _internal_mutable_basicrequest();
  public:

  // @@protoc_insertion_point(class_scope:tradingpb.RequestGetSymbol)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr market_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr symbol_;
  ::tradingpb::BasicRequestData* basicrequest_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tradingdb2_2eproto;
};
// -------------------------------------------------------------------

class ReplyGetSymbol :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tradingpb.ReplyGetSymbol) */ {
 public:
  ReplyGetSymbol();
  virtual ~ReplyGetSymbol();

  ReplyGetSymbol(const ReplyGetSymbol& from);
  ReplyGetSymbol(ReplyGetSymbol&& from) noexcept
    : ReplyGetSymbol() {
    *this = ::std::move(from);
  }

  inline ReplyGetSymbol& operator=(const ReplyGetSymbol& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReplyGetSymbol& operator=(ReplyGetSymbol&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReplyGetSymbol& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReplyGetSymbol* internal_default_instance() {
    return reinterpret_cast<const ReplyGetSymbol*>(
               &_ReplyGetSymbol_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(ReplyGetSymbol& a, ReplyGetSymbol& b) {
    a.Swap(&b);
  }
  inline void Swap(ReplyGetSymbol* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReplyGetSymbol* New() const final {
    return CreateMaybeMessage<ReplyGetSymbol>(nullptr);
  }

  ReplyGetSymbol* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReplyGetSymbol>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReplyGetSymbol& from);
  void MergeFrom(const ReplyGetSymbol& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReplyGetSymbol* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tradingpb.ReplyGetSymbol";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tradingdb2_2eproto);
    return ::descriptor_table_tradingdb2_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSymbolFieldNumber = 1,
  };
  // .tradingpb.SymbolInfo symbol = 1;
  bool has_symbol() const;
  private:
  bool _internal_has_symbol() const;
  public:
  void clear_symbol();
  const ::tradingpb::SymbolInfo& symbol() const;
  ::tradingpb::SymbolInfo* release_symbol();
  ::tradingpb::SymbolInfo* mutable_symbol();
  void set_allocated_symbol(::tradingpb::SymbolInfo* symbol);
  private:
  const ::tradingpb::SymbolInfo& _internal_symbol() const;
  ::tradingpb::SymbolInfo* _internal_mutable_symbol();
  public:

  // @@protoc_insertion_point(class_scope:tradingpb.ReplyGetSymbol)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::tradingpb::SymbolInfo* symbol_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tradingdb2_2eproto;
};
// -------------------------------------------------------------------

class RequestGetSymbols :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tradingpb.RequestGetSymbols) */ {
 public:
  RequestGetSymbols();
  virtual ~RequestGetSymbols();

  RequestGetSymbols(const RequestGetSymbols& from);
  RequestGetSymbols(RequestGetSymbols&& from) noexcept
    : RequestGetSymbols() {
    *this = ::std::move(from);
  }

  inline RequestGetSymbols& operator=(const RequestGetSymbols& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestGetSymbols& operator=(RequestGetSymbols&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RequestGetSymbols& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestGetSymbols* internal_default_instance() {
    return reinterpret_cast<const RequestGetSymbols*>(
               &_RequestGetSymbols_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(RequestGetSymbols& a, RequestGetSymbols& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestGetSymbols* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestGetSymbols* New() const final {
    return CreateMaybeMessage<RequestGetSymbols>(nullptr);
  }

  RequestGetSymbols* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestGetSymbols>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestGetSymbols& from);
  void MergeFrom(const RequestGetSymbols& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestGetSymbols* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tradingpb.RequestGetSymbols";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tradingdb2_2eproto);
    return ::descriptor_table_tradingdb2_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSymbolsFieldNumber = 3,
    kTokenFieldNumber = 1,
    kMarketFieldNumber = 2,
    kBasicRequestFieldNumber = 4,
  };
  // repeated string symbols = 3;
  int symbols_size() const;
  private:
  int _internal_symbols_size() const;
  public:
  void clear_symbols();
  const std::string& symbols(int index) const;
  std::string* mutable_symbols(int index);
  void set_symbols(int index, const std::string& value);
  void set_symbols(int index, std::string&& value);
  void set_symbols(int index, const char* value);
  void set_symbols(int index, const char* value, size_t size);
  std::string* add_symbols();
  void add_symbols(const std::string& value);
  void add_symbols(std::string&& value);
  void add_symbols(const char* value);
  void add_symbols(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& symbols() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_symbols();
  private:
  const std::string& _internal_symbols(int index) const;
  std::string* _internal_add_symbols();
  public:

  // string token = 1 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_token();
  PROTOBUF_DEPRECATED const std::string& token() const;
  PROTOBUF_DEPRECATED void set_token(const std::string& value);
  PROTOBUF_DEPRECATED void set_token(std::string&& value);
  PROTOBUF_DEPRECATED void set_token(const char* value);
  PROTOBUF_DEPRECATED void set_token(const char* value, size_t size);
  PROTOBUF_DEPRECATED std::string* mutable_token();
  PROTOBUF_DEPRECATED std::string* release_token();
  PROTOBUF_DEPRECATED void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // string market = 2;
  void clear_market();
  const std::string& market() const;
  void set_market(const std::string& value);
  void set_market(std::string&& value);
  void set_market(const char* value);
  void set_market(const char* value, size_t size);
  std::string* mutable_market();
  std::string* release_market();
  void set_allocated_market(std::string* market);
  private:
  const std::string& _internal_market() const;
  void _internal_set_market(const std::string& value);
  std::string* _internal_mutable_market();
  public:

  // .tradingpb.BasicRequestData basicRequest = 4;
  bool has_basicrequest() const;
  private:
  bool _internal_has_basicrequest() const;
  public:
  void clear_basicrequest();
  const ::tradingpb::BasicRequestData& basicrequest() const;
  ::tradingpb::BasicRequestData* release_basicrequest();
  ::tradingpb::BasicRequestData* mutable_basicrequest();
  void set_allocated_basicrequest(::tradingpb::BasicRequestData* basicrequest);
  private:
  const ::tradingpb::BasicRequestData& _internal_basicrequest() const;
  ::tradingpb::BasicRequestData* _internal_mutable_basicrequest();
  public:

  // @@protoc_insertion_point(class_scope:tradingpb.RequestGetSymbols)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> symbols_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr market_;
  ::tradingpb::BasicRequestData* basicrequest_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tradingdb2_2eproto;
};
// -------------------------------------------------------------------

class RequestSimTrading :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tradingpb.RequestSimTrading) */ {
 public:
  RequestSimTrading();
  virtual ~RequestSimTrading();

  RequestSimTrading(const RequestSimTrading& from);
  RequestSimTrading(RequestSimTrading&& from) noexcept
    : RequestSimTrading() {
    *this = ::std::move(from);
  }

  inline RequestSimTrading& operator=(const RequestSimTrading& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestSimTrading& operator=(RequestSimTrading&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RequestSimTrading& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestSimTrading* internal_default_instance() {
    return reinterpret_cast<const RequestSimTrading*>(
               &_RequestSimTrading_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(RequestSimTrading& a, RequestSimTrading& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestSimTrading* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestSimTrading* New() const final {
    return CreateMaybeMessage<RequestSimTrading>(nullptr);
  }

  RequestSimTrading* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestSimTrading>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestSimTrading& from);
  void MergeFrom(const RequestSimTrading& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestSimTrading* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tradingpb.RequestSimTrading";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tradingdb2_2eproto);
    return ::descriptor_table_tradingdb2_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSortByFieldNumber = 8,
    kBasicRequestFieldNumber = 1,
    kParamsFieldNumber = 2,
    kIgnoreCacheFieldNumber = 3,
    kIndexFieldNumber = 4,
    kIgnoreTotalReturnFieldNumber = 5,
    kMinNumsFieldNumber = 6,
    kMaxNumsFieldNumber = 7,
  };
  // string sortBy = 8;
  void clear_sortby();
  const std::string& sortby() const;
  void set_sortby(const std::string& value);
  void set_sortby(std::string&& value);
  void set_sortby(const char* value);
  void set_sortby(const char* value, size_t size);
  std::string* mutable_sortby();
  std::string* release_sortby();
  void set_allocated_sortby(std::string* sortby);
  private:
  const std::string& _internal_sortby() const;
  void _internal_set_sortby(const std::string& value);
  std::string* _internal_mutable_sortby();
  public:

  // .tradingpb.BasicRequestData basicRequest = 1;
  bool has_basicrequest() const;
  private:
  bool _internal_has_basicrequest() const;
  public:
  void clear_basicrequest();
  const ::tradingpb::BasicRequestData& basicrequest() const;
  ::tradingpb::BasicRequestData* release_basicrequest();
  ::tradingpb::BasicRequestData* mutable_basicrequest();
  void set_allocated_basicrequest(::tradingpb::BasicRequestData* basicrequest);
  private:
  const ::tradingpb::BasicRequestData& _internal_basicrequest() const;
  ::tradingpb::BasicRequestData* _internal_mutable_basicrequest();
  public:

  // .tradingpb.SimTradingParams params = 2;
  bool has_params() const;
  private:
  bool _internal_has_params() const;
  public:
  void clear_params();
  const ::tradingpb::SimTradingParams& params() const;
  ::tradingpb::SimTradingParams* release_params();
  ::tradingpb::SimTradingParams* mutable_params();
  void set_allocated_params(::tradingpb::SimTradingParams* params);
  private:
  const ::tradingpb::SimTradingParams& _internal_params() const;
  ::tradingpb::SimTradingParams* _internal_mutable_params();
  public:

  // bool ignoreCache = 3;
  void clear_ignorecache();
  bool ignorecache() const;
  void set_ignorecache(bool value);
  private:
  bool _internal_ignorecache() const;
  void _internal_set_ignorecache(bool value);
  public:

  // int32 index = 4;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::int32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float ignoreTotalReturn = 5;
  void clear_ignoretotalreturn();
  float ignoretotalreturn() const;
  void set_ignoretotalreturn(float value);
  private:
  float _internal_ignoretotalreturn() const;
  void _internal_set_ignoretotalreturn(float value);
  public:

  // int32 minNums = 6;
  void clear_minnums();
  ::PROTOBUF_NAMESPACE_ID::int32 minnums() const;
  void set_minnums(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_minnums() const;
  void _internal_set_minnums(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 maxNums = 7 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_maxnums();
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::int32 maxnums() const;
  PROTOBUF_DEPRECATED void set_maxnums(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_maxnums() const;
  void _internal_set_maxnums(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:tradingpb.RequestSimTrading)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sortby_;
  ::tradingpb::BasicRequestData* basicrequest_;
  ::tradingpb::SimTradingParams* params_;
  bool ignorecache_;
  ::PROTOBUF_NAMESPACE_ID::int32 index_;
  float ignoretotalreturn_;
  ::PROTOBUF_NAMESPACE_ID::int32 minnums_;
  ::PROTOBUF_NAMESPACE_ID::int32 maxnums_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tradingdb2_2eproto;
};
// -------------------------------------------------------------------

class ReplySimTrading :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tradingpb.ReplySimTrading) */ {
 public:
  ReplySimTrading();
  virtual ~ReplySimTrading();

  ReplySimTrading(const ReplySimTrading& from);
  ReplySimTrading(ReplySimTrading&& from) noexcept
    : ReplySimTrading() {
    *this = ::std::move(from);
  }

  inline ReplySimTrading& operator=(const ReplySimTrading& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReplySimTrading& operator=(ReplySimTrading&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReplySimTrading& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReplySimTrading* internal_default_instance() {
    return reinterpret_cast<const ReplySimTrading*>(
               &_ReplySimTrading_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(ReplySimTrading& a, ReplySimTrading& b) {
    a.Swap(&b);
  }
  inline void Swap(ReplySimTrading* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReplySimTrading* New() const final {
    return CreateMaybeMessage<ReplySimTrading>(nullptr);
  }

  ReplySimTrading* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReplySimTrading>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReplySimTrading& from);
  void MergeFrom(const ReplySimTrading& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReplySimTrading* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tradingpb.ReplySimTrading";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tradingdb2_2eproto);
    return ::descriptor_table_tradingdb2_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPnlFieldNumber = 1,
    kBaselineFieldNumber = 2,
    kIndexFieldNumber = 3,
  };
  // repeated .tradingpb.PNLData pnl = 1;
  int pnl_size() const;
  private:
  int _internal_pnl_size() const;
  public:
  void clear_pnl();
  ::tradingpb::PNLData* mutable_pnl(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tradingpb::PNLData >*
      mutable_pnl();
  private:
  const ::tradingpb::PNLData& _internal_pnl(int index) const;
  ::tradingpb::PNLData* _internal_add_pnl();
  public:
  const ::tradingpb::PNLData& pnl(int index) const;
  ::tradingpb::PNLData* add_pnl();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tradingpb::PNLData >&
      pnl() const;

  // repeated .tradingpb.PNLData baseline = 2 [deprecated = true];
  PROTOBUF_DEPRECATED int baseline_size() const;
  private:
  int _internal_baseline_size() const;
  public:
  PROTOBUF_DEPRECATED void clear_baseline();
  PROTOBUF_DEPRECATED ::tradingpb::PNLData* mutable_baseline(int index);
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tradingpb::PNLData >*
      mutable_baseline();
  private:
  const ::tradingpb::PNLData& _internal_baseline(int index) const;
  ::tradingpb::PNLData* _internal_add_baseline();
  public:
  PROTOBUF_DEPRECATED const ::tradingpb::PNLData& baseline(int index) const;
  PROTOBUF_DEPRECATED ::tradingpb::PNLData* add_baseline();
  PROTOBUF_DEPRECATED const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tradingpb::PNLData >&
      baseline() const;

  // int32 index = 3;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::int32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:tradingpb.ReplySimTrading)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tradingpb::PNLData > pnl_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tradingpb::PNLData > baseline_;
  ::PROTOBUF_NAMESPACE_ID::int32 index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tradingdb2_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Candle

// int64 ts = 1;
inline void Candle::clear_ts() {
  ts_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Candle::_internal_ts() const {
  return ts_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Candle::ts() const {
  // @@protoc_insertion_point(field_get:tradingpb.Candle.ts)
  return _internal_ts();
}
inline void Candle::_internal_set_ts(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  ts_ = value;
}
inline void Candle::set_ts(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_ts(value);
  // @@protoc_insertion_point(field_set:tradingpb.Candle.ts)
}

// int64 open = 2;
inline void Candle::clear_open() {
  open_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Candle::_internal_open() const {
  return open_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Candle::open() const {
  // @@protoc_insertion_point(field_get:tradingpb.Candle.open)
  return _internal_open();
}
inline void Candle::_internal_set_open(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  open_ = value;
}
inline void Candle::set_open(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_open(value);
  // @@protoc_insertion_point(field_set:tradingpb.Candle.open)
}

// int64 close = 3;
inline void Candle::clear_close() {
  close_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Candle::_internal_close() const {
  return close_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Candle::close() const {
  // @@protoc_insertion_point(field_get:tradingpb.Candle.close)
  return _internal_close();
}
inline void Candle::_internal_set_close(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  close_ = value;
}
inline void Candle::set_close(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_close(value);
  // @@protoc_insertion_point(field_set:tradingpb.Candle.close)
}

// int64 high = 4;
inline void Candle::clear_high() {
  high_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Candle::_internal_high() const {
  return high_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Candle::high() const {
  // @@protoc_insertion_point(field_get:tradingpb.Candle.high)
  return _internal_high();
}
inline void Candle::_internal_set_high(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  high_ = value;
}
inline void Candle::set_high(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_high(value);
  // @@protoc_insertion_point(field_set:tradingpb.Candle.high)
}

// int64 low = 5;
inline void Candle::clear_low() {
  low_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Candle::_internal_low() const {
  return low_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Candle::low() const {
  // @@protoc_insertion_point(field_get:tradingpb.Candle.low)
  return _internal_low();
}
inline void Candle::_internal_set_low(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  low_ = value;
}
inline void Candle::set_low(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_low(value);
  // @@protoc_insertion_point(field_set:tradingpb.Candle.low)
}

// int64 volume = 6;
inline void Candle::clear_volume() {
  volume_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Candle::_internal_volume() const {
  return volume_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Candle::volume() const {
  // @@protoc_insertion_point(field_get:tradingpb.Candle.volume)
  return _internal_volume();
}
inline void Candle::_internal_set_volume(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  volume_ = value;
}
inline void Candle::set_volume(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_volume(value);
  // @@protoc_insertion_point(field_set:tradingpb.Candle.volume)
}

// int64 openInterest = 7;
inline void Candle::clear_openinterest() {
  openinterest_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Candle::_internal_openinterest() const {
  return openinterest_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Candle::openinterest() const {
  // @@protoc_insertion_point(field_get:tradingpb.Candle.openInterest)
  return _internal_openinterest();
}
inline void Candle::_internal_set_openinterest(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  openinterest_ = value;
}
inline void Candle::set_openinterest(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_openinterest(value);
  // @@protoc_insertion_point(field_set:tradingpb.Candle.openInterest)
}

// int64 trades = 8;
inline void Candle::clear_trades() {
  trades_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Candle::_internal_trades() const {
  return trades_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Candle::trades() const {
  // @@protoc_insertion_point(field_get:tradingpb.Candle.trades)
  return _internal_trades();
}
inline void Candle::_internal_set_trades(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  trades_ = value;
}
inline void Candle::set_trades(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_trades(value);
  // @@protoc_insertion_point(field_set:tradingpb.Candle.trades)
}

// double vwap = 9;
inline void Candle::clear_vwap() {
  vwap_ = 0;
}
inline double Candle::_internal_vwap() const {
  return vwap_;
}
inline double Candle::vwap() const {
  // @@protoc_insertion_point(field_get:tradingpb.Candle.vwap)
  return _internal_vwap();
}
inline void Candle::_internal_set_vwap(double value) {
  
  vwap_ = value;
}
inline void Candle::set_vwap(double value) {
  _internal_set_vwap(value);
  // @@protoc_insertion_point(field_set:tradingpb.Candle.vwap)
}

// int64 lastSize = 10;
inline void Candle::clear_lastsize() {
  lastsize_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Candle::_internal_lastsize() const {
  return lastsize_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Candle::lastsize() const {
  // @@protoc_insertion_point(field_get:tradingpb.Candle.lastSize)
  return _internal_lastsize();
}
inline void Candle::_internal_set_lastsize(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  lastsize_ = value;
}
inline void Candle::set_lastsize(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_lastsize(value);
  // @@protoc_insertion_point(field_set:tradingpb.Candle.lastSize)
}

// int64 turnover = 11;
inline void Candle::clear_turnover() {
  turnover_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Candle::_internal_turnover() const {
  return turnover_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Candle::turnover() const {
  // @@protoc_insertion_point(field_get:tradingpb.Candle.turnover)
  return _internal_turnover();
}
inline void Candle::_internal_set_turnover(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  turnover_ = value;
}
inline void Candle::set_turnover(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_turnover(value);
  // @@protoc_insertion_point(field_set:tradingpb.Candle.turnover)
}

// double homeNotional = 12;
inline void Candle::clear_homenotional() {
  homenotional_ = 0;
}
inline double Candle::_internal_homenotional() const {
  return homenotional_;
}
inline double Candle::homenotional() const {
  // @@protoc_insertion_point(field_get:tradingpb.Candle.homeNotional)
  return _internal_homenotional();
}
inline void Candle::_internal_set_homenotional(double value) {
  
  homenotional_ = value;
}
inline void Candle::set_homenotional(double value) {
  _internal_set_homenotional(value);
  // @@protoc_insertion_point(field_set:tradingpb.Candle.homeNotional)
}

// double foreignNotional = 13;
inline void Candle::clear_foreignnotional() {
  foreignnotional_ = 0;
}
inline double Candle::_internal_foreignnotional() const {
  return foreignnotional_;
}
inline double Candle::foreignnotional() const {
  // @@protoc_insertion_point(field_get:tradingpb.Candle.foreignNotional)
  return _internal_foreignnotional();
}
inline void Candle::_internal_set_foreignnotional(double value) {
  
  foreignnotional_ = value;
}
inline void Candle::set_foreignnotional(double value) {
  _internal_set_foreignnotional(value);
  // @@protoc_insertion_point(field_set:tradingpb.Candle.foreignNotional)
}

// int64 totalMoney = 14;
inline void Candle::clear_totalmoney() {
  totalmoney_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Candle::_internal_totalmoney() const {
  return totalmoney_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Candle::totalmoney() const {
  // @@protoc_insertion_point(field_get:tradingpb.Candle.totalMoney)
  return _internal_totalmoney();
}
inline void Candle::_internal_set_totalmoney(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  totalmoney_ = value;
}
inline void Candle::set_totalmoney(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_totalmoney(value);
  // @@protoc_insertion_point(field_set:tradingpb.Candle.totalMoney)
}

// bool paused = 15;
inline void Candle::clear_paused() {
  paused_ = false;
}
inline bool Candle::_internal_paused() const {
  return paused_;
}
inline bool Candle::paused() const {
  // @@protoc_insertion_point(field_get:tradingpb.Candle.paused)
  return _internal_paused();
}
inline void Candle::_internal_set_paused(bool value) {
  
  paused_ = value;
}
inline void Candle::set_paused(bool value) {
  _internal_set_paused(value);
  // @@protoc_insertion_point(field_set:tradingpb.Candle.paused)
}

// int64 highLimit = 16;
inline void Candle::clear_highlimit() {
  highlimit_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Candle::_internal_highlimit() const {
  return highlimit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Candle::highlimit() const {
  // @@protoc_insertion_point(field_get:tradingpb.Candle.highLimit)
  return _internal_highlimit();
}
inline void Candle::_internal_set_highlimit(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  highlimit_ = value;
}
inline void Candle::set_highlimit(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_highlimit(value);
  // @@protoc_insertion_point(field_set:tradingpb.Candle.highLimit)
}

// int64 lowLimit = 17;
inline void Candle::clear_lowlimit() {
  lowlimit_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Candle::_internal_lowlimit() const {
  return lowlimit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Candle::lowlimit() const {
  // @@protoc_insertion_point(field_get:tradingpb.Candle.lowLimit)
  return _internal_lowlimit();
}
inline void Candle::_internal_set_lowlimit(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  lowlimit_ = value;
}
inline void Candle::set_lowlimit(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_lowlimit(value);
  // @@protoc_insertion_point(field_set:tradingpb.Candle.lowLimit)
}

// int64 avg = 18;
inline void Candle::clear_avg() {
  avg_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Candle::_internal_avg() const {
  return avg_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Candle::avg() const {
  // @@protoc_insertion_point(field_get:tradingpb.Candle.avg)
  return _internal_avg();
}
inline void Candle::_internal_set_avg(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  avg_ = value;
}
inline void Candle::set_avg(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_avg(value);
  // @@protoc_insertion_point(field_set:tradingpb.Candle.avg)
}

// int64 preClose = 19;
inline void Candle::clear_preclose() {
  preclose_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Candle::_internal_preclose() const {
  return preclose_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Candle::preclose() const {
  // @@protoc_insertion_point(field_get:tradingpb.Candle.preClose)
  return _internal_preclose();
}
inline void Candle::_internal_set_preclose(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  preclose_ = value;
}
inline void Candle::set_preclose(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_preclose(value);
  // @@protoc_insertion_point(field_set:tradingpb.Candle.preClose)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Candles

// string market = 1;
inline void Candles::clear_market() {
  market_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Candles::market() const {
  // @@protoc_insertion_point(field_get:tradingpb.Candles.market)
  return _internal_market();
}
inline void Candles::set_market(const std::string& value) {
  _internal_set_market(value);
  // @@protoc_insertion_point(field_set:tradingpb.Candles.market)
}
inline std::string* Candles::mutable_market() {
  // @@protoc_insertion_point(field_mutable:tradingpb.Candles.market)
  return _internal_mutable_market();
}
inline const std::string& Candles::_internal_market() const {
  return market_.GetNoArena();
}
inline void Candles::_internal_set_market(const std::string& value) {
  
  market_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Candles::set_market(std::string&& value) {
  
  market_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tradingpb.Candles.market)
}
inline void Candles::set_market(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  market_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tradingpb.Candles.market)
}
inline void Candles::set_market(const char* value, size_t size) {
  
  market_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tradingpb.Candles.market)
}
inline std::string* Candles::_internal_mutable_market() {
  
  return market_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Candles::release_market() {
  // @@protoc_insertion_point(field_release:tradingpb.Candles.market)
  
  return market_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Candles::set_allocated_market(std::string* market) {
  if (market != nullptr) {
    
  } else {
    
  }
  market_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), market);
  // @@protoc_insertion_point(field_set_allocated:tradingpb.Candles.market)
}

// string symbol = 2;
inline void Candles::clear_symbol() {
  symbol_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Candles::symbol() const {
  // @@protoc_insertion_point(field_get:tradingpb.Candles.symbol)
  return _internal_symbol();
}
inline void Candles::set_symbol(const std::string& value) {
  _internal_set_symbol(value);
  // @@protoc_insertion_point(field_set:tradingpb.Candles.symbol)
}
inline std::string* Candles::mutable_symbol() {
  // @@protoc_insertion_point(field_mutable:tradingpb.Candles.symbol)
  return _internal_mutable_symbol();
}
inline const std::string& Candles::_internal_symbol() const {
  return symbol_.GetNoArena();
}
inline void Candles::_internal_set_symbol(const std::string& value) {
  
  symbol_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Candles::set_symbol(std::string&& value) {
  
  symbol_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tradingpb.Candles.symbol)
}
inline void Candles::set_symbol(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  symbol_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tradingpb.Candles.symbol)
}
inline void Candles::set_symbol(const char* value, size_t size) {
  
  symbol_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tradingpb.Candles.symbol)
}
inline std::string* Candles::_internal_mutable_symbol() {
  
  return symbol_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Candles::release_symbol() {
  // @@protoc_insertion_point(field_release:tradingpb.Candles.symbol)
  
  return symbol_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Candles::set_allocated_symbol(std::string* symbol) {
  if (symbol != nullptr) {
    
  } else {
    
  }
  symbol_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), symbol);
  // @@protoc_insertion_point(field_set_allocated:tradingpb.Candles.symbol)
}

// string tag = 3;
inline void Candles::clear_tag() {
  tag_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Candles::tag() const {
  // @@protoc_insertion_point(field_get:tradingpb.Candles.tag)
  return _internal_tag();
}
inline void Candles::set_tag(const std::string& value) {
  _internal_set_tag(value);
  // @@protoc_insertion_point(field_set:tradingpb.Candles.tag)
}
inline std::string* Candles::mutable_tag() {
  // @@protoc_insertion_point(field_mutable:tradingpb.Candles.tag)
  return _internal_mutable_tag();
}
inline const std::string& Candles::_internal_tag() const {
  return tag_.GetNoArena();
}
inline void Candles::_internal_set_tag(const std::string& value) {
  
  tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Candles::set_tag(std::string&& value) {
  
  tag_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tradingpb.Candles.tag)
}
inline void Candles::set_tag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tradingpb.Candles.tag)
}
inline void Candles::set_tag(const char* value, size_t size) {
  
  tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tradingpb.Candles.tag)
}
inline std::string* Candles::_internal_mutable_tag() {
  
  return tag_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Candles::release_tag() {
  // @@protoc_insertion_point(field_release:tradingpb.Candles.tag)
  
  return tag_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Candles::set_allocated_tag(std::string* tag) {
  if (tag != nullptr) {
    
  } else {
    
  }
  tag_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tag);
  // @@protoc_insertion_point(field_set_allocated:tradingpb.Candles.tag)
}

// repeated .tradingpb.Candle candles = 4;
inline int Candles::_internal_candles_size() const {
  return candles_.size();
}
inline int Candles::candles_size() const {
  return _internal_candles_size();
}
inline void Candles::clear_candles() {
  candles_.Clear();
}
inline ::tradingpb::Candle* Candles::mutable_candles(int index) {
  // @@protoc_insertion_point(field_mutable:tradingpb.Candles.candles)
  return candles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tradingpb::Candle >*
Candles::mutable_candles() {
  // @@protoc_insertion_point(field_mutable_list:tradingpb.Candles.candles)
  return &candles_;
}
inline const ::tradingpb::Candle& Candles::_internal_candles(int index) const {
  return candles_.Get(index);
}
inline const ::tradingpb::Candle& Candles::candles(int index) const {
  // @@protoc_insertion_point(field_get:tradingpb.Candles.candles)
  return _internal_candles(index);
}
inline ::tradingpb::Candle* Candles::_internal_add_candles() {
  return candles_.Add();
}
inline ::tradingpb::Candle* Candles::add_candles() {
  // @@protoc_insertion_point(field_add:tradingpb.Candles.candles)
  return _internal_add_candles();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tradingpb::Candle >&
Candles::candles() const {
  // @@protoc_insertion_point(field_list:tradingpb.Candles.candles)
  return candles_;
}

// map<int64, .tradingpb.Candle> mapCandles = 5;
inline int Candles::_internal_mapcandles_size() const {
  return mapcandles_.size();
}
inline int Candles::mapcandles_size() const {
  return _internal_mapcandles_size();
}
inline void Candles::clear_mapcandles() {
  mapcandles_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::tradingpb::Candle >&
Candles::_internal_mapcandles() const {
  return mapcandles_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::tradingpb::Candle >&
Candles::mapcandles() const {
  // @@protoc_insertion_point(field_map:tradingpb.Candles.mapCandles)
  return _internal_mapcandles();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::tradingpb::Candle >*
Candles::_internal_mutable_mapcandles() {
  return mapcandles_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::tradingpb::Candle >*
Candles::mutable_mapcandles() {
  // @@protoc_insertion_point(field_mutable_map:tradingpb.Candles.mapCandles)
  return _internal_mutable_mapcandles();
}

// -------------------------------------------------------------------

// FundSize

// float size = 1;
inline void FundSize::clear_size() {
  size_ = 0;
}
inline float FundSize::_internal_size() const {
  return size_;
}
inline float FundSize::size() const {
  // @@protoc_insertion_point(field_get:tradingpb.FundSize.size)
  return _internal_size();
}
inline void FundSize::_internal_set_size(float value) {
  
  size_ = value;
}
inline void FundSize::set_size(float value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:tradingpb.FundSize.size)
}

// int64 time = 2;
inline void FundSize::clear_time() {
  time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FundSize::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FundSize::time() const {
  // @@protoc_insertion_point(field_get:tradingpb.FundSize.time)
  return _internal_time();
}
inline void FundSize::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  time_ = value;
}
inline void FundSize::set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:tradingpb.FundSize.time)
}

// -------------------------------------------------------------------

// FundManager

// string name = 1;
inline void FundManager::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FundManager::name() const {
  // @@protoc_insertion_point(field_get:tradingpb.FundManager.name)
  return _internal_name();
}
inline void FundManager::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:tradingpb.FundManager.name)
}
inline std::string* FundManager::mutable_name() {
  // @@protoc_insertion_point(field_mutable:tradingpb.FundManager.name)
  return _internal_mutable_name();
}
inline const std::string& FundManager::_internal_name() const {
  return name_.GetNoArena();
}
inline void FundManager::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FundManager::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tradingpb.FundManager.name)
}
inline void FundManager::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tradingpb.FundManager.name)
}
inline void FundManager::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tradingpb.FundManager.name)
}
inline std::string* FundManager::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FundManager::release_name() {
  // @@protoc_insertion_point(field_release:tradingpb.FundManager.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FundManager::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:tradingpb.FundManager.name)
}

// int64 startTime = 2;
inline void FundManager::clear_starttime() {
  starttime_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FundManager::_internal_starttime() const {
  return starttime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FundManager::starttime() const {
  // @@protoc_insertion_point(field_get:tradingpb.FundManager.startTime)
  return _internal_starttime();
}
inline void FundManager::_internal_set_starttime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  starttime_ = value;
}
inline void FundManager::set_starttime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_starttime(value);
  // @@protoc_insertion_point(field_set:tradingpb.FundManager.startTime)
}

// int64 endTime = 3;
inline void FundManager::clear_endtime() {
  endtime_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FundManager::_internal_endtime() const {
  return endtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FundManager::endtime() const {
  // @@protoc_insertion_point(field_get:tradingpb.FundManager.endTime)
  return _internal_endtime();
}
inline void FundManager::_internal_set_endtime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  endtime_ = value;
}
inline void FundManager::set_endtime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_endtime(value);
  // @@protoc_insertion_point(field_set:tradingpb.FundManager.endTime)
}

// int64 birthYear = 4;
inline void FundManager::clear_birthyear() {
  birthyear_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FundManager::_internal_birthyear() const {
  return birthyear_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FundManager::birthyear() const {
  // @@protoc_insertion_point(field_get:tradingpb.FundManager.birthYear)
  return _internal_birthyear();
}
inline void FundManager::_internal_set_birthyear(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  birthyear_ = value;
}
inline void FundManager::set_birthyear(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_birthyear(value);
  // @@protoc_insertion_point(field_set:tradingpb.FundManager.birthYear)
}

// bool sex = 5;
inline void FundManager::clear_sex() {
  sex_ = false;
}
inline bool FundManager::_internal_sex() const {
  return sex_;
}
inline bool FundManager::sex() const {
  // @@protoc_insertion_point(field_get:tradingpb.FundManager.sex)
  return _internal_sex();
}
inline void FundManager::_internal_set_sex(bool value) {
  
  sex_ = value;
}
inline void FundManager::set_sex(bool value) {
  _internal_set_sex(value);
  // @@protoc_insertion_point(field_set:tradingpb.FundManager.sex)
}

// string education = 6;
inline void FundManager::clear_education() {
  education_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FundManager::education() const {
  // @@protoc_insertion_point(field_get:tradingpb.FundManager.education)
  return _internal_education();
}
inline void FundManager::set_education(const std::string& value) {
  _internal_set_education(value);
  // @@protoc_insertion_point(field_set:tradingpb.FundManager.education)
}
inline std::string* FundManager::mutable_education() {
  // @@protoc_insertion_point(field_mutable:tradingpb.FundManager.education)
  return _internal_mutable_education();
}
inline const std::string& FundManager::_internal_education() const {
  return education_.GetNoArena();
}
inline void FundManager::_internal_set_education(const std::string& value) {
  
  education_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FundManager::set_education(std::string&& value) {
  
  education_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tradingpb.FundManager.education)
}
inline void FundManager::set_education(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  education_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tradingpb.FundManager.education)
}
inline void FundManager::set_education(const char* value, size_t size) {
  
  education_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tradingpb.FundManager.education)
}
inline std::string* FundManager::_internal_mutable_education() {
  
  return education_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FundManager::release_education() {
  // @@protoc_insertion_point(field_release:tradingpb.FundManager.education)
  
  return education_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FundManager::set_allocated_education(std::string* education) {
  if (education != nullptr) {
    
  } else {
    
  }
  education_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), education);
  // @@protoc_insertion_point(field_set_allocated:tradingpb.FundManager.education)
}

// string country = 7;
inline void FundManager::clear_country() {
  country_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FundManager::country() const {
  // @@protoc_insertion_point(field_get:tradingpb.FundManager.country)
  return _internal_country();
}
inline void FundManager::set_country(const std::string& value) {
  _internal_set_country(value);
  // @@protoc_insertion_point(field_set:tradingpb.FundManager.country)
}
inline std::string* FundManager::mutable_country() {
  // @@protoc_insertion_point(field_mutable:tradingpb.FundManager.country)
  return _internal_mutable_country();
}
inline const std::string& FundManager::_internal_country() const {
  return country_.GetNoArena();
}
inline void FundManager::_internal_set_country(const std::string& value) {
  
  country_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FundManager::set_country(std::string&& value) {
  
  country_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tradingpb.FundManager.country)
}
inline void FundManager::set_country(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  country_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tradingpb.FundManager.country)
}
inline void FundManager::set_country(const char* value, size_t size) {
  
  country_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tradingpb.FundManager.country)
}
inline std::string* FundManager::_internal_mutable_country() {
  
  return country_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FundManager::release_country() {
  // @@protoc_insertion_point(field_release:tradingpb.FundManager.country)
  
  return country_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FundManager::set_allocated_country(std::string* country) {
  if (country != nullptr) {
    
  } else {
    
  }
  country_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), country);
  // @@protoc_insertion_point(field_set_allocated:tradingpb.FundManager.country)
}

// string resume = 8;
inline void FundManager::clear_resume() {
  resume_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FundManager::resume() const {
  // @@protoc_insertion_point(field_get:tradingpb.FundManager.resume)
  return _internal_resume();
}
inline void FundManager::set_resume(const std::string& value) {
  _internal_set_resume(value);
  // @@protoc_insertion_point(field_set:tradingpb.FundManager.resume)
}
inline std::string* FundManager::mutable_resume() {
  // @@protoc_insertion_point(field_mutable:tradingpb.FundManager.resume)
  return _internal_mutable_resume();
}
inline const std::string& FundManager::_internal_resume() const {
  return resume_.GetNoArena();
}
inline void FundManager::_internal_set_resume(const std::string& value) {
  
  resume_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FundManager::set_resume(std::string&& value) {
  
  resume_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tradingpb.FundManager.resume)
}
inline void FundManager::set_resume(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  resume_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tradingpb.FundManager.resume)
}
inline void FundManager::set_resume(const char* value, size_t size) {
  
  resume_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tradingpb.FundManager.resume)
}
inline std::string* FundManager::_internal_mutable_resume() {
  
  return resume_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FundManager::release_resume() {
  // @@protoc_insertion_point(field_release:tradingpb.FundManager.resume)
  
  return resume_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FundManager::set_allocated_resume(std::string* resume) {
  if (resume != nullptr) {
    
  } else {
    
  }
  resume_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), resume);
  // @@protoc_insertion_point(field_set_allocated:tradingpb.FundManager.resume)
}

// repeated .tradingpb.FundResult results = 9;
inline int FundManager::_internal_results_size() const {
  return results_.size();
}
inline int FundManager::results_size() const {
  return _internal_results_size();
}
inline void FundManager::clear_results() {
  results_.Clear();
}
inline ::tradingpb::FundResult* FundManager::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:tradingpb.FundManager.results)
  return results_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tradingpb::FundResult >*
FundManager::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:tradingpb.FundManager.results)
  return &results_;
}
inline const ::tradingpb::FundResult& FundManager::_internal_results(int index) const {
  return results_.Get(index);
}
inline const ::tradingpb::FundResult& FundManager::results(int index) const {
  // @@protoc_insertion_point(field_get:tradingpb.FundManager.results)
  return _internal_results(index);
}
inline ::tradingpb::FundResult* FundManager::_internal_add_results() {
  return results_.Add();
}
inline ::tradingpb::FundResult* FundManager::add_results() {
  // @@protoc_insertion_point(field_add:tradingpb.FundManager.results)
  return _internal_add_results();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tradingpb::FundResult >&
FundManager::results() const {
  // @@protoc_insertion_point(field_list:tradingpb.FundManager.results)
  return results_;
}

// -------------------------------------------------------------------

// FundResult

// float maxDrawdown = 1;
inline void FundResult::clear_maxdrawdown() {
  maxdrawdown_ = 0;
}
inline float FundResult::_internal_maxdrawdown() const {
  return maxdrawdown_;
}
inline float FundResult::maxdrawdown() const {
  // @@protoc_insertion_point(field_get:tradingpb.FundResult.maxDrawdown)
  return _internal_maxdrawdown();
}
inline void FundResult::_internal_set_maxdrawdown(float value) {
  
  maxdrawdown_ = value;
}
inline void FundResult::set_maxdrawdown(float value) {
  _internal_set_maxdrawdown(value);
  // @@protoc_insertion_point(field_set:tradingpb.FundResult.maxDrawdown)
}

// float sharpe = 2;
inline void FundResult::clear_sharpe() {
  sharpe_ = 0;
}
inline float FundResult::_internal_sharpe() const {
  return sharpe_;
}
inline float FundResult::sharpe() const {
  // @@protoc_insertion_point(field_get:tradingpb.FundResult.sharpe)
  return _internal_sharpe();
}
inline void FundResult::_internal_set_sharpe(float value) {
  
  sharpe_ = value;
}
inline void FundResult::set_sharpe(float value) {
  _internal_set_sharpe(value);
  // @@protoc_insertion_point(field_set:tradingpb.FundResult.sharpe)
}

// float annualizedReturns = 3;
inline void FundResult::clear_annualizedreturns() {
  annualizedreturns_ = 0;
}
inline float FundResult::_internal_annualizedreturns() const {
  return annualizedreturns_;
}
inline float FundResult::annualizedreturns() const {
  // @@protoc_insertion_point(field_get:tradingpb.FundResult.annualizedReturns)
  return _internal_annualizedreturns();
}
inline void FundResult::_internal_set_annualizedreturns(float value) {
  
  annualizedreturns_ = value;
}
inline void FundResult::set_annualizedreturns(float value) {
  _internal_set_annualizedreturns(value);
  // @@protoc_insertion_point(field_set:tradingpb.FundResult.annualizedReturns)
}

// float annualizedVolatility = 4;
inline void FundResult::clear_annualizedvolatility() {
  annualizedvolatility_ = 0;
}
inline float FundResult::_internal_annualizedvolatility() const {
  return annualizedvolatility_;
}
inline float FundResult::annualizedvolatility() const {
  // @@protoc_insertion_point(field_get:tradingpb.FundResult.annualizedVolatility)
  return _internal_annualizedvolatility();
}
inline void FundResult::_internal_set_annualizedvolatility(float value) {
  
  annualizedvolatility_ = value;
}
inline void FundResult::set_annualizedvolatility(float value) {
  _internal_set_annualizedvolatility(value);
  // @@protoc_insertion_point(field_set:tradingpb.FundResult.annualizedVolatility)
}

// float totalReturns = 5;
inline void FundResult::clear_totalreturns() {
  totalreturns_ = 0;
}
inline float FundResult::_internal_totalreturns() const {
  return totalreturns_;
}
inline float FundResult::totalreturns() const {
  // @@protoc_insertion_point(field_get:tradingpb.FundResult.totalReturns)
  return _internal_totalreturns();
}
inline void FundResult::_internal_set_totalreturns(float value) {
  
  totalreturns_ = value;
}
inline void FundResult::set_totalreturns(float value) {
  _internal_set_totalreturns(value);
  // @@protoc_insertion_point(field_set:tradingpb.FundResult.totalReturns)
}

// int64 startTime = 6;
inline void FundResult::clear_starttime() {
  starttime_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FundResult::_internal_starttime() const {
  return starttime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FundResult::starttime() const {
  // @@protoc_insertion_point(field_get:tradingpb.FundResult.startTime)
  return _internal_starttime();
}
inline void FundResult::_internal_set_starttime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  starttime_ = value;
}
inline void FundResult::set_starttime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_starttime(value);
  // @@protoc_insertion_point(field_set:tradingpb.FundResult.startTime)
}

// int64 endTime = 7;
inline void FundResult::clear_endtime() {
  endtime_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FundResult::_internal_endtime() const {
  return endtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FundResult::endtime() const {
  // @@protoc_insertion_point(field_get:tradingpb.FundResult.endTime)
  return _internal_endtime();
}
inline void FundResult::_internal_set_endtime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  endtime_ = value;
}
inline void FundResult::set_endtime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_endtime(value);
  // @@protoc_insertion_point(field_set:tradingpb.FundResult.endTime)
}

// string name = 8;
inline void FundResult::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FundResult::name() const {
  // @@protoc_insertion_point(field_get:tradingpb.FundResult.name)
  return _internal_name();
}
inline void FundResult::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:tradingpb.FundResult.name)
}
inline std::string* FundResult::mutable_name() {
  // @@protoc_insertion_point(field_mutable:tradingpb.FundResult.name)
  return _internal_mutable_name();
}
inline const std::string& FundResult::_internal_name() const {
  return name_.GetNoArena();
}
inline void FundResult::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FundResult::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tradingpb.FundResult.name)
}
inline void FundResult::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tradingpb.FundResult.name)
}
inline void FundResult::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tradingpb.FundResult.name)
}
inline std::string* FundResult::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FundResult::release_name() {
  // @@protoc_insertion_point(field_release:tradingpb.FundResult.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FundResult::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:tradingpb.FundResult.name)
}

// -------------------------------------------------------------------

// Fund

// string code = 1;
inline void Fund::clear_code() {
  code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Fund::code() const {
  // @@protoc_insertion_point(field_get:tradingpb.Fund.code)
  return _internal_code();
}
inline void Fund::set_code(const std::string& value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:tradingpb.Fund.code)
}
inline std::string* Fund::mutable_code() {
  // @@protoc_insertion_point(field_mutable:tradingpb.Fund.code)
  return _internal_mutable_code();
}
inline const std::string& Fund::_internal_code() const {
  return code_.GetNoArena();
}
inline void Fund::_internal_set_code(const std::string& value) {
  
  code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Fund::set_code(std::string&& value) {
  
  code_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tradingpb.Fund.code)
}
inline void Fund::set_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tradingpb.Fund.code)
}
inline void Fund::set_code(const char* value, size_t size) {
  
  code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tradingpb.Fund.code)
}
inline std::string* Fund::_internal_mutable_code() {
  
  return code_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Fund::release_code() {
  // @@protoc_insertion_point(field_release:tradingpb.Fund.code)
  
  return code_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Fund::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  code_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:tradingpb.Fund.code)
}

// string name = 2;
inline void Fund::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Fund::name() const {
  // @@protoc_insertion_point(field_get:tradingpb.Fund.name)
  return _internal_name();
}
inline void Fund::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:tradingpb.Fund.name)
}
inline std::string* Fund::mutable_name() {
  // @@protoc_insertion_point(field_mutable:tradingpb.Fund.name)
  return _internal_mutable_name();
}
inline const std::string& Fund::_internal_name() const {
  return name_.GetNoArena();
}
inline void Fund::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Fund::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tradingpb.Fund.name)
}
inline void Fund::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tradingpb.Fund.name)
}
inline void Fund::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tradingpb.Fund.name)
}
inline std::string* Fund::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Fund::release_name() {
  // @@protoc_insertion_point(field_release:tradingpb.Fund.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Fund::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:tradingpb.Fund.name)
}

// repeated string tags = 3;
inline int Fund::_internal_tags_size() const {
  return tags_.size();
}
inline int Fund::tags_size() const {
  return _internal_tags_size();
}
inline void Fund::clear_tags() {
  tags_.Clear();
}
inline std::string* Fund::add_tags() {
  // @@protoc_insertion_point(field_add_mutable:tradingpb.Fund.tags)
  return _internal_add_tags();
}
inline const std::string& Fund::_internal_tags(int index) const {
  return tags_.Get(index);
}
inline const std::string& Fund::tags(int index) const {
  // @@protoc_insertion_point(field_get:tradingpb.Fund.tags)
  return _internal_tags(index);
}
inline std::string* Fund::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:tradingpb.Fund.tags)
  return tags_.Mutable(index);
}
inline void Fund::set_tags(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:tradingpb.Fund.tags)
  tags_.Mutable(index)->assign(value);
}
inline void Fund::set_tags(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:tradingpb.Fund.tags)
  tags_.Mutable(index)->assign(std::move(value));
}
inline void Fund::set_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tradingpb.Fund.tags)
}
inline void Fund::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tradingpb.Fund.tags)
}
inline std::string* Fund::_internal_add_tags() {
  return tags_.Add();
}
inline void Fund::add_tags(const std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tradingpb.Fund.tags)
}
inline void Fund::add_tags(std::string&& value) {
  tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:tradingpb.Fund.tags)
}
inline void Fund::add_tags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tradingpb.Fund.tags)
}
inline void Fund::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tradingpb.Fund.tags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Fund::tags() const {
  // @@protoc_insertion_point(field_list:tradingpb.Fund.tags)
  return tags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Fund::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:tradingpb.Fund.tags)
  return &tags_;
}

// int64 createTime = 4;
inline void Fund::clear_createtime() {
  createtime_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Fund::_internal_createtime() const {
  return createtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Fund::createtime() const {
  // @@protoc_insertion_point(field_get:tradingpb.Fund.createTime)
  return _internal_createtime();
}
inline void Fund::_internal_set_createtime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  createtime_ = value;
}
inline void Fund::set_createtime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_createtime(value);
  // @@protoc_insertion_point(field_set:tradingpb.Fund.createTime)
}

// repeated .tradingpb.FundSize size = 5;
inline int Fund::_internal_size_size() const {
  return size_.size();
}
inline int Fund::size_size() const {
  return _internal_size_size();
}
inline void Fund::clear_size() {
  size_.Clear();
}
inline ::tradingpb::FundSize* Fund::mutable_size(int index) {
  // @@protoc_insertion_point(field_mutable:tradingpb.Fund.size)
  return size_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tradingpb::FundSize >*
Fund::mutable_size() {
  // @@protoc_insertion_point(field_mutable_list:tradingpb.Fund.size)
  return &size_;
}
inline const ::tradingpb::FundSize& Fund::_internal_size(int index) const {
  return size_.Get(index);
}
inline const ::tradingpb::FundSize& Fund::size(int index) const {
  // @@protoc_insertion_point(field_get:tradingpb.Fund.size)
  return _internal_size(index);
}
inline ::tradingpb::FundSize* Fund::_internal_add_size() {
  return size_.Add();
}
inline ::tradingpb::FundSize* Fund::add_size() {
  // @@protoc_insertion_point(field_add:tradingpb.Fund.size)
  return _internal_add_size();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tradingpb::FundSize >&
Fund::size() const {
  // @@protoc_insertion_point(field_list:tradingpb.Fund.size)
  return size_;
}

// string company = 6;
inline void Fund::clear_company() {
  company_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Fund::company() const {
  // @@protoc_insertion_point(field_get:tradingpb.Fund.company)
  return _internal_company();
}
inline void Fund::set_company(const std::string& value) {
  _internal_set_company(value);
  // @@protoc_insertion_point(field_set:tradingpb.Fund.company)
}
inline std::string* Fund::mutable_company() {
  // @@protoc_insertion_point(field_mutable:tradingpb.Fund.company)
  return _internal_mutable_company();
}
inline const std::string& Fund::_internal_company() const {
  return company_.GetNoArena();
}
inline void Fund::_internal_set_company(const std::string& value) {
  
  company_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Fund::set_company(std::string&& value) {
  
  company_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tradingpb.Fund.company)
}
inline void Fund::set_company(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  company_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tradingpb.Fund.company)
}
inline void Fund::set_company(const char* value, size_t size) {
  
  company_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tradingpb.Fund.company)
}
inline std::string* Fund::_internal_mutable_company() {
  
  return company_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Fund::release_company() {
  // @@protoc_insertion_point(field_release:tradingpb.Fund.company)
  
  return company_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Fund::set_allocated_company(std::string* company) {
  if (company != nullptr) {
    
  } else {
    
  }
  company_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), company);
  // @@protoc_insertion_point(field_set_allocated:tradingpb.Fund.company)
}

// repeated .tradingpb.FundManager managers = 7;
inline int Fund::_internal_managers_size() const {
  return managers_.size();
}
inline int Fund::managers_size() const {
  return _internal_managers_size();
}
inline void Fund::clear_managers() {
  managers_.Clear();
}
inline ::tradingpb::FundManager* Fund::mutable_managers(int index) {
  // @@protoc_insertion_point(field_mutable:tradingpb.Fund.managers)
  return managers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tradingpb::FundManager >*
Fund::mutable_managers() {
  // @@protoc_insertion_point(field_mutable_list:tradingpb.Fund.managers)
  return &managers_;
}
inline const ::tradingpb::FundManager& Fund::_internal_managers(int index) const {
  return managers_.Get(index);
}
inline const ::tradingpb::FundManager& Fund::managers(int index) const {
  // @@protoc_insertion_point(field_get:tradingpb.Fund.managers)
  return _internal_managers(index);
}
inline ::tradingpb::FundManager* Fund::_internal_add_managers() {
  return managers_.Add();
}
inline ::tradingpb::FundManager* Fund::add_managers() {
  // @@protoc_insertion_point(field_add:tradingpb.Fund.managers)
  return _internal_add_managers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tradingpb::FundManager >&
Fund::managers() const {
  // @@protoc_insertion_point(field_list:tradingpb.Fund.managers)
  return managers_;
}

// repeated .tradingpb.FundResult results = 8;
inline int Fund::_internal_results_size() const {
  return results_.size();
}
inline int Fund::results_size() const {
  return _internal_results_size();
}
inline void Fund::clear_results() {
  results_.Clear();
}
inline ::tradingpb::FundResult* Fund::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:tradingpb.Fund.results)
  return results_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tradingpb::FundResult >*
Fund::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:tradingpb.Fund.results)
  return &results_;
}
inline const ::tradingpb::FundResult& Fund::_internal_results(int index) const {
  return results_.Get(index);
}
inline const ::tradingpb::FundResult& Fund::results(int index) const {
  // @@protoc_insertion_point(field_get:tradingpb.Fund.results)
  return _internal_results(index);
}
inline ::tradingpb::FundResult* Fund::_internal_add_results() {
  return results_.Add();
}
inline ::tradingpb::FundResult* Fund::add_results() {
  // @@protoc_insertion_point(field_add:tradingpb.Fund.results)
  return _internal_add_results();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tradingpb::FundResult >&
Fund::results() const {
  // @@protoc_insertion_point(field_list:tradingpb.Fund.results)
  return results_;
}

// -------------------------------------------------------------------

// SymbolInfo

// string market = 1;
inline void SymbolInfo::clear_market() {
  market_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SymbolInfo::market() const {
  // @@protoc_insertion_point(field_get:tradingpb.SymbolInfo.market)
  return _internal_market();
}
inline void SymbolInfo::set_market(const std::string& value) {
  _internal_set_market(value);
  // @@protoc_insertion_point(field_set:tradingpb.SymbolInfo.market)
}
inline std::string* SymbolInfo::mutable_market() {
  // @@protoc_insertion_point(field_mutable:tradingpb.SymbolInfo.market)
  return _internal_mutable_market();
}
inline const std::string& SymbolInfo::_internal_market() const {
  return market_.GetNoArena();
}
inline void SymbolInfo::_internal_set_market(const std::string& value) {
  
  market_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SymbolInfo::set_market(std::string&& value) {
  
  market_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tradingpb.SymbolInfo.market)
}
inline void SymbolInfo::set_market(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  market_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tradingpb.SymbolInfo.market)
}
inline void SymbolInfo::set_market(const char* value, size_t size) {
  
  market_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tradingpb.SymbolInfo.market)
}
inline std::string* SymbolInfo::_internal_mutable_market() {
  
  return market_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SymbolInfo::release_market() {
  // @@protoc_insertion_point(field_release:tradingpb.SymbolInfo.market)
  
  return market_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SymbolInfo::set_allocated_market(std::string* market) {
  if (market != nullptr) {
    
  } else {
    
  }
  market_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), market);
  // @@protoc_insertion_point(field_set_allocated:tradingpb.SymbolInfo.market)
}

// string symbol = 2;
inline void SymbolInfo::clear_symbol() {
  symbol_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SymbolInfo::symbol() const {
  // @@protoc_insertion_point(field_get:tradingpb.SymbolInfo.symbol)
  return _internal_symbol();
}
inline void SymbolInfo::set_symbol(const std::string& value) {
  _internal_set_symbol(value);
  // @@protoc_insertion_point(field_set:tradingpb.SymbolInfo.symbol)
}
inline std::string* SymbolInfo::mutable_symbol() {
  // @@protoc_insertion_point(field_mutable:tradingpb.SymbolInfo.symbol)
  return _internal_mutable_symbol();
}
inline const std::string& SymbolInfo::_internal_symbol() const {
  return symbol_.GetNoArena();
}
inline void SymbolInfo::_internal_set_symbol(const std::string& value) {
  
  symbol_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SymbolInfo::set_symbol(std::string&& value) {
  
  symbol_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tradingpb.SymbolInfo.symbol)
}
inline void SymbolInfo::set_symbol(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  symbol_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tradingpb.SymbolInfo.symbol)
}
inline void SymbolInfo::set_symbol(const char* value, size_t size) {
  
  symbol_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tradingpb.SymbolInfo.symbol)
}
inline std::string* SymbolInfo::_internal_mutable_symbol() {
  
  return symbol_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SymbolInfo::release_symbol() {
  // @@protoc_insertion_point(field_release:tradingpb.SymbolInfo.symbol)
  
  return symbol_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SymbolInfo::set_allocated_symbol(std::string* symbol) {
  if (symbol != nullptr) {
    
  } else {
    
  }
  symbol_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), symbol);
  // @@protoc_insertion_point(field_set_allocated:tradingpb.SymbolInfo.symbol)
}

// .tradingpb.Fund fund = 3;
inline bool SymbolInfo::_internal_has_fund() const {
  return this != internal_default_instance() && fund_ != nullptr;
}
inline bool SymbolInfo::has_fund() const {
  return _internal_has_fund();
}
inline void SymbolInfo::clear_fund() {
  if (GetArenaNoVirtual() == nullptr && fund_ != nullptr) {
    delete fund_;
  }
  fund_ = nullptr;
}
inline const ::tradingpb::Fund& SymbolInfo::_internal_fund() const {
  const ::tradingpb::Fund* p = fund_;
  return p != nullptr ? *p : *reinterpret_cast<const ::tradingpb::Fund*>(
      &::tradingpb::_Fund_default_instance_);
}
inline const ::tradingpb::Fund& SymbolInfo::fund() const {
  // @@protoc_insertion_point(field_get:tradingpb.SymbolInfo.fund)
  return _internal_fund();
}
inline ::tradingpb::Fund* SymbolInfo::release_fund() {
  // @@protoc_insertion_point(field_release:tradingpb.SymbolInfo.fund)
  
  ::tradingpb::Fund* temp = fund_;
  fund_ = nullptr;
  return temp;
}
inline ::tradingpb::Fund* SymbolInfo::_internal_mutable_fund() {
  
  if (fund_ == nullptr) {
    auto* p = CreateMaybeMessage<::tradingpb::Fund>(GetArenaNoVirtual());
    fund_ = p;
  }
  return fund_;
}
inline ::tradingpb::Fund* SymbolInfo::mutable_fund() {
  // @@protoc_insertion_point(field_mutable:tradingpb.SymbolInfo.fund)
  return _internal_mutable_fund();
}
inline void SymbolInfo::set_allocated_fund(::tradingpb::Fund* fund) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete fund_;
  }
  if (fund) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      fund = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fund, submessage_arena);
    }
    
  } else {
    
  }
  fund_ = fund;
  // @@protoc_insertion_point(field_set_allocated:tradingpb.SymbolInfo.fund)
}

// string name = 4;
inline void SymbolInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SymbolInfo::name() const {
  // @@protoc_insertion_point(field_get:tradingpb.SymbolInfo.name)
  return _internal_name();
}
inline void SymbolInfo::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:tradingpb.SymbolInfo.name)
}
inline std::string* SymbolInfo::mutable_name() {
  // @@protoc_insertion_point(field_mutable:tradingpb.SymbolInfo.name)
  return _internal_mutable_name();
}
inline const std::string& SymbolInfo::_internal_name() const {
  return name_.GetNoArena();
}
inline void SymbolInfo::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SymbolInfo::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tradingpb.SymbolInfo.name)
}
inline void SymbolInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tradingpb.SymbolInfo.name)
}
inline void SymbolInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tradingpb.SymbolInfo.name)
}
inline std::string* SymbolInfo::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SymbolInfo::release_name() {
  // @@protoc_insertion_point(field_release:tradingpb.SymbolInfo.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SymbolInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:tradingpb.SymbolInfo.name)
}

// string fullname = 5;
inline void SymbolInfo::clear_fullname() {
  fullname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SymbolInfo::fullname() const {
  // @@protoc_insertion_point(field_get:tradingpb.SymbolInfo.fullname)
  return _internal_fullname();
}
inline void SymbolInfo::set_fullname(const std::string& value) {
  _internal_set_fullname(value);
  // @@protoc_insertion_point(field_set:tradingpb.SymbolInfo.fullname)
}
inline std::string* SymbolInfo::mutable_fullname() {
  // @@protoc_insertion_point(field_mutable:tradingpb.SymbolInfo.fullname)
  return _internal_mutable_fullname();
}
inline const std::string& SymbolInfo::_internal_fullname() const {
  return fullname_.GetNoArena();
}
inline void SymbolInfo::_internal_set_fullname(const std::string& value) {
  
  fullname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SymbolInfo::set_fullname(std::string&& value) {
  
  fullname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tradingpb.SymbolInfo.fullname)
}
inline void SymbolInfo::set_fullname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fullname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tradingpb.SymbolInfo.fullname)
}
inline void SymbolInfo::set_fullname(const char* value, size_t size) {
  
  fullname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tradingpb.SymbolInfo.fullname)
}
inline std::string* SymbolInfo::_internal_mutable_fullname() {
  
  return fullname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SymbolInfo::release_fullname() {
  // @@protoc_insertion_point(field_release:tradingpb.SymbolInfo.fullname)
  
  return fullname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SymbolInfo::set_allocated_fullname(std::string* fullname) {
  if (fullname != nullptr) {
    
  } else {
    
  }
  fullname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fullname);
  // @@protoc_insertion_point(field_set_allocated:tradingpb.SymbolInfo.fullname)
}

// string type = 6;
inline void SymbolInfo::clear_type() {
  type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SymbolInfo::type() const {
  // @@protoc_insertion_point(field_get:tradingpb.SymbolInfo.type)
  return _internal_type();
}
inline void SymbolInfo::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:tradingpb.SymbolInfo.type)
}
inline std::string* SymbolInfo::mutable_type() {
  // @@protoc_insertion_point(field_mutable:tradingpb.SymbolInfo.type)
  return _internal_mutable_type();
}
inline const std::string& SymbolInfo::_internal_type() const {
  return type_.GetNoArena();
}
inline void SymbolInfo::_internal_set_type(const std::string& value) {
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SymbolInfo::set_type(std::string&& value) {
  
  type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tradingpb.SymbolInfo.type)
}
inline void SymbolInfo::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tradingpb.SymbolInfo.type)
}
inline void SymbolInfo::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tradingpb.SymbolInfo.type)
}
inline std::string* SymbolInfo::_internal_mutable_type() {
  
  return type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SymbolInfo::release_type() {
  // @@protoc_insertion_point(field_release:tradingpb.SymbolInfo.type)
  
  return type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SymbolInfo::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:tradingpb.SymbolInfo.type)
}

// -------------------------------------------------------------------

// RequestUpdCandles

// string token = 1 [deprecated = true];
inline void RequestUpdCandles::clear_token() {
  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RequestUpdCandles::token() const {
  // @@protoc_insertion_point(field_get:tradingpb.RequestUpdCandles.token)
  return _internal_token();
}
inline void RequestUpdCandles::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:tradingpb.RequestUpdCandles.token)
}
inline std::string* RequestUpdCandles::mutable_token() {
  // @@protoc_insertion_point(field_mutable:tradingpb.RequestUpdCandles.token)
  return _internal_mutable_token();
}
inline const std::string& RequestUpdCandles::_internal_token() const {
  return token_.GetNoArena();
}
inline void RequestUpdCandles::_internal_set_token(const std::string& value) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RequestUpdCandles::set_token(std::string&& value) {
  
  token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tradingpb.RequestUpdCandles.token)
}
inline void RequestUpdCandles::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tradingpb.RequestUpdCandles.token)
}
inline void RequestUpdCandles::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tradingpb.RequestUpdCandles.token)
}
inline std::string* RequestUpdCandles::_internal_mutable_token() {
  
  return token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RequestUpdCandles::release_token() {
  // @@protoc_insertion_point(field_release:tradingpb.RequestUpdCandles.token)
  
  return token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RequestUpdCandles::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:tradingpb.RequestUpdCandles.token)
}

// .tradingpb.Candles candles = 2;
inline bool RequestUpdCandles::_internal_has_candles() const {
  return this != internal_default_instance() && candles_ != nullptr;
}
inline bool RequestUpdCandles::has_candles() const {
  return _internal_has_candles();
}
inline void RequestUpdCandles::clear_candles() {
  if (GetArenaNoVirtual() == nullptr && candles_ != nullptr) {
    delete candles_;
  }
  candles_ = nullptr;
}
inline const ::tradingpb::Candles& RequestUpdCandles::_internal_candles() const {
  const ::tradingpb::Candles* p = candles_;
  return p != nullptr ? *p : *reinterpret_cast<const ::tradingpb::Candles*>(
      &::tradingpb::_Candles_default_instance_);
}
inline const ::tradingpb::Candles& RequestUpdCandles::candles() const {
  // @@protoc_insertion_point(field_get:tradingpb.RequestUpdCandles.candles)
  return _internal_candles();
}
inline ::tradingpb::Candles* RequestUpdCandles::release_candles() {
  // @@protoc_insertion_point(field_release:tradingpb.RequestUpdCandles.candles)
  
  ::tradingpb::Candles* temp = candles_;
  candles_ = nullptr;
  return temp;
}
inline ::tradingpb::Candles* RequestUpdCandles::_internal_mutable_candles() {
  
  if (candles_ == nullptr) {
    auto* p = CreateMaybeMessage<::tradingpb::Candles>(GetArenaNoVirtual());
    candles_ = p;
  }
  return candles_;
}
inline ::tradingpb::Candles* RequestUpdCandles::mutable_candles() {
  // @@protoc_insertion_point(field_mutable:tradingpb.RequestUpdCandles.candles)
  return _internal_mutable_candles();
}
inline void RequestUpdCandles::set_allocated_candles(::tradingpb::Candles* candles) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete candles_;
  }
  if (candles) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      candles = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, candles, submessage_arena);
    }
    
  } else {
    
  }
  candles_ = candles;
  // @@protoc_insertion_point(field_set_allocated:tradingpb.RequestUpdCandles.candles)
}

// .tradingpb.BasicRequestData basicRequest = 3;
inline bool RequestUpdCandles::_internal_has_basicrequest() const {
  return this != internal_default_instance() && basicrequest_ != nullptr;
}
inline bool RequestUpdCandles::has_basicrequest() const {
  return _internal_has_basicrequest();
}
inline const ::tradingpb::BasicRequestData& RequestUpdCandles::_internal_basicrequest() const {
  const ::tradingpb::BasicRequestData* p = basicrequest_;
  return p != nullptr ? *p : *reinterpret_cast<const ::tradingpb::BasicRequestData*>(
      &::tradingpb::_BasicRequestData_default_instance_);
}
inline const ::tradingpb::BasicRequestData& RequestUpdCandles::basicrequest() const {
  // @@protoc_insertion_point(field_get:tradingpb.RequestUpdCandles.basicRequest)
  return _internal_basicrequest();
}
inline ::tradingpb::BasicRequestData* RequestUpdCandles::release_basicrequest() {
  // @@protoc_insertion_point(field_release:tradingpb.RequestUpdCandles.basicRequest)
  
  ::tradingpb::BasicRequestData* temp = basicrequest_;
  basicrequest_ = nullptr;
  return temp;
}
inline ::tradingpb::BasicRequestData* RequestUpdCandles::_internal_mutable_basicrequest() {
  
  if (basicrequest_ == nullptr) {
    auto* p = CreateMaybeMessage<::tradingpb::BasicRequestData>(GetArenaNoVirtual());
    basicrequest_ = p;
  }
  return basicrequest_;
}
inline ::tradingpb::BasicRequestData* RequestUpdCandles::mutable_basicrequest() {
  // @@protoc_insertion_point(field_mutable:tradingpb.RequestUpdCandles.basicRequest)
  return _internal_mutable_basicrequest();
}
inline void RequestUpdCandles::set_allocated_basicrequest(::tradingpb::BasicRequestData* basicrequest) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(basicrequest_);
  }
  if (basicrequest) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      basicrequest = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, basicrequest, submessage_arena);
    }
    
  } else {
    
  }
  basicrequest_ = basicrequest;
  // @@protoc_insertion_point(field_set_allocated:tradingpb.RequestUpdCandles.basicRequest)
}

// -------------------------------------------------------------------

// ReplyUpdCandles

// int32 lengthOK = 1;
inline void ReplyUpdCandles::clear_lengthok() {
  lengthok_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReplyUpdCandles::_internal_lengthok() const {
  return lengthok_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReplyUpdCandles::lengthok() const {
  // @@protoc_insertion_point(field_get:tradingpb.ReplyUpdCandles.lengthOK)
  return _internal_lengthok();
}
inline void ReplyUpdCandles::_internal_set_lengthok(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  lengthok_ = value;
}
inline void ReplyUpdCandles::set_lengthok(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lengthok(value);
  // @@protoc_insertion_point(field_set:tradingpb.ReplyUpdCandles.lengthOK)
}

// -------------------------------------------------------------------

// RequestGetCandles

// string token = 1 [deprecated = true];
inline void RequestGetCandles::clear_token() {
  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RequestGetCandles::token() const {
  // @@protoc_insertion_point(field_get:tradingpb.RequestGetCandles.token)
  return _internal_token();
}
inline void RequestGetCandles::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:tradingpb.RequestGetCandles.token)
}
inline std::string* RequestGetCandles::mutable_token() {
  // @@protoc_insertion_point(field_mutable:tradingpb.RequestGetCandles.token)
  return _internal_mutable_token();
}
inline const std::string& RequestGetCandles::_internal_token() const {
  return token_.GetNoArena();
}
inline void RequestGetCandles::_internal_set_token(const std::string& value) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RequestGetCandles::set_token(std::string&& value) {
  
  token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tradingpb.RequestGetCandles.token)
}
inline void RequestGetCandles::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tradingpb.RequestGetCandles.token)
}
inline void RequestGetCandles::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tradingpb.RequestGetCandles.token)
}
inline std::string* RequestGetCandles::_internal_mutable_token() {
  
  return token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RequestGetCandles::release_token() {
  // @@protoc_insertion_point(field_release:tradingpb.RequestGetCandles.token)
  
  return token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RequestGetCandles::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:tradingpb.RequestGetCandles.token)
}

// string market = 2;
inline void RequestGetCandles::clear_market() {
  market_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RequestGetCandles::market() const {
  // @@protoc_insertion_point(field_get:tradingpb.RequestGetCandles.market)
  return _internal_market();
}
inline void RequestGetCandles::set_market(const std::string& value) {
  _internal_set_market(value);
  // @@protoc_insertion_point(field_set:tradingpb.RequestGetCandles.market)
}
inline std::string* RequestGetCandles::mutable_market() {
  // @@protoc_insertion_point(field_mutable:tradingpb.RequestGetCandles.market)
  return _internal_mutable_market();
}
inline const std::string& RequestGetCandles::_internal_market() const {
  return market_.GetNoArena();
}
inline void RequestGetCandles::_internal_set_market(const std::string& value) {
  
  market_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RequestGetCandles::set_market(std::string&& value) {
  
  market_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tradingpb.RequestGetCandles.market)
}
inline void RequestGetCandles::set_market(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  market_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tradingpb.RequestGetCandles.market)
}
inline void RequestGetCandles::set_market(const char* value, size_t size) {
  
  market_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tradingpb.RequestGetCandles.market)
}
inline std::string* RequestGetCandles::_internal_mutable_market() {
  
  return market_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RequestGetCandles::release_market() {
  // @@protoc_insertion_point(field_release:tradingpb.RequestGetCandles.market)
  
  return market_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RequestGetCandles::set_allocated_market(std::string* market) {
  if (market != nullptr) {
    
  } else {
    
  }
  market_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), market);
  // @@protoc_insertion_point(field_set_allocated:tradingpb.RequestGetCandles.market)
}

// string symbol = 3;
inline void RequestGetCandles::clear_symbol() {
  symbol_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RequestGetCandles::symbol() const {
  // @@protoc_insertion_point(field_get:tradingpb.RequestGetCandles.symbol)
  return _internal_symbol();
}
inline void RequestGetCandles::set_symbol(const std::string& value) {
  _internal_set_symbol(value);
  // @@protoc_insertion_point(field_set:tradingpb.RequestGetCandles.symbol)
}
inline std::string* RequestGetCandles::mutable_symbol() {
  // @@protoc_insertion_point(field_mutable:tradingpb.RequestGetCandles.symbol)
  return _internal_mutable_symbol();
}
inline const std::string& RequestGetCandles::_internal_symbol() const {
  return symbol_.GetNoArena();
}
inline void RequestGetCandles::_internal_set_symbol(const std::string& value) {
  
  symbol_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RequestGetCandles::set_symbol(std::string&& value) {
  
  symbol_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tradingpb.RequestGetCandles.symbol)
}
inline void RequestGetCandles::set_symbol(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  symbol_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tradingpb.RequestGetCandles.symbol)
}
inline void RequestGetCandles::set_symbol(const char* value, size_t size) {
  
  symbol_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tradingpb.RequestGetCandles.symbol)
}
inline std::string* RequestGetCandles::_internal_mutable_symbol() {
  
  return symbol_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RequestGetCandles::release_symbol() {
  // @@protoc_insertion_point(field_release:tradingpb.RequestGetCandles.symbol)
  
  return symbol_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RequestGetCandles::set_allocated_symbol(std::string* symbol) {
  if (symbol != nullptr) {
    
  } else {
    
  }
  symbol_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), symbol);
  // @@protoc_insertion_point(field_set_allocated:tradingpb.RequestGetCandles.symbol)
}

// string tag = 4 [deprecated = true];
inline void RequestGetCandles::clear_tag() {
  tag_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RequestGetCandles::tag() const {
  // @@protoc_insertion_point(field_get:tradingpb.RequestGetCandles.tag)
  return _internal_tag();
}
inline void RequestGetCandles::set_tag(const std::string& value) {
  _internal_set_tag(value);
  // @@protoc_insertion_point(field_set:tradingpb.RequestGetCandles.tag)
}
inline std::string* RequestGetCandles::mutable_tag() {
  // @@protoc_insertion_point(field_mutable:tradingpb.RequestGetCandles.tag)
  return _internal_mutable_tag();
}
inline const std::string& RequestGetCandles::_internal_tag() const {
  return tag_.GetNoArena();
}
inline void RequestGetCandles::_internal_set_tag(const std::string& value) {
  
  tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RequestGetCandles::set_tag(std::string&& value) {
  
  tag_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tradingpb.RequestGetCandles.tag)
}
inline void RequestGetCandles::set_tag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tradingpb.RequestGetCandles.tag)
}
inline void RequestGetCandles::set_tag(const char* value, size_t size) {
  
  tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tradingpb.RequestGetCandles.tag)
}
inline std::string* RequestGetCandles::_internal_mutable_tag() {
  
  return tag_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RequestGetCandles::release_tag() {
  // @@protoc_insertion_point(field_release:tradingpb.RequestGetCandles.tag)
  
  return tag_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RequestGetCandles::set_allocated_tag(std::string* tag) {
  if (tag != nullptr) {
    
  } else {
    
  }
  tag_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tag);
  // @@protoc_insertion_point(field_set_allocated:tradingpb.RequestGetCandles.tag)
}

// int64 tsStart = 5;
inline void RequestGetCandles::clear_tsstart() {
  tsstart_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RequestGetCandles::_internal_tsstart() const {
  return tsstart_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RequestGetCandles::tsstart() const {
  // @@protoc_insertion_point(field_get:tradingpb.RequestGetCandles.tsStart)
  return _internal_tsstart();
}
inline void RequestGetCandles::_internal_set_tsstart(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  tsstart_ = value;
}
inline void RequestGetCandles::set_tsstart(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_tsstart(value);
  // @@protoc_insertion_point(field_set:tradingpb.RequestGetCandles.tsStart)
}

// int64 tsEnd = 6;
inline void RequestGetCandles::clear_tsend() {
  tsend_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RequestGetCandles::_internal_tsend() const {
  return tsend_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RequestGetCandles::tsend() const {
  // @@protoc_insertion_point(field_get:tradingpb.RequestGetCandles.tsEnd)
  return _internal_tsend();
}
inline void RequestGetCandles::_internal_set_tsend(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  tsend_ = value;
}
inline void RequestGetCandles::set_tsend(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_tsend(value);
  // @@protoc_insertion_point(field_set:tradingpb.RequestGetCandles.tsEnd)
}

// repeated string tags = 7;
inline int RequestGetCandles::_internal_tags_size() const {
  return tags_.size();
}
inline int RequestGetCandles::tags_size() const {
  return _internal_tags_size();
}
inline void RequestGetCandles::clear_tags() {
  tags_.Clear();
}
inline std::string* RequestGetCandles::add_tags() {
  // @@protoc_insertion_point(field_add_mutable:tradingpb.RequestGetCandles.tags)
  return _internal_add_tags();
}
inline const std::string& RequestGetCandles::_internal_tags(int index) const {
  return tags_.Get(index);
}
inline const std::string& RequestGetCandles::tags(int index) const {
  // @@protoc_insertion_point(field_get:tradingpb.RequestGetCandles.tags)
  return _internal_tags(index);
}
inline std::string* RequestGetCandles::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:tradingpb.RequestGetCandles.tags)
  return tags_.Mutable(index);
}
inline void RequestGetCandles::set_tags(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:tradingpb.RequestGetCandles.tags)
  tags_.Mutable(index)->assign(value);
}
inline void RequestGetCandles::set_tags(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:tradingpb.RequestGetCandles.tags)
  tags_.Mutable(index)->assign(std::move(value));
}
inline void RequestGetCandles::set_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tradingpb.RequestGetCandles.tags)
}
inline void RequestGetCandles::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tradingpb.RequestGetCandles.tags)
}
inline std::string* RequestGetCandles::_internal_add_tags() {
  return tags_.Add();
}
inline void RequestGetCandles::add_tags(const std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tradingpb.RequestGetCandles.tags)
}
inline void RequestGetCandles::add_tags(std::string&& value) {
  tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:tradingpb.RequestGetCandles.tags)
}
inline void RequestGetCandles::add_tags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tradingpb.RequestGetCandles.tags)
}
inline void RequestGetCandles::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tradingpb.RequestGetCandles.tags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RequestGetCandles::tags() const {
  // @@protoc_insertion_point(field_list:tradingpb.RequestGetCandles.tags)
  return tags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RequestGetCandles::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:tradingpb.RequestGetCandles.tags)
  return &tags_;
}

// .tradingpb.BasicRequestData basicRequest = 8;
inline bool RequestGetCandles::_internal_has_basicrequest() const {
  return this != internal_default_instance() && basicrequest_ != nullptr;
}
inline bool RequestGetCandles::has_basicrequest() const {
  return _internal_has_basicrequest();
}
inline const ::tradingpb::BasicRequestData& RequestGetCandles::_internal_basicrequest() const {
  const ::tradingpb::BasicRequestData* p = basicrequest_;
  return p != nullptr ? *p : *reinterpret_cast<const ::tradingpb::BasicRequestData*>(
      &::tradingpb::_BasicRequestData_default_instance_);
}
inline const ::tradingpb::BasicRequestData& RequestGetCandles::basicrequest() const {
  // @@protoc_insertion_point(field_get:tradingpb.RequestGetCandles.basicRequest)
  return _internal_basicrequest();
}
inline ::tradingpb::BasicRequestData* RequestGetCandles::release_basicrequest() {
  // @@protoc_insertion_point(field_release:tradingpb.RequestGetCandles.basicRequest)
  
  ::tradingpb::BasicRequestData* temp = basicrequest_;
  basicrequest_ = nullptr;
  return temp;
}
inline ::tradingpb::BasicRequestData* RequestGetCandles::_internal_mutable_basicrequest() {
  
  if (basicrequest_ == nullptr) {
    auto* p = CreateMaybeMessage<::tradingpb::BasicRequestData>(GetArenaNoVirtual());
    basicrequest_ = p;
  }
  return basicrequest_;
}
inline ::tradingpb::BasicRequestData* RequestGetCandles::mutable_basicrequest() {
  // @@protoc_insertion_point(field_mutable:tradingpb.RequestGetCandles.basicRequest)
  return _internal_mutable_basicrequest();
}
inline void RequestGetCandles::set_allocated_basicrequest(::tradingpb::BasicRequestData* basicrequest) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(basicrequest_);
  }
  if (basicrequest) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      basicrequest = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, basicrequest, submessage_arena);
    }
    
  } else {
    
  }
  basicrequest_ = basicrequest;
  // @@protoc_insertion_point(field_set_allocated:tradingpb.RequestGetCandles.basicRequest)
}

// -------------------------------------------------------------------

// ReplyGetCandles

// .tradingpb.Candles candles = 1;
inline bool ReplyGetCandles::_internal_has_candles() const {
  return this != internal_default_instance() && candles_ != nullptr;
}
inline bool ReplyGetCandles::has_candles() const {
  return _internal_has_candles();
}
inline void ReplyGetCandles::clear_candles() {
  if (GetArenaNoVirtual() == nullptr && candles_ != nullptr) {
    delete candles_;
  }
  candles_ = nullptr;
}
inline const ::tradingpb::Candles& ReplyGetCandles::_internal_candles() const {
  const ::tradingpb::Candles* p = candles_;
  return p != nullptr ? *p : *reinterpret_cast<const ::tradingpb::Candles*>(
      &::tradingpb::_Candles_default_instance_);
}
inline const ::tradingpb::Candles& ReplyGetCandles::candles() const {
  // @@protoc_insertion_point(field_get:tradingpb.ReplyGetCandles.candles)
  return _internal_candles();
}
inline ::tradingpb::Candles* ReplyGetCandles::release_candles() {
  // @@protoc_insertion_point(field_release:tradingpb.ReplyGetCandles.candles)
  
  ::tradingpb::Candles* temp = candles_;
  candles_ = nullptr;
  return temp;
}
inline ::tradingpb::Candles* ReplyGetCandles::_internal_mutable_candles() {
  
  if (candles_ == nullptr) {
    auto* p = CreateMaybeMessage<::tradingpb::Candles>(GetArenaNoVirtual());
    candles_ = p;
  }
  return candles_;
}
inline ::tradingpb::Candles* ReplyGetCandles::mutable_candles() {
  // @@protoc_insertion_point(field_mutable:tradingpb.ReplyGetCandles.candles)
  return _internal_mutable_candles();
}
inline void ReplyGetCandles::set_allocated_candles(::tradingpb::Candles* candles) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete candles_;
  }
  if (candles) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      candles = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, candles, submessage_arena);
    }
    
  } else {
    
  }
  candles_ = candles;
  // @@protoc_insertion_point(field_set_allocated:tradingpb.ReplyGetCandles.candles)
}

// -------------------------------------------------------------------

// RequestUpdSymbol

// string token = 1 [deprecated = true];
inline void RequestUpdSymbol::clear_token() {
  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RequestUpdSymbol::token() const {
  // @@protoc_insertion_point(field_get:tradingpb.RequestUpdSymbol.token)
  return _internal_token();
}
inline void RequestUpdSymbol::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:tradingpb.RequestUpdSymbol.token)
}
inline std::string* RequestUpdSymbol::mutable_token() {
  // @@protoc_insertion_point(field_mutable:tradingpb.RequestUpdSymbol.token)
  return _internal_mutable_token();
}
inline const std::string& RequestUpdSymbol::_internal_token() const {
  return token_.GetNoArena();
}
inline void RequestUpdSymbol::_internal_set_token(const std::string& value) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RequestUpdSymbol::set_token(std::string&& value) {
  
  token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tradingpb.RequestUpdSymbol.token)
}
inline void RequestUpdSymbol::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tradingpb.RequestUpdSymbol.token)
}
inline void RequestUpdSymbol::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tradingpb.RequestUpdSymbol.token)
}
inline std::string* RequestUpdSymbol::_internal_mutable_token() {
  
  return token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RequestUpdSymbol::release_token() {
  // @@protoc_insertion_point(field_release:tradingpb.RequestUpdSymbol.token)
  
  return token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RequestUpdSymbol::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:tradingpb.RequestUpdSymbol.token)
}

// .tradingpb.SymbolInfo symbol = 2;
inline bool RequestUpdSymbol::_internal_has_symbol() const {
  return this != internal_default_instance() && symbol_ != nullptr;
}
inline bool RequestUpdSymbol::has_symbol() const {
  return _internal_has_symbol();
}
inline void RequestUpdSymbol::clear_symbol() {
  if (GetArenaNoVirtual() == nullptr && symbol_ != nullptr) {
    delete symbol_;
  }
  symbol_ = nullptr;
}
inline const ::tradingpb::SymbolInfo& RequestUpdSymbol::_internal_symbol() const {
  const ::tradingpb::SymbolInfo* p = symbol_;
  return p != nullptr ? *p : *reinterpret_cast<const ::tradingpb::SymbolInfo*>(
      &::tradingpb::_SymbolInfo_default_instance_);
}
inline const ::tradingpb::SymbolInfo& RequestUpdSymbol::symbol() const {
  // @@protoc_insertion_point(field_get:tradingpb.RequestUpdSymbol.symbol)
  return _internal_symbol();
}
inline ::tradingpb::SymbolInfo* RequestUpdSymbol::release_symbol() {
  // @@protoc_insertion_point(field_release:tradingpb.RequestUpdSymbol.symbol)
  
  ::tradingpb::SymbolInfo* temp = symbol_;
  symbol_ = nullptr;
  return temp;
}
inline ::tradingpb::SymbolInfo* RequestUpdSymbol::_internal_mutable_symbol() {
  
  if (symbol_ == nullptr) {
    auto* p = CreateMaybeMessage<::tradingpb::SymbolInfo>(GetArenaNoVirtual());
    symbol_ = p;
  }
  return symbol_;
}
inline ::tradingpb::SymbolInfo* RequestUpdSymbol::mutable_symbol() {
  // @@protoc_insertion_point(field_mutable:tradingpb.RequestUpdSymbol.symbol)
  return _internal_mutable_symbol();
}
inline void RequestUpdSymbol::set_allocated_symbol(::tradingpb::SymbolInfo* symbol) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete symbol_;
  }
  if (symbol) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      symbol = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, symbol, submessage_arena);
    }
    
  } else {
    
  }
  symbol_ = symbol;
  // @@protoc_insertion_point(field_set_allocated:tradingpb.RequestUpdSymbol.symbol)
}

// .tradingpb.BasicRequestData basicRequest = 3;
inline bool RequestUpdSymbol::_internal_has_basicrequest() const {
  return this != internal_default_instance() && basicrequest_ != nullptr;
}
inline bool RequestUpdSymbol::has_basicrequest() const {
  return _internal_has_basicrequest();
}
inline const ::tradingpb::BasicRequestData& RequestUpdSymbol::_internal_basicrequest() const {
  const ::tradingpb::BasicRequestData* p = basicrequest_;
  return p != nullptr ? *p : *reinterpret_cast<const ::tradingpb::BasicRequestData*>(
      &::tradingpb::_BasicRequestData_default_instance_);
}
inline const ::tradingpb::BasicRequestData& RequestUpdSymbol::basicrequest() const {
  // @@protoc_insertion_point(field_get:tradingpb.RequestUpdSymbol.basicRequest)
  return _internal_basicrequest();
}
inline ::tradingpb::BasicRequestData* RequestUpdSymbol::release_basicrequest() {
  // @@protoc_insertion_point(field_release:tradingpb.RequestUpdSymbol.basicRequest)
  
  ::tradingpb::BasicRequestData* temp = basicrequest_;
  basicrequest_ = nullptr;
  return temp;
}
inline ::tradingpb::BasicRequestData* RequestUpdSymbol::_internal_mutable_basicrequest() {
  
  if (basicrequest_ == nullptr) {
    auto* p = CreateMaybeMessage<::tradingpb::BasicRequestData>(GetArenaNoVirtual());
    basicrequest_ = p;
  }
  return basicrequest_;
}
inline ::tradingpb::BasicRequestData* RequestUpdSymbol::mutable_basicrequest() {
  // @@protoc_insertion_point(field_mutable:tradingpb.RequestUpdSymbol.basicRequest)
  return _internal_mutable_basicrequest();
}
inline void RequestUpdSymbol::set_allocated_basicrequest(::tradingpb::BasicRequestData* basicrequest) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(basicrequest_);
  }
  if (basicrequest) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      basicrequest = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, basicrequest, submessage_arena);
    }
    
  } else {
    
  }
  basicrequest_ = basicrequest;
  // @@protoc_insertion_point(field_set_allocated:tradingpb.RequestUpdSymbol.basicRequest)
}

// -------------------------------------------------------------------

// ReplyUpdSymbol

// bool isOK = 1;
inline void ReplyUpdSymbol::clear_isok() {
  isok_ = false;
}
inline bool ReplyUpdSymbol::_internal_isok() const {
  return isok_;
}
inline bool ReplyUpdSymbol::isok() const {
  // @@protoc_insertion_point(field_get:tradingpb.ReplyUpdSymbol.isOK)
  return _internal_isok();
}
inline void ReplyUpdSymbol::_internal_set_isok(bool value) {
  
  isok_ = value;
}
inline void ReplyUpdSymbol::set_isok(bool value) {
  _internal_set_isok(value);
  // @@protoc_insertion_point(field_set:tradingpb.ReplyUpdSymbol.isOK)
}

// -------------------------------------------------------------------

// RequestGetSymbol

// string token = 1 [deprecated = true];
inline void RequestGetSymbol::clear_token() {
  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RequestGetSymbol::token() const {
  // @@protoc_insertion_point(field_get:tradingpb.RequestGetSymbol.token)
  return _internal_token();
}
inline void RequestGetSymbol::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:tradingpb.RequestGetSymbol.token)
}
inline std::string* RequestGetSymbol::mutable_token() {
  // @@protoc_insertion_point(field_mutable:tradingpb.RequestGetSymbol.token)
  return _internal_mutable_token();
}
inline const std::string& RequestGetSymbol::_internal_token() const {
  return token_.GetNoArena();
}
inline void RequestGetSymbol::_internal_set_token(const std::string& value) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RequestGetSymbol::set_token(std::string&& value) {
  
  token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tradingpb.RequestGetSymbol.token)
}
inline void RequestGetSymbol::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tradingpb.RequestGetSymbol.token)
}
inline void RequestGetSymbol::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tradingpb.RequestGetSymbol.token)
}
inline std::string* RequestGetSymbol::_internal_mutable_token() {
  
  return token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RequestGetSymbol::release_token() {
  // @@protoc_insertion_point(field_release:tradingpb.RequestGetSymbol.token)
  
  return token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RequestGetSymbol::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:tradingpb.RequestGetSymbol.token)
}

// string market = 2;
inline void RequestGetSymbol::clear_market() {
  market_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RequestGetSymbol::market() const {
  // @@protoc_insertion_point(field_get:tradingpb.RequestGetSymbol.market)
  return _internal_market();
}
inline void RequestGetSymbol::set_market(const std::string& value) {
  _internal_set_market(value);
  // @@protoc_insertion_point(field_set:tradingpb.RequestGetSymbol.market)
}
inline std::string* RequestGetSymbol::mutable_market() {
  // @@protoc_insertion_point(field_mutable:tradingpb.RequestGetSymbol.market)
  return _internal_mutable_market();
}
inline const std::string& RequestGetSymbol::_internal_market() const {
  return market_.GetNoArena();
}
inline void RequestGetSymbol::_internal_set_market(const std::string& value) {
  
  market_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RequestGetSymbol::set_market(std::string&& value) {
  
  market_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tradingpb.RequestGetSymbol.market)
}
inline void RequestGetSymbol::set_market(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  market_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tradingpb.RequestGetSymbol.market)
}
inline void RequestGetSymbol::set_market(const char* value, size_t size) {
  
  market_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tradingpb.RequestGetSymbol.market)
}
inline std::string* RequestGetSymbol::_internal_mutable_market() {
  
  return market_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RequestGetSymbol::release_market() {
  // @@protoc_insertion_point(field_release:tradingpb.RequestGetSymbol.market)
  
  return market_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RequestGetSymbol::set_allocated_market(std::string* market) {
  if (market != nullptr) {
    
  } else {
    
  }
  market_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), market);
  // @@protoc_insertion_point(field_set_allocated:tradingpb.RequestGetSymbol.market)
}

// string symbol = 3;
inline void RequestGetSymbol::clear_symbol() {
  symbol_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RequestGetSymbol::symbol() const {
  // @@protoc_insertion_point(field_get:tradingpb.RequestGetSymbol.symbol)
  return _internal_symbol();
}
inline void RequestGetSymbol::set_symbol(const std::string& value) {
  _internal_set_symbol(value);
  // @@protoc_insertion_point(field_set:tradingpb.RequestGetSymbol.symbol)
}
inline std::string* RequestGetSymbol::mutable_symbol() {
  // @@protoc_insertion_point(field_mutable:tradingpb.RequestGetSymbol.symbol)
  return _internal_mutable_symbol();
}
inline const std::string& RequestGetSymbol::_internal_symbol() const {
  return symbol_.GetNoArena();
}
inline void RequestGetSymbol::_internal_set_symbol(const std::string& value) {
  
  symbol_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RequestGetSymbol::set_symbol(std::string&& value) {
  
  symbol_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tradingpb.RequestGetSymbol.symbol)
}
inline void RequestGetSymbol::set_symbol(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  symbol_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tradingpb.RequestGetSymbol.symbol)
}
inline void RequestGetSymbol::set_symbol(const char* value, size_t size) {
  
  symbol_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tradingpb.RequestGetSymbol.symbol)
}
inline std::string* RequestGetSymbol::_internal_mutable_symbol() {
  
  return symbol_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RequestGetSymbol::release_symbol() {
  // @@protoc_insertion_point(field_release:tradingpb.RequestGetSymbol.symbol)
  
  return symbol_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RequestGetSymbol::set_allocated_symbol(std::string* symbol) {
  if (symbol != nullptr) {
    
  } else {
    
  }
  symbol_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), symbol);
  // @@protoc_insertion_point(field_set_allocated:tradingpb.RequestGetSymbol.symbol)
}

// .tradingpb.BasicRequestData basicRequest = 4;
inline bool RequestGetSymbol::_internal_has_basicrequest() const {
  return this != internal_default_instance() && basicrequest_ != nullptr;
}
inline bool RequestGetSymbol::has_basicrequest() const {
  return _internal_has_basicrequest();
}
inline const ::tradingpb::BasicRequestData& RequestGetSymbol::_internal_basicrequest() const {
  const ::tradingpb::BasicRequestData* p = basicrequest_;
  return p != nullptr ? *p : *reinterpret_cast<const ::tradingpb::BasicRequestData*>(
      &::tradingpb::_BasicRequestData_default_instance_);
}
inline const ::tradingpb::BasicRequestData& RequestGetSymbol::basicrequest() const {
  // @@protoc_insertion_point(field_get:tradingpb.RequestGetSymbol.basicRequest)
  return _internal_basicrequest();
}
inline ::tradingpb::BasicRequestData* RequestGetSymbol::release_basicrequest() {
  // @@protoc_insertion_point(field_release:tradingpb.RequestGetSymbol.basicRequest)
  
  ::tradingpb::BasicRequestData* temp = basicrequest_;
  basicrequest_ = nullptr;
  return temp;
}
inline ::tradingpb::BasicRequestData* RequestGetSymbol::_internal_mutable_basicrequest() {
  
  if (basicrequest_ == nullptr) {
    auto* p = CreateMaybeMessage<::tradingpb::BasicRequestData>(GetArenaNoVirtual());
    basicrequest_ = p;
  }
  return basicrequest_;
}
inline ::tradingpb::BasicRequestData* RequestGetSymbol::mutable_basicrequest() {
  // @@protoc_insertion_point(field_mutable:tradingpb.RequestGetSymbol.basicRequest)
  return _internal_mutable_basicrequest();
}
inline void RequestGetSymbol::set_allocated_basicrequest(::tradingpb::BasicRequestData* basicrequest) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(basicrequest_);
  }
  if (basicrequest) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      basicrequest = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, basicrequest, submessage_arena);
    }
    
  } else {
    
  }
  basicrequest_ = basicrequest;
  // @@protoc_insertion_point(field_set_allocated:tradingpb.RequestGetSymbol.basicRequest)
}

// -------------------------------------------------------------------

// ReplyGetSymbol

// .tradingpb.SymbolInfo symbol = 1;
inline bool ReplyGetSymbol::_internal_has_symbol() const {
  return this != internal_default_instance() && symbol_ != nullptr;
}
inline bool ReplyGetSymbol::has_symbol() const {
  return _internal_has_symbol();
}
inline void ReplyGetSymbol::clear_symbol() {
  if (GetArenaNoVirtual() == nullptr && symbol_ != nullptr) {
    delete symbol_;
  }
  symbol_ = nullptr;
}
inline const ::tradingpb::SymbolInfo& ReplyGetSymbol::_internal_symbol() const {
  const ::tradingpb::SymbolInfo* p = symbol_;
  return p != nullptr ? *p : *reinterpret_cast<const ::tradingpb::SymbolInfo*>(
      &::tradingpb::_SymbolInfo_default_instance_);
}
inline const ::tradingpb::SymbolInfo& ReplyGetSymbol::symbol() const {
  // @@protoc_insertion_point(field_get:tradingpb.ReplyGetSymbol.symbol)
  return _internal_symbol();
}
inline ::tradingpb::SymbolInfo* ReplyGetSymbol::release_symbol() {
  // @@protoc_insertion_point(field_release:tradingpb.ReplyGetSymbol.symbol)
  
  ::tradingpb::SymbolInfo* temp = symbol_;
  symbol_ = nullptr;
  return temp;
}
inline ::tradingpb::SymbolInfo* ReplyGetSymbol::_internal_mutable_symbol() {
  
  if (symbol_ == nullptr) {
    auto* p = CreateMaybeMessage<::tradingpb::SymbolInfo>(GetArenaNoVirtual());
    symbol_ = p;
  }
  return symbol_;
}
inline ::tradingpb::SymbolInfo* ReplyGetSymbol::mutable_symbol() {
  // @@protoc_insertion_point(field_mutable:tradingpb.ReplyGetSymbol.symbol)
  return _internal_mutable_symbol();
}
inline void ReplyGetSymbol::set_allocated_symbol(::tradingpb::SymbolInfo* symbol) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete symbol_;
  }
  if (symbol) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      symbol = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, symbol, submessage_arena);
    }
    
  } else {
    
  }
  symbol_ = symbol;
  // @@protoc_insertion_point(field_set_allocated:tradingpb.ReplyGetSymbol.symbol)
}

// -------------------------------------------------------------------

// RequestGetSymbols

// string token = 1 [deprecated = true];
inline void RequestGetSymbols::clear_token() {
  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RequestGetSymbols::token() const {
  // @@protoc_insertion_point(field_get:tradingpb.RequestGetSymbols.token)
  return _internal_token();
}
inline void RequestGetSymbols::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:tradingpb.RequestGetSymbols.token)
}
inline std::string* RequestGetSymbols::mutable_token() {
  // @@protoc_insertion_point(field_mutable:tradingpb.RequestGetSymbols.token)
  return _internal_mutable_token();
}
inline const std::string& RequestGetSymbols::_internal_token() const {
  return token_.GetNoArena();
}
inline void RequestGetSymbols::_internal_set_token(const std::string& value) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RequestGetSymbols::set_token(std::string&& value) {
  
  token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tradingpb.RequestGetSymbols.token)
}
inline void RequestGetSymbols::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tradingpb.RequestGetSymbols.token)
}
inline void RequestGetSymbols::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tradingpb.RequestGetSymbols.token)
}
inline std::string* RequestGetSymbols::_internal_mutable_token() {
  
  return token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RequestGetSymbols::release_token() {
  // @@protoc_insertion_point(field_release:tradingpb.RequestGetSymbols.token)
  
  return token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RequestGetSymbols::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:tradingpb.RequestGetSymbols.token)
}

// string market = 2;
inline void RequestGetSymbols::clear_market() {
  market_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RequestGetSymbols::market() const {
  // @@protoc_insertion_point(field_get:tradingpb.RequestGetSymbols.market)
  return _internal_market();
}
inline void RequestGetSymbols::set_market(const std::string& value) {
  _internal_set_market(value);
  // @@protoc_insertion_point(field_set:tradingpb.RequestGetSymbols.market)
}
inline std::string* RequestGetSymbols::mutable_market() {
  // @@protoc_insertion_point(field_mutable:tradingpb.RequestGetSymbols.market)
  return _internal_mutable_market();
}
inline const std::string& RequestGetSymbols::_internal_market() const {
  return market_.GetNoArena();
}
inline void RequestGetSymbols::_internal_set_market(const std::string& value) {
  
  market_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RequestGetSymbols::set_market(std::string&& value) {
  
  market_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tradingpb.RequestGetSymbols.market)
}
inline void RequestGetSymbols::set_market(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  market_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tradingpb.RequestGetSymbols.market)
}
inline void RequestGetSymbols::set_market(const char* value, size_t size) {
  
  market_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tradingpb.RequestGetSymbols.market)
}
inline std::string* RequestGetSymbols::_internal_mutable_market() {
  
  return market_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RequestGetSymbols::release_market() {
  // @@protoc_insertion_point(field_release:tradingpb.RequestGetSymbols.market)
  
  return market_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RequestGetSymbols::set_allocated_market(std::string* market) {
  if (market != nullptr) {
    
  } else {
    
  }
  market_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), market);
  // @@protoc_insertion_point(field_set_allocated:tradingpb.RequestGetSymbols.market)
}

// repeated string symbols = 3;
inline int RequestGetSymbols::_internal_symbols_size() const {
  return symbols_.size();
}
inline int RequestGetSymbols::symbols_size() const {
  return _internal_symbols_size();
}
inline void RequestGetSymbols::clear_symbols() {
  symbols_.Clear();
}
inline std::string* RequestGetSymbols::add_symbols() {
  // @@protoc_insertion_point(field_add_mutable:tradingpb.RequestGetSymbols.symbols)
  return _internal_add_symbols();
}
inline const std::string& RequestGetSymbols::_internal_symbols(int index) const {
  return symbols_.Get(index);
}
inline const std::string& RequestGetSymbols::symbols(int index) const {
  // @@protoc_insertion_point(field_get:tradingpb.RequestGetSymbols.symbols)
  return _internal_symbols(index);
}
inline std::string* RequestGetSymbols::mutable_symbols(int index) {
  // @@protoc_insertion_point(field_mutable:tradingpb.RequestGetSymbols.symbols)
  return symbols_.Mutable(index);
}
inline void RequestGetSymbols::set_symbols(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:tradingpb.RequestGetSymbols.symbols)
  symbols_.Mutable(index)->assign(value);
}
inline void RequestGetSymbols::set_symbols(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:tradingpb.RequestGetSymbols.symbols)
  symbols_.Mutable(index)->assign(std::move(value));
}
inline void RequestGetSymbols::set_symbols(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  symbols_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tradingpb.RequestGetSymbols.symbols)
}
inline void RequestGetSymbols::set_symbols(int index, const char* value, size_t size) {
  symbols_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tradingpb.RequestGetSymbols.symbols)
}
inline std::string* RequestGetSymbols::_internal_add_symbols() {
  return symbols_.Add();
}
inline void RequestGetSymbols::add_symbols(const std::string& value) {
  symbols_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tradingpb.RequestGetSymbols.symbols)
}
inline void RequestGetSymbols::add_symbols(std::string&& value) {
  symbols_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:tradingpb.RequestGetSymbols.symbols)
}
inline void RequestGetSymbols::add_symbols(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  symbols_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tradingpb.RequestGetSymbols.symbols)
}
inline void RequestGetSymbols::add_symbols(const char* value, size_t size) {
  symbols_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tradingpb.RequestGetSymbols.symbols)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RequestGetSymbols::symbols() const {
  // @@protoc_insertion_point(field_list:tradingpb.RequestGetSymbols.symbols)
  return symbols_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RequestGetSymbols::mutable_symbols() {
  // @@protoc_insertion_point(field_mutable_list:tradingpb.RequestGetSymbols.symbols)
  return &symbols_;
}

// .tradingpb.BasicRequestData basicRequest = 4;
inline bool RequestGetSymbols::_internal_has_basicrequest() const {
  return this != internal_default_instance() && basicrequest_ != nullptr;
}
inline bool RequestGetSymbols::has_basicrequest() const {
  return _internal_has_basicrequest();
}
inline const ::tradingpb::BasicRequestData& RequestGetSymbols::_internal_basicrequest() const {
  const ::tradingpb::BasicRequestData* p = basicrequest_;
  return p != nullptr ? *p : *reinterpret_cast<const ::tradingpb::BasicRequestData*>(
      &::tradingpb::_BasicRequestData_default_instance_);
}
inline const ::tradingpb::BasicRequestData& RequestGetSymbols::basicrequest() const {
  // @@protoc_insertion_point(field_get:tradingpb.RequestGetSymbols.basicRequest)
  return _internal_basicrequest();
}
inline ::tradingpb::BasicRequestData* RequestGetSymbols::release_basicrequest() {
  // @@protoc_insertion_point(field_release:tradingpb.RequestGetSymbols.basicRequest)
  
  ::tradingpb::BasicRequestData* temp = basicrequest_;
  basicrequest_ = nullptr;
  return temp;
}
inline ::tradingpb::BasicRequestData* RequestGetSymbols::_internal_mutable_basicrequest() {
  
  if (basicrequest_ == nullptr) {
    auto* p = CreateMaybeMessage<::tradingpb::BasicRequestData>(GetArenaNoVirtual());
    basicrequest_ = p;
  }
  return basicrequest_;
}
inline ::tradingpb::BasicRequestData* RequestGetSymbols::mutable_basicrequest() {
  // @@protoc_insertion_point(field_mutable:tradingpb.RequestGetSymbols.basicRequest)
  return _internal_mutable_basicrequest();
}
inline void RequestGetSymbols::set_allocated_basicrequest(::tradingpb::BasicRequestData* basicrequest) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(basicrequest_);
  }
  if (basicrequest) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      basicrequest = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, basicrequest, submessage_arena);
    }
    
  } else {
    
  }
  basicrequest_ = basicrequest;
  // @@protoc_insertion_point(field_set_allocated:tradingpb.RequestGetSymbols.basicRequest)
}

// -------------------------------------------------------------------

// RequestSimTrading

// .tradingpb.BasicRequestData basicRequest = 1;
inline bool RequestSimTrading::_internal_has_basicrequest() const {
  return this != internal_default_instance() && basicrequest_ != nullptr;
}
inline bool RequestSimTrading::has_basicrequest() const {
  return _internal_has_basicrequest();
}
inline const ::tradingpb::BasicRequestData& RequestSimTrading::_internal_basicrequest() const {
  const ::tradingpb::BasicRequestData* p = basicrequest_;
  return p != nullptr ? *p : *reinterpret_cast<const ::tradingpb::BasicRequestData*>(
      &::tradingpb::_BasicRequestData_default_instance_);
}
inline const ::tradingpb::BasicRequestData& RequestSimTrading::basicrequest() const {
  // @@protoc_insertion_point(field_get:tradingpb.RequestSimTrading.basicRequest)
  return _internal_basicrequest();
}
inline ::tradingpb::BasicRequestData* RequestSimTrading::release_basicrequest() {
  // @@protoc_insertion_point(field_release:tradingpb.RequestSimTrading.basicRequest)
  
  ::tradingpb::BasicRequestData* temp = basicrequest_;
  basicrequest_ = nullptr;
  return temp;
}
inline ::tradingpb::BasicRequestData* RequestSimTrading::_internal_mutable_basicrequest() {
  
  if (basicrequest_ == nullptr) {
    auto* p = CreateMaybeMessage<::tradingpb::BasicRequestData>(GetArenaNoVirtual());
    basicrequest_ = p;
  }
  return basicrequest_;
}
inline ::tradingpb::BasicRequestData* RequestSimTrading::mutable_basicrequest() {
  // @@protoc_insertion_point(field_mutable:tradingpb.RequestSimTrading.basicRequest)
  return _internal_mutable_basicrequest();
}
inline void RequestSimTrading::set_allocated_basicrequest(::tradingpb::BasicRequestData* basicrequest) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(basicrequest_);
  }
  if (basicrequest) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      basicrequest = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, basicrequest, submessage_arena);
    }
    
  } else {
    
  }
  basicrequest_ = basicrequest;
  // @@protoc_insertion_point(field_set_allocated:tradingpb.RequestSimTrading.basicRequest)
}

// .tradingpb.SimTradingParams params = 2;
inline bool RequestSimTrading::_internal_has_params() const {
  return this != internal_default_instance() && params_ != nullptr;
}
inline bool RequestSimTrading::has_params() const {
  return _internal_has_params();
}
inline const ::tradingpb::SimTradingParams& RequestSimTrading::_internal_params() const {
  const ::tradingpb::SimTradingParams* p = params_;
  return p != nullptr ? *p : *reinterpret_cast<const ::tradingpb::SimTradingParams*>(
      &::tradingpb::_SimTradingParams_default_instance_);
}
inline const ::tradingpb::SimTradingParams& RequestSimTrading::params() const {
  // @@protoc_insertion_point(field_get:tradingpb.RequestSimTrading.params)
  return _internal_params();
}
inline ::tradingpb::SimTradingParams* RequestSimTrading::release_params() {
  // @@protoc_insertion_point(field_release:tradingpb.RequestSimTrading.params)
  
  ::tradingpb::SimTradingParams* temp = params_;
  params_ = nullptr;
  return temp;
}
inline ::tradingpb::SimTradingParams* RequestSimTrading::_internal_mutable_params() {
  
  if (params_ == nullptr) {
    auto* p = CreateMaybeMessage<::tradingpb::SimTradingParams>(GetArenaNoVirtual());
    params_ = p;
  }
  return params_;
}
inline ::tradingpb::SimTradingParams* RequestSimTrading::mutable_params() {
  // @@protoc_insertion_point(field_mutable:tradingpb.RequestSimTrading.params)
  return _internal_mutable_params();
}
inline void RequestSimTrading::set_allocated_params(::tradingpb::SimTradingParams* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(params_);
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    
  } else {
    
  }
  params_ = params;
  // @@protoc_insertion_point(field_set_allocated:tradingpb.RequestSimTrading.params)
}

// bool ignoreCache = 3;
inline void RequestSimTrading::clear_ignorecache() {
  ignorecache_ = false;
}
inline bool RequestSimTrading::_internal_ignorecache() const {
  return ignorecache_;
}
inline bool RequestSimTrading::ignorecache() const {
  // @@protoc_insertion_point(field_get:tradingpb.RequestSimTrading.ignoreCache)
  return _internal_ignorecache();
}
inline void RequestSimTrading::_internal_set_ignorecache(bool value) {
  
  ignorecache_ = value;
}
inline void RequestSimTrading::set_ignorecache(bool value) {
  _internal_set_ignorecache(value);
  // @@protoc_insertion_point(field_set:tradingpb.RequestSimTrading.ignoreCache)
}

// int32 index = 4;
inline void RequestSimTrading::clear_index() {
  index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequestSimTrading::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequestSimTrading::index() const {
  // @@protoc_insertion_point(field_get:tradingpb.RequestSimTrading.index)
  return _internal_index();
}
inline void RequestSimTrading::_internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  index_ = value;
}
inline void RequestSimTrading::set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:tradingpb.RequestSimTrading.index)
}

// float ignoreTotalReturn = 5;
inline void RequestSimTrading::clear_ignoretotalreturn() {
  ignoretotalreturn_ = 0;
}
inline float RequestSimTrading::_internal_ignoretotalreturn() const {
  return ignoretotalreturn_;
}
inline float RequestSimTrading::ignoretotalreturn() const {
  // @@protoc_insertion_point(field_get:tradingpb.RequestSimTrading.ignoreTotalReturn)
  return _internal_ignoretotalreturn();
}
inline void RequestSimTrading::_internal_set_ignoretotalreturn(float value) {
  
  ignoretotalreturn_ = value;
}
inline void RequestSimTrading::set_ignoretotalreturn(float value) {
  _internal_set_ignoretotalreturn(value);
  // @@protoc_insertion_point(field_set:tradingpb.RequestSimTrading.ignoreTotalReturn)
}

// int32 minNums = 6;
inline void RequestSimTrading::clear_minnums() {
  minnums_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequestSimTrading::_internal_minnums() const {
  return minnums_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequestSimTrading::minnums() const {
  // @@protoc_insertion_point(field_get:tradingpb.RequestSimTrading.minNums)
  return _internal_minnums();
}
inline void RequestSimTrading::_internal_set_minnums(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  minnums_ = value;
}
inline void RequestSimTrading::set_minnums(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_minnums(value);
  // @@protoc_insertion_point(field_set:tradingpb.RequestSimTrading.minNums)
}

// int32 maxNums = 7 [deprecated = true];
inline void RequestSimTrading::clear_maxnums() {
  maxnums_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequestSimTrading::_internal_maxnums() const {
  return maxnums_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequestSimTrading::maxnums() const {
  // @@protoc_insertion_point(field_get:tradingpb.RequestSimTrading.maxNums)
  return _internal_maxnums();
}
inline void RequestSimTrading::_internal_set_maxnums(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  maxnums_ = value;
}
inline void RequestSimTrading::set_maxnums(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_maxnums(value);
  // @@protoc_insertion_point(field_set:tradingpb.RequestSimTrading.maxNums)
}

// string sortBy = 8;
inline void RequestSimTrading::clear_sortby() {
  sortby_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RequestSimTrading::sortby() const {
  // @@protoc_insertion_point(field_get:tradingpb.RequestSimTrading.sortBy)
  return _internal_sortby();
}
inline void RequestSimTrading::set_sortby(const std::string& value) {
  _internal_set_sortby(value);
  // @@protoc_insertion_point(field_set:tradingpb.RequestSimTrading.sortBy)
}
inline std::string* RequestSimTrading::mutable_sortby() {
  // @@protoc_insertion_point(field_mutable:tradingpb.RequestSimTrading.sortBy)
  return _internal_mutable_sortby();
}
inline const std::string& RequestSimTrading::_internal_sortby() const {
  return sortby_.GetNoArena();
}
inline void RequestSimTrading::_internal_set_sortby(const std::string& value) {
  
  sortby_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RequestSimTrading::set_sortby(std::string&& value) {
  
  sortby_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tradingpb.RequestSimTrading.sortBy)
}
inline void RequestSimTrading::set_sortby(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sortby_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tradingpb.RequestSimTrading.sortBy)
}
inline void RequestSimTrading::set_sortby(const char* value, size_t size) {
  
  sortby_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tradingpb.RequestSimTrading.sortBy)
}
inline std::string* RequestSimTrading::_internal_mutable_sortby() {
  
  return sortby_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RequestSimTrading::release_sortby() {
  // @@protoc_insertion_point(field_release:tradingpb.RequestSimTrading.sortBy)
  
  return sortby_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RequestSimTrading::set_allocated_sortby(std::string* sortby) {
  if (sortby != nullptr) {
    
  } else {
    
  }
  sortby_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sortby);
  // @@protoc_insertion_point(field_set_allocated:tradingpb.RequestSimTrading.sortBy)
}

// -------------------------------------------------------------------

// ReplySimTrading

// repeated .tradingpb.PNLData pnl = 1;
inline int ReplySimTrading::_internal_pnl_size() const {
  return pnl_.size();
}
inline int ReplySimTrading::pnl_size() const {
  return _internal_pnl_size();
}
inline ::tradingpb::PNLData* ReplySimTrading::mutable_pnl(int index) {
  // @@protoc_insertion_point(field_mutable:tradingpb.ReplySimTrading.pnl)
  return pnl_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tradingpb::PNLData >*
ReplySimTrading::mutable_pnl() {
  // @@protoc_insertion_point(field_mutable_list:tradingpb.ReplySimTrading.pnl)
  return &pnl_;
}
inline const ::tradingpb::PNLData& ReplySimTrading::_internal_pnl(int index) const {
  return pnl_.Get(index);
}
inline const ::tradingpb::PNLData& ReplySimTrading::pnl(int index) const {
  // @@protoc_insertion_point(field_get:tradingpb.ReplySimTrading.pnl)
  return _internal_pnl(index);
}
inline ::tradingpb::PNLData* ReplySimTrading::_internal_add_pnl() {
  return pnl_.Add();
}
inline ::tradingpb::PNLData* ReplySimTrading::add_pnl() {
  // @@protoc_insertion_point(field_add:tradingpb.ReplySimTrading.pnl)
  return _internal_add_pnl();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tradingpb::PNLData >&
ReplySimTrading::pnl() const {
  // @@protoc_insertion_point(field_list:tradingpb.ReplySimTrading.pnl)
  return pnl_;
}

// repeated .tradingpb.PNLData baseline = 2 [deprecated = true];
inline int ReplySimTrading::_internal_baseline_size() const {
  return baseline_.size();
}
inline int ReplySimTrading::baseline_size() const {
  return _internal_baseline_size();
}
inline ::tradingpb::PNLData* ReplySimTrading::mutable_baseline(int index) {
  // @@protoc_insertion_point(field_mutable:tradingpb.ReplySimTrading.baseline)
  return baseline_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tradingpb::PNLData >*
ReplySimTrading::mutable_baseline() {
  // @@protoc_insertion_point(field_mutable_list:tradingpb.ReplySimTrading.baseline)
  return &baseline_;
}
inline const ::tradingpb::PNLData& ReplySimTrading::_internal_baseline(int index) const {
  return baseline_.Get(index);
}
inline const ::tradingpb::PNLData& ReplySimTrading::baseline(int index) const {
  // @@protoc_insertion_point(field_get:tradingpb.ReplySimTrading.baseline)
  return _internal_baseline(index);
}
inline ::tradingpb::PNLData* ReplySimTrading::_internal_add_baseline() {
  return baseline_.Add();
}
inline ::tradingpb::PNLData* ReplySimTrading::add_baseline() {
  // @@protoc_insertion_point(field_add:tradingpb.ReplySimTrading.baseline)
  return _internal_add_baseline();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tradingpb::PNLData >&
ReplySimTrading::baseline() const {
  // @@protoc_insertion_point(field_list:tradingpb.ReplySimTrading.baseline)
  return baseline_;
}

// int32 index = 3;
inline void ReplySimTrading::clear_index() {
  index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReplySimTrading::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReplySimTrading::index() const {
  // @@protoc_insertion_point(field_get:tradingpb.ReplySimTrading.index)
  return _internal_index();
}
inline void ReplySimTrading::_internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  index_ = value;
}
inline void ReplySimTrading::set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:tradingpb.ReplySimTrading.index)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace tradingpb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tradingdb2_2eproto

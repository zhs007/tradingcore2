// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tradingdb2.proto

#include "tradingdb2.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_tradingdb2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Candle_tradingdb2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tradingdb2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Candles_tradingdb2_2eproto;
namespace tradingdb2pb {
class CandleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Candle> _instance;
} _Candle_default_instance_;
class CandlesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Candles> _instance;
} _Candles_default_instance_;
class RequestUpdCandlesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RequestUpdCandles> _instance;
} _RequestUpdCandles_default_instance_;
class ReplyUpdCandlesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReplyUpdCandles> _instance;
} _ReplyUpdCandles_default_instance_;
class RequestGetCandlesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RequestGetCandles> _instance;
} _RequestGetCandles_default_instance_;
class ReplyGetCandlesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReplyGetCandles> _instance;
} _ReplyGetCandles_default_instance_;
}  // namespace tradingdb2pb
static void InitDefaultsscc_info_Candle_tradingdb2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tradingdb2pb::_Candle_default_instance_;
    new (ptr) ::tradingdb2pb::Candle();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tradingdb2pb::Candle::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Candle_tradingdb2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Candle_tradingdb2_2eproto}, {}};

static void InitDefaultsscc_info_Candles_tradingdb2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tradingdb2pb::_Candles_default_instance_;
    new (ptr) ::tradingdb2pb::Candles();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tradingdb2pb::Candles::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Candles_tradingdb2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Candles_tradingdb2_2eproto}, {
      &scc_info_Candle_tradingdb2_2eproto.base,}};

static void InitDefaultsscc_info_ReplyGetCandles_tradingdb2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tradingdb2pb::_ReplyGetCandles_default_instance_;
    new (ptr) ::tradingdb2pb::ReplyGetCandles();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tradingdb2pb::ReplyGetCandles::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReplyGetCandles_tradingdb2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ReplyGetCandles_tradingdb2_2eproto}, {
      &scc_info_Candles_tradingdb2_2eproto.base,}};

static void InitDefaultsscc_info_ReplyUpdCandles_tradingdb2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tradingdb2pb::_ReplyUpdCandles_default_instance_;
    new (ptr) ::tradingdb2pb::ReplyUpdCandles();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tradingdb2pb::ReplyUpdCandles::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReplyUpdCandles_tradingdb2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ReplyUpdCandles_tradingdb2_2eproto}, {}};

static void InitDefaultsscc_info_RequestGetCandles_tradingdb2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tradingdb2pb::_RequestGetCandles_default_instance_;
    new (ptr) ::tradingdb2pb::RequestGetCandles();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tradingdb2pb::RequestGetCandles::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RequestGetCandles_tradingdb2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RequestGetCandles_tradingdb2_2eproto}, {}};

static void InitDefaultsscc_info_RequestUpdCandles_tradingdb2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tradingdb2pb::_RequestUpdCandles_default_instance_;
    new (ptr) ::tradingdb2pb::RequestUpdCandles();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tradingdb2pb::RequestUpdCandles::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RequestUpdCandles_tradingdb2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RequestUpdCandles_tradingdb2_2eproto}, {
      &scc_info_Candles_tradingdb2_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_tradingdb2_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_tradingdb2_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_tradingdb2_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_tradingdb2_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tradingdb2pb::Candle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tradingdb2pb::Candle, ts_),
  PROTOBUF_FIELD_OFFSET(::tradingdb2pb::Candle, open_),
  PROTOBUF_FIELD_OFFSET(::tradingdb2pb::Candle, close_),
  PROTOBUF_FIELD_OFFSET(::tradingdb2pb::Candle, high_),
  PROTOBUF_FIELD_OFFSET(::tradingdb2pb::Candle, low_),
  PROTOBUF_FIELD_OFFSET(::tradingdb2pb::Candle, volume_),
  PROTOBUF_FIELD_OFFSET(::tradingdb2pb::Candle, openinterest_),
  PROTOBUF_FIELD_OFFSET(::tradingdb2pb::Candle, trades_),
  PROTOBUF_FIELD_OFFSET(::tradingdb2pb::Candle, vwap_),
  PROTOBUF_FIELD_OFFSET(::tradingdb2pb::Candle, lastsize_),
  PROTOBUF_FIELD_OFFSET(::tradingdb2pb::Candle, turnover_),
  PROTOBUF_FIELD_OFFSET(::tradingdb2pb::Candle, homenotional_),
  PROTOBUF_FIELD_OFFSET(::tradingdb2pb::Candle, foreignnotional_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tradingdb2pb::Candles, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tradingdb2pb::Candles, market_),
  PROTOBUF_FIELD_OFFSET(::tradingdb2pb::Candles, symbol_),
  PROTOBUF_FIELD_OFFSET(::tradingdb2pb::Candles, tag_),
  PROTOBUF_FIELD_OFFSET(::tradingdb2pb::Candles, candles_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tradingdb2pb::RequestUpdCandles, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tradingdb2pb::RequestUpdCandles, token_),
  PROTOBUF_FIELD_OFFSET(::tradingdb2pb::RequestUpdCandles, candles_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tradingdb2pb::ReplyUpdCandles, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tradingdb2pb::ReplyUpdCandles, lengthok_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tradingdb2pb::RequestGetCandles, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tradingdb2pb::RequestGetCandles, token_),
  PROTOBUF_FIELD_OFFSET(::tradingdb2pb::RequestGetCandles, market_),
  PROTOBUF_FIELD_OFFSET(::tradingdb2pb::RequestGetCandles, symbol_),
  PROTOBUF_FIELD_OFFSET(::tradingdb2pb::RequestGetCandles, tag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tradingdb2pb::ReplyGetCandles, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tradingdb2pb::ReplyGetCandles, candles_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::tradingdb2pb::Candle)},
  { 18, -1, sizeof(::tradingdb2pb::Candles)},
  { 27, -1, sizeof(::tradingdb2pb::RequestUpdCandles)},
  { 34, -1, sizeof(::tradingdb2pb::ReplyUpdCandles)},
  { 40, -1, sizeof(::tradingdb2pb::RequestGetCandles)},
  { 49, -1, sizeof(::tradingdb2pb::ReplyGetCandles)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tradingdb2pb::_Candle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tradingdb2pb::_Candles_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tradingdb2pb::_RequestUpdCandles_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tradingdb2pb::_ReplyUpdCandles_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tradingdb2pb::_RequestGetCandles_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tradingdb2pb::_ReplyGetCandles_default_instance_),
};

const char descriptor_table_protodef_tradingdb2_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020tradingdb2.proto\022\014tradingdb2pb\"\343\001\n\006Can"
  "dle\022\n\n\002ts\030\001 \001(\003\022\014\n\004open\030\002 \001(\003\022\r\n\005close\030\003"
  " \001(\003\022\014\n\004high\030\004 \001(\003\022\013\n\003low\030\005 \001(\003\022\016\n\006volum"
  "e\030\006 \001(\003\022\024\n\014openInterest\030\007 \001(\003\022\016\n\006trades\030"
  "\010 \001(\003\022\014\n\004vwap\030\t \001(\001\022\020\n\010lastSize\030\n \001(\003\022\020\n"
  "\010turnover\030\013 \001(\003\022\024\n\014homeNotional\030\014 \001(\001\022\027\n"
  "\017foreignNotional\030\r \001(\001\"]\n\007Candles\022\016\n\006mar"
  "ket\030\001 \001(\t\022\016\n\006symbol\030\002 \001(\t\022\013\n\003tag\030\003 \001(\t\022%"
  "\n\007candles\030\004 \003(\0132\024.tradingdb2pb.Candle\"J\n"
  "\021RequestUpdCandles\022\r\n\005token\030\001 \001(\t\022&\n\007can"
  "dles\030\002 \001(\0132\025.tradingdb2pb.Candles\"#\n\017Rep"
  "lyUpdCandles\022\020\n\010lengthOK\030\001 \001(\005\"O\n\021Reques"
  "tGetCandles\022\r\n\005token\030\001 \001(\t\022\016\n\006market\030\002 \001"
  "(\t\022\016\n\006symbol\030\003 \001(\t\022\013\n\003tag\030\004 \001(\t\"9\n\017Reply"
  "GetCandles\022&\n\007candles\030\001 \001(\0132\025.tradingdb2"
  "pb.Candles2\267\001\n\021TradingDB2Service\022P\n\nupdC"
  "andles\022\037.tradingdb2pb.RequestUpdCandles\032"
  "\035.tradingdb2pb.ReplyUpdCandles\"\000(\001\022P\n\nge"
  "tCandles\022\037.tradingdb2pb.RequestGetCandle"
  "s\032\035.tradingdb2pb.ReplyGetCandles\"\0000\001B+Z)"
  "github.com/zhs007/tradingdb2/tradingdb2p"
  "bb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_tradingdb2_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_tradingdb2_2eproto_sccs[6] = {
  &scc_info_Candle_tradingdb2_2eproto.base,
  &scc_info_Candles_tradingdb2_2eproto.base,
  &scc_info_ReplyGetCandles_tradingdb2_2eproto.base,
  &scc_info_ReplyUpdCandles_tradingdb2_2eproto.base,
  &scc_info_RequestGetCandles_tradingdb2_2eproto.base,
  &scc_info_RequestUpdCandles_tradingdb2_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_tradingdb2_2eproto_once;
static bool descriptor_table_tradingdb2_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tradingdb2_2eproto = {
  &descriptor_table_tradingdb2_2eproto_initialized, descriptor_table_protodef_tradingdb2_2eproto, "tradingdb2.proto", 849,
  &descriptor_table_tradingdb2_2eproto_once, descriptor_table_tradingdb2_2eproto_sccs, descriptor_table_tradingdb2_2eproto_deps, 6, 0,
  schemas, file_default_instances, TableStruct_tradingdb2_2eproto::offsets,
  file_level_metadata_tradingdb2_2eproto, 6, file_level_enum_descriptors_tradingdb2_2eproto, file_level_service_descriptors_tradingdb2_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_tradingdb2_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_tradingdb2_2eproto), true);
namespace tradingdb2pb {

// ===================================================================

void Candle::InitAsDefaultInstance() {
}
class Candle::_Internal {
 public:
};

Candle::Candle()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tradingdb2pb.Candle)
}
Candle::Candle(const Candle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ts_, &from.ts_,
    static_cast<size_t>(reinterpret_cast<char*>(&foreignnotional_) -
    reinterpret_cast<char*>(&ts_)) + sizeof(foreignnotional_));
  // @@protoc_insertion_point(copy_constructor:tradingdb2pb.Candle)
}

void Candle::SharedCtor() {
  ::memset(&ts_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&foreignnotional_) -
      reinterpret_cast<char*>(&ts_)) + sizeof(foreignnotional_));
}

Candle::~Candle() {
  // @@protoc_insertion_point(destructor:tradingdb2pb.Candle)
  SharedDtor();
}

void Candle::SharedDtor() {
}

void Candle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Candle& Candle::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Candle_tradingdb2_2eproto.base);
  return *internal_default_instance();
}


void Candle::Clear() {
// @@protoc_insertion_point(message_clear_start:tradingdb2pb.Candle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&ts_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&foreignnotional_) -
      reinterpret_cast<char*>(&ts_)) + sizeof(foreignnotional_));
  _internal_metadata_.Clear();
}

const char* Candle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 ts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 open = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          open_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 close = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          close_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 high = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          high_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 low = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          low_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 volume = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 openInterest = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          openinterest_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 trades = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          trades_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double vwap = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          vwap_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int64 lastSize = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          lastsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 turnover = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          turnover_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double homeNotional = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          homenotional_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double foreignNotional = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          foreignnotional_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Candle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tradingdb2pb.Candle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 ts = 1;
  if (this->ts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_ts(), target);
  }

  // int64 open = 2;
  if (this->open() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_open(), target);
  }

  // int64 close = 3;
  if (this->close() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_close(), target);
  }

  // int64 high = 4;
  if (this->high() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_high(), target);
  }

  // int64 low = 5;
  if (this->low() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_low(), target);
  }

  // int64 volume = 6;
  if (this->volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_volume(), target);
  }

  // int64 openInterest = 7;
  if (this->openinterest() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_openinterest(), target);
  }

  // int64 trades = 8;
  if (this->trades() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_trades(), target);
  }

  // double vwap = 9;
  if (!(this->vwap() <= 0 && this->vwap() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_vwap(), target);
  }

  // int64 lastSize = 10;
  if (this->lastsize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(10, this->_internal_lastsize(), target);
  }

  // int64 turnover = 11;
  if (this->turnover() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(11, this->_internal_turnover(), target);
  }

  // double homeNotional = 12;
  if (!(this->homenotional() <= 0 && this->homenotional() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_homenotional(), target);
  }

  // double foreignNotional = 13;
  if (!(this->foreignnotional() <= 0 && this->foreignnotional() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->_internal_foreignnotional(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tradingdb2pb.Candle)
  return target;
}

size_t Candle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tradingdb2pb.Candle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 ts = 1;
  if (this->ts() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ts());
  }

  // int64 open = 2;
  if (this->open() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_open());
  }

  // int64 close = 3;
  if (this->close() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_close());
  }

  // int64 high = 4;
  if (this->high() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_high());
  }

  // int64 low = 5;
  if (this->low() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_low());
  }

  // int64 volume = 6;
  if (this->volume() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_volume());
  }

  // int64 openInterest = 7;
  if (this->openinterest() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_openinterest());
  }

  // int64 trades = 8;
  if (this->trades() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_trades());
  }

  // double vwap = 9;
  if (!(this->vwap() <= 0 && this->vwap() >= 0)) {
    total_size += 1 + 8;
  }

  // int64 lastSize = 10;
  if (this->lastsize() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_lastsize());
  }

  // int64 turnover = 11;
  if (this->turnover() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_turnover());
  }

  // double homeNotional = 12;
  if (!(this->homenotional() <= 0 && this->homenotional() >= 0)) {
    total_size += 1 + 8;
  }

  // double foreignNotional = 13;
  if (!(this->foreignnotional() <= 0 && this->foreignnotional() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Candle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tradingdb2pb.Candle)
  GOOGLE_DCHECK_NE(&from, this);
  const Candle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Candle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tradingdb2pb.Candle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tradingdb2pb.Candle)
    MergeFrom(*source);
  }
}

void Candle::MergeFrom(const Candle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tradingdb2pb.Candle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ts() != 0) {
    _internal_set_ts(from._internal_ts());
  }
  if (from.open() != 0) {
    _internal_set_open(from._internal_open());
  }
  if (from.close() != 0) {
    _internal_set_close(from._internal_close());
  }
  if (from.high() != 0) {
    _internal_set_high(from._internal_high());
  }
  if (from.low() != 0) {
    _internal_set_low(from._internal_low());
  }
  if (from.volume() != 0) {
    _internal_set_volume(from._internal_volume());
  }
  if (from.openinterest() != 0) {
    _internal_set_openinterest(from._internal_openinterest());
  }
  if (from.trades() != 0) {
    _internal_set_trades(from._internal_trades());
  }
  if (!(from.vwap() <= 0 && from.vwap() >= 0)) {
    _internal_set_vwap(from._internal_vwap());
  }
  if (from.lastsize() != 0) {
    _internal_set_lastsize(from._internal_lastsize());
  }
  if (from.turnover() != 0) {
    _internal_set_turnover(from._internal_turnover());
  }
  if (!(from.homenotional() <= 0 && from.homenotional() >= 0)) {
    _internal_set_homenotional(from._internal_homenotional());
  }
  if (!(from.foreignnotional() <= 0 && from.foreignnotional() >= 0)) {
    _internal_set_foreignnotional(from._internal_foreignnotional());
  }
}

void Candle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tradingdb2pb.Candle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Candle::CopyFrom(const Candle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tradingdb2pb.Candle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Candle::IsInitialized() const {
  return true;
}

void Candle::InternalSwap(Candle* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(ts_, other->ts_);
  swap(open_, other->open_);
  swap(close_, other->close_);
  swap(high_, other->high_);
  swap(low_, other->low_);
  swap(volume_, other->volume_);
  swap(openinterest_, other->openinterest_);
  swap(trades_, other->trades_);
  swap(vwap_, other->vwap_);
  swap(lastsize_, other->lastsize_);
  swap(turnover_, other->turnover_);
  swap(homenotional_, other->homenotional_);
  swap(foreignnotional_, other->foreignnotional_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Candle::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Candles::InitAsDefaultInstance() {
}
class Candles::_Internal {
 public:
};

Candles::Candles()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tradingdb2pb.Candles)
}
Candles::Candles(const Candles& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      candles_(from.candles_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  market_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_market().empty()) {
    market_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.market_);
  }
  symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_symbol().empty()) {
    symbol_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tag().empty()) {
    tag_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tag_);
  }
  // @@protoc_insertion_point(copy_constructor:tradingdb2pb.Candles)
}

void Candles::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Candles_tradingdb2_2eproto.base);
  market_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Candles::~Candles() {
  // @@protoc_insertion_point(destructor:tradingdb2pb.Candles)
  SharedDtor();
}

void Candles::SharedDtor() {
  market_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  symbol_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Candles::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Candles& Candles::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Candles_tradingdb2_2eproto.base);
  return *internal_default_instance();
}


void Candles::Clear() {
// @@protoc_insertion_point(message_clear_start:tradingdb2pb.Candles)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  candles_.Clear();
  market_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  symbol_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tag_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* Candles::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string market = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_market();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tradingdb2pb.Candles.market"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string symbol = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_symbol();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tradingdb2pb.Candles.symbol"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string tag = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_tag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tradingdb2pb.Candles.tag"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .tradingdb2pb.Candle candles = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_candles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Candles::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tradingdb2pb.Candles)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string market = 1;
  if (this->market().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_market().data(), static_cast<int>(this->_internal_market().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tradingdb2pb.Candles.market");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_market(), target);
  }

  // string symbol = 2;
  if (this->symbol().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_symbol().data(), static_cast<int>(this->_internal_symbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tradingdb2pb.Candles.symbol");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_symbol(), target);
  }

  // string tag = 3;
  if (this->tag().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tag().data(), static_cast<int>(this->_internal_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tradingdb2pb.Candles.tag");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_tag(), target);
  }

  // repeated .tradingdb2pb.Candle candles = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_candles_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_candles(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tradingdb2pb.Candles)
  return target;
}

size_t Candles::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tradingdb2pb.Candles)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tradingdb2pb.Candle candles = 4;
  total_size += 1UL * this->_internal_candles_size();
  for (const auto& msg : this->candles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string market = 1;
  if (this->market().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_market());
  }

  // string symbol = 2;
  if (this->symbol().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_symbol());
  }

  // string tag = 3;
  if (this->tag().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tag());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Candles::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tradingdb2pb.Candles)
  GOOGLE_DCHECK_NE(&from, this);
  const Candles* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Candles>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tradingdb2pb.Candles)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tradingdb2pb.Candles)
    MergeFrom(*source);
  }
}

void Candles::MergeFrom(const Candles& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tradingdb2pb.Candles)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  candles_.MergeFrom(from.candles_);
  if (from.market().size() > 0) {

    market_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.market_);
  }
  if (from.symbol().size() > 0) {

    symbol_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
  if (from.tag().size() > 0) {

    tag_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tag_);
  }
}

void Candles::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tradingdb2pb.Candles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Candles::CopyFrom(const Candles& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tradingdb2pb.Candles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Candles::IsInitialized() const {
  return true;
}

void Candles::InternalSwap(Candles* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  candles_.InternalSwap(&other->candles_);
  market_.Swap(&other->market_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  symbol_.Swap(&other->symbol_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  tag_.Swap(&other->tag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata Candles::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RequestUpdCandles::InitAsDefaultInstance() {
  ::tradingdb2pb::_RequestUpdCandles_default_instance_._instance.get_mutable()->candles_ = const_cast< ::tradingdb2pb::Candles*>(
      ::tradingdb2pb::Candles::internal_default_instance());
}
class RequestUpdCandles::_Internal {
 public:
  static const ::tradingdb2pb::Candles& candles(const RequestUpdCandles* msg);
};

const ::tradingdb2pb::Candles&
RequestUpdCandles::_Internal::candles(const RequestUpdCandles* msg) {
  return *msg->candles_;
}
RequestUpdCandles::RequestUpdCandles()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tradingdb2pb.RequestUpdCandles)
}
RequestUpdCandles::RequestUpdCandles(const RequestUpdCandles& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from._internal_has_candles()) {
    candles_ = new ::tradingdb2pb::Candles(*from.candles_);
  } else {
    candles_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:tradingdb2pb.RequestUpdCandles)
}

void RequestUpdCandles::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RequestUpdCandles_tradingdb2_2eproto.base);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  candles_ = nullptr;
}

RequestUpdCandles::~RequestUpdCandles() {
  // @@protoc_insertion_point(destructor:tradingdb2pb.RequestUpdCandles)
  SharedDtor();
}

void RequestUpdCandles::SharedDtor() {
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete candles_;
}

void RequestUpdCandles::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RequestUpdCandles& RequestUpdCandles::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RequestUpdCandles_tradingdb2_2eproto.base);
  return *internal_default_instance();
}


void RequestUpdCandles::Clear() {
// @@protoc_insertion_point(message_clear_start:tradingdb2pb.RequestUpdCandles)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && candles_ != nullptr) {
    delete candles_;
  }
  candles_ = nullptr;
  _internal_metadata_.Clear();
}

const char* RequestUpdCandles::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tradingdb2pb.RequestUpdCandles.token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tradingdb2pb.Candles candles = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_candles(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RequestUpdCandles::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tradingdb2pb.RequestUpdCandles)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tradingdb2pb.RequestUpdCandles.token");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_token(), target);
  }

  // .tradingdb2pb.Candles candles = 2;
  if (this->has_candles()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::candles(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tradingdb2pb.RequestUpdCandles)
  return target;
}

size_t RequestUpdCandles::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tradingdb2pb.RequestUpdCandles)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  // .tradingdb2pb.Candles candles = 2;
  if (this->has_candles()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *candles_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestUpdCandles::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tradingdb2pb.RequestUpdCandles)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestUpdCandles* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RequestUpdCandles>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tradingdb2pb.RequestUpdCandles)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tradingdb2pb.RequestUpdCandles)
    MergeFrom(*source);
  }
}

void RequestUpdCandles::MergeFrom(const RequestUpdCandles& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tradingdb2pb.RequestUpdCandles)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.has_candles()) {
    _internal_mutable_candles()->::tradingdb2pb::Candles::MergeFrom(from._internal_candles());
  }
}

void RequestUpdCandles::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tradingdb2pb.RequestUpdCandles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestUpdCandles::CopyFrom(const RequestUpdCandles& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tradingdb2pb.RequestUpdCandles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestUpdCandles::IsInitialized() const {
  return true;
}

void RequestUpdCandles::InternalSwap(RequestUpdCandles* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(candles_, other->candles_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestUpdCandles::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReplyUpdCandles::InitAsDefaultInstance() {
}
class ReplyUpdCandles::_Internal {
 public:
};

ReplyUpdCandles::ReplyUpdCandles()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tradingdb2pb.ReplyUpdCandles)
}
ReplyUpdCandles::ReplyUpdCandles(const ReplyUpdCandles& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  lengthok_ = from.lengthok_;
  // @@protoc_insertion_point(copy_constructor:tradingdb2pb.ReplyUpdCandles)
}

void ReplyUpdCandles::SharedCtor() {
  lengthok_ = 0;
}

ReplyUpdCandles::~ReplyUpdCandles() {
  // @@protoc_insertion_point(destructor:tradingdb2pb.ReplyUpdCandles)
  SharedDtor();
}

void ReplyUpdCandles::SharedDtor() {
}

void ReplyUpdCandles::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReplyUpdCandles& ReplyUpdCandles::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReplyUpdCandles_tradingdb2_2eproto.base);
  return *internal_default_instance();
}


void ReplyUpdCandles::Clear() {
// @@protoc_insertion_point(message_clear_start:tradingdb2pb.ReplyUpdCandles)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lengthok_ = 0;
  _internal_metadata_.Clear();
}

const char* ReplyUpdCandles::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 lengthOK = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          lengthok_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReplyUpdCandles::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tradingdb2pb.ReplyUpdCandles)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 lengthOK = 1;
  if (this->lengthok() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_lengthok(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tradingdb2pb.ReplyUpdCandles)
  return target;
}

size_t ReplyUpdCandles::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tradingdb2pb.ReplyUpdCandles)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 lengthOK = 1;
  if (this->lengthok() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lengthok());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReplyUpdCandles::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tradingdb2pb.ReplyUpdCandles)
  GOOGLE_DCHECK_NE(&from, this);
  const ReplyUpdCandles* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReplyUpdCandles>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tradingdb2pb.ReplyUpdCandles)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tradingdb2pb.ReplyUpdCandles)
    MergeFrom(*source);
  }
}

void ReplyUpdCandles::MergeFrom(const ReplyUpdCandles& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tradingdb2pb.ReplyUpdCandles)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.lengthok() != 0) {
    _internal_set_lengthok(from._internal_lengthok());
  }
}

void ReplyUpdCandles::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tradingdb2pb.ReplyUpdCandles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplyUpdCandles::CopyFrom(const ReplyUpdCandles& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tradingdb2pb.ReplyUpdCandles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplyUpdCandles::IsInitialized() const {
  return true;
}

void ReplyUpdCandles::InternalSwap(ReplyUpdCandles* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(lengthok_, other->lengthok_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReplyUpdCandles::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RequestGetCandles::InitAsDefaultInstance() {
}
class RequestGetCandles::_Internal {
 public:
};

RequestGetCandles::RequestGetCandles()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tradingdb2pb.RequestGetCandles)
}
RequestGetCandles::RequestGetCandles(const RequestGetCandles& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  market_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_market().empty()) {
    market_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.market_);
  }
  symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_symbol().empty()) {
    symbol_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tag().empty()) {
    tag_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tag_);
  }
  // @@protoc_insertion_point(copy_constructor:tradingdb2pb.RequestGetCandles)
}

void RequestGetCandles::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RequestGetCandles_tradingdb2_2eproto.base);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  market_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RequestGetCandles::~RequestGetCandles() {
  // @@protoc_insertion_point(destructor:tradingdb2pb.RequestGetCandles)
  SharedDtor();
}

void RequestGetCandles::SharedDtor() {
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  market_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  symbol_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RequestGetCandles::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RequestGetCandles& RequestGetCandles::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RequestGetCandles_tradingdb2_2eproto.base);
  return *internal_default_instance();
}


void RequestGetCandles::Clear() {
// @@protoc_insertion_point(message_clear_start:tradingdb2pb.RequestGetCandles)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  market_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  symbol_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tag_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* RequestGetCandles::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tradingdb2pb.RequestGetCandles.token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string market = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_market();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tradingdb2pb.RequestGetCandles.market"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string symbol = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_symbol();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tradingdb2pb.RequestGetCandles.symbol"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string tag = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_tag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tradingdb2pb.RequestGetCandles.tag"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RequestGetCandles::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tradingdb2pb.RequestGetCandles)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tradingdb2pb.RequestGetCandles.token");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_token(), target);
  }

  // string market = 2;
  if (this->market().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_market().data(), static_cast<int>(this->_internal_market().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tradingdb2pb.RequestGetCandles.market");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_market(), target);
  }

  // string symbol = 3;
  if (this->symbol().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_symbol().data(), static_cast<int>(this->_internal_symbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tradingdb2pb.RequestGetCandles.symbol");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_symbol(), target);
  }

  // string tag = 4;
  if (this->tag().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tag().data(), static_cast<int>(this->_internal_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tradingdb2pb.RequestGetCandles.tag");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_tag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tradingdb2pb.RequestGetCandles)
  return target;
}

size_t RequestGetCandles::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tradingdb2pb.RequestGetCandles)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  // string market = 2;
  if (this->market().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_market());
  }

  // string symbol = 3;
  if (this->symbol().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_symbol());
  }

  // string tag = 4;
  if (this->tag().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tag());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestGetCandles::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tradingdb2pb.RequestGetCandles)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestGetCandles* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RequestGetCandles>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tradingdb2pb.RequestGetCandles)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tradingdb2pb.RequestGetCandles)
    MergeFrom(*source);
  }
}

void RequestGetCandles::MergeFrom(const RequestGetCandles& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tradingdb2pb.RequestGetCandles)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.market().size() > 0) {

    market_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.market_);
  }
  if (from.symbol().size() > 0) {

    symbol_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
  if (from.tag().size() > 0) {

    tag_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tag_);
  }
}

void RequestGetCandles::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tradingdb2pb.RequestGetCandles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestGetCandles::CopyFrom(const RequestGetCandles& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tradingdb2pb.RequestGetCandles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestGetCandles::IsInitialized() const {
  return true;
}

void RequestGetCandles::InternalSwap(RequestGetCandles* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  market_.Swap(&other->market_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  symbol_.Swap(&other->symbol_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  tag_.Swap(&other->tag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestGetCandles::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReplyGetCandles::InitAsDefaultInstance() {
  ::tradingdb2pb::_ReplyGetCandles_default_instance_._instance.get_mutable()->candles_ = const_cast< ::tradingdb2pb::Candles*>(
      ::tradingdb2pb::Candles::internal_default_instance());
}
class ReplyGetCandles::_Internal {
 public:
  static const ::tradingdb2pb::Candles& candles(const ReplyGetCandles* msg);
};

const ::tradingdb2pb::Candles&
ReplyGetCandles::_Internal::candles(const ReplyGetCandles* msg) {
  return *msg->candles_;
}
ReplyGetCandles::ReplyGetCandles()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tradingdb2pb.ReplyGetCandles)
}
ReplyGetCandles::ReplyGetCandles(const ReplyGetCandles& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_candles()) {
    candles_ = new ::tradingdb2pb::Candles(*from.candles_);
  } else {
    candles_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:tradingdb2pb.ReplyGetCandles)
}

void ReplyGetCandles::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReplyGetCandles_tradingdb2_2eproto.base);
  candles_ = nullptr;
}

ReplyGetCandles::~ReplyGetCandles() {
  // @@protoc_insertion_point(destructor:tradingdb2pb.ReplyGetCandles)
  SharedDtor();
}

void ReplyGetCandles::SharedDtor() {
  if (this != internal_default_instance()) delete candles_;
}

void ReplyGetCandles::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReplyGetCandles& ReplyGetCandles::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReplyGetCandles_tradingdb2_2eproto.base);
  return *internal_default_instance();
}


void ReplyGetCandles::Clear() {
// @@protoc_insertion_point(message_clear_start:tradingdb2pb.ReplyGetCandles)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && candles_ != nullptr) {
    delete candles_;
  }
  candles_ = nullptr;
  _internal_metadata_.Clear();
}

const char* ReplyGetCandles::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .tradingdb2pb.Candles candles = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_candles(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReplyGetCandles::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tradingdb2pb.ReplyGetCandles)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tradingdb2pb.Candles candles = 1;
  if (this->has_candles()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::candles(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tradingdb2pb.ReplyGetCandles)
  return target;
}

size_t ReplyGetCandles::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tradingdb2pb.ReplyGetCandles)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tradingdb2pb.Candles candles = 1;
  if (this->has_candles()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *candles_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReplyGetCandles::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tradingdb2pb.ReplyGetCandles)
  GOOGLE_DCHECK_NE(&from, this);
  const ReplyGetCandles* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReplyGetCandles>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tradingdb2pb.ReplyGetCandles)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tradingdb2pb.ReplyGetCandles)
    MergeFrom(*source);
  }
}

void ReplyGetCandles::MergeFrom(const ReplyGetCandles& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tradingdb2pb.ReplyGetCandles)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_candles()) {
    _internal_mutable_candles()->::tradingdb2pb::Candles::MergeFrom(from._internal_candles());
  }
}

void ReplyGetCandles::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tradingdb2pb.ReplyGetCandles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplyGetCandles::CopyFrom(const ReplyGetCandles& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tradingdb2pb.ReplyGetCandles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplyGetCandles::IsInitialized() const {
  return true;
}

void ReplyGetCandles::InternalSwap(ReplyGetCandles* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(candles_, other->candles_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReplyGetCandles::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace tradingdb2pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tradingdb2pb::Candle* Arena::CreateMaybeMessage< ::tradingdb2pb::Candle >(Arena* arena) {
  return Arena::CreateInternal< ::tradingdb2pb::Candle >(arena);
}
template<> PROTOBUF_NOINLINE ::tradingdb2pb::Candles* Arena::CreateMaybeMessage< ::tradingdb2pb::Candles >(Arena* arena) {
  return Arena::CreateInternal< ::tradingdb2pb::Candles >(arena);
}
template<> PROTOBUF_NOINLINE ::tradingdb2pb::RequestUpdCandles* Arena::CreateMaybeMessage< ::tradingdb2pb::RequestUpdCandles >(Arena* arena) {
  return Arena::CreateInternal< ::tradingdb2pb::RequestUpdCandles >(arena);
}
template<> PROTOBUF_NOINLINE ::tradingdb2pb::ReplyUpdCandles* Arena::CreateMaybeMessage< ::tradingdb2pb::ReplyUpdCandles >(Arena* arena) {
  return Arena::CreateInternal< ::tradingdb2pb::ReplyUpdCandles >(arena);
}
template<> PROTOBUF_NOINLINE ::tradingdb2pb::RequestGetCandles* Arena::CreateMaybeMessage< ::tradingdb2pb::RequestGetCandles >(Arena* arena) {
  return Arena::CreateInternal< ::tradingdb2pb::RequestGetCandles >(arena);
}
template<> PROTOBUF_NOINLINE ::tradingdb2pb::ReplyGetCandles* Arena::CreateMaybeMessage< ::tradingdb2pb::ReplyGetCandles >(Arena* arena) {
  return Arena::CreateInternal< ::tradingdb2pb::ReplyGetCandles >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tradingcore2.proto

#ifndef PROTOBUF_tradingcore2_2eproto__INCLUDED
#define PROTOBUF_tradingcore2_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_tradingcore2_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsTrainDataImpl();
void InitDefaultsTrainData();
void InitDefaultsTrainResultImpl();
void InitDefaultsTrainResult();
inline void InitDefaults() {
  InitDefaultsTrainData();
  InitDefaultsTrainResult();
}
}  // namespace protobuf_tradingcore2_2eproto
namespace tradingcore2 {
class TrainData;
class TrainDataDefaultTypeInternal;
extern TrainDataDefaultTypeInternal _TrainData_default_instance_;
class TrainResult;
class TrainResultDefaultTypeInternal;
extern TrainResultDefaultTypeInternal _TrainResult_default_instance_;
}  // namespace tradingcore2
namespace google {
namespace protobuf {
template<> ::tradingcore2::TrainData* Arena::Create< ::tradingcore2::TrainData>(Arena*);
template<> ::tradingcore2::TrainResult* Arena::Create< ::tradingcore2::TrainResult>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace tradingcore2 {

// ===================================================================

class TrainData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tradingcore2.TrainData) */ {
 public:
  TrainData();
  virtual ~TrainData();

  TrainData(const TrainData& from);

  inline TrainData& operator=(const TrainData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TrainData(TrainData&& from) noexcept
    : TrainData() {
    *this = ::std::move(from);
  }

  inline TrainData& operator=(TrainData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TrainData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrainData* internal_default_instance() {
    return reinterpret_cast<const TrainData*>(
               &_TrainData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(TrainData* other);
  friend void swap(TrainData& a, TrainData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TrainData* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<TrainData>(NULL);
  }

  TrainData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<TrainData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TrainData& from);
  void MergeFrom(const TrainData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TrainData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string exchangeName = 2;
  void clear_exchangename();
  static const int kExchangeNameFieldNumber = 2;
  const ::std::string& exchangename() const;
  void set_exchangename(const ::std::string& value);
  #if LANG_CXX11
  void set_exchangename(::std::string&& value);
  #endif
  void set_exchangename(const char* value);
  void set_exchangename(const char* value, size_t size);
  ::std::string* mutable_exchangename();
  ::std::string* release_exchangename();
  void set_allocated_exchangename(::std::string* exchangename);

  // string assetsName = 3;
  void clear_assetsname();
  static const int kAssetsNameFieldNumber = 3;
  const ::std::string& assetsname() const;
  void set_assetsname(const ::std::string& value);
  #if LANG_CXX11
  void set_assetsname(::std::string&& value);
  #endif
  void set_assetsname(const char* value);
  void set_assetsname(const char* value, size_t size);
  ::std::string* mutable_assetsname();
  ::std::string* release_assetsname();
  void set_allocated_assetsname(::std::string* assetsname);

  // string strategyName = 4;
  void clear_strategyname();
  static const int kStrategyNameFieldNumber = 4;
  const ::std::string& strategyname() const;
  void set_strategyname(const ::std::string& value);
  #if LANG_CXX11
  void set_strategyname(::std::string&& value);
  #endif
  void set_strategyname(const char* value);
  void set_strategyname(const char* value, size_t size);
  ::std::string* mutable_strategyname();
  ::std::string* release_strategyname();
  void set_allocated_strategyname(::std::string* strategyname);

  // string strParam = 5;
  void clear_strparam();
  static const int kStrParamFieldNumber = 5;
  const ::std::string& strparam() const;
  void set_strparam(const ::std::string& value);
  #if LANG_CXX11
  void set_strparam(::std::string&& value);
  #endif
  void set_strparam(const char* value);
  void set_strparam(const char* value, size_t size);
  ::std::string* mutable_strparam();
  ::std::string* release_strparam();
  void set_allocated_strparam(::std::string* strparam);

  // int64 trainID = 1;
  void clear_trainid();
  static const int kTrainIDFieldNumber = 1;
  ::google::protobuf::int64 trainid() const;
  void set_trainid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:tradingcore2.TrainData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr exchangename_;
  ::google::protobuf::internal::ArenaStringPtr assetsname_;
  ::google::protobuf::internal::ArenaStringPtr strategyname_;
  ::google::protobuf::internal::ArenaStringPtr strparam_;
  ::google::protobuf::int64 trainid_;
  mutable int _cached_size_;
  friend struct ::protobuf_tradingcore2_2eproto::TableStruct;
  friend void ::protobuf_tradingcore2_2eproto::InitDefaultsTrainDataImpl();
};
// -------------------------------------------------------------------

class TrainResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tradingcore2.TrainResult) */ {
 public:
  TrainResult();
  virtual ~TrainResult();

  TrainResult(const TrainResult& from);

  inline TrainResult& operator=(const TrainResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TrainResult(TrainResult&& from) noexcept
    : TrainResult() {
    *this = ::std::move(from);
  }

  inline TrainResult& operator=(TrainResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TrainResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrainResult* internal_default_instance() {
    return reinterpret_cast<const TrainResult*>(
               &_TrainResult_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(TrainResult* other);
  friend void swap(TrainResult& a, TrainResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TrainResult* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<TrainResult>(NULL);
  }

  TrainResult* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<TrainResult>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TrainResult& from);
  void MergeFrom(const TrainResult& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TrainResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string exchangeName = 11;
  void clear_exchangename();
  static const int kExchangeNameFieldNumber = 11;
  const ::std::string& exchangename() const;
  void set_exchangename(const ::std::string& value);
  #if LANG_CXX11
  void set_exchangename(::std::string&& value);
  #endif
  void set_exchangename(const char* value);
  void set_exchangename(const char* value, size_t size);
  ::std::string* mutable_exchangename();
  ::std::string* release_exchangename();
  void set_allocated_exchangename(::std::string* exchangename);

  // string assetsName = 12;
  void clear_assetsname();
  static const int kAssetsNameFieldNumber = 12;
  const ::std::string& assetsname() const;
  void set_assetsname(const ::std::string& value);
  #if LANG_CXX11
  void set_assetsname(::std::string&& value);
  #endif
  void set_assetsname(const char* value);
  void set_assetsname(const char* value, size_t size);
  ::std::string* mutable_assetsname();
  ::std::string* release_assetsname();
  void set_allocated_assetsname(::std::string* assetsname);

  // string strategyName = 13;
  void clear_strategyname();
  static const int kStrategyNameFieldNumber = 13;
  const ::std::string& strategyname() const;
  void set_strategyname(const ::std::string& value);
  #if LANG_CXX11
  void set_strategyname(::std::string&& value);
  #endif
  void set_strategyname(const char* value);
  void set_strategyname(const char* value, size_t size);
  ::std::string* mutable_strategyname();
  ::std::string* release_strategyname();
  void set_allocated_strategyname(::std::string* strategyname);

  // string strParam = 14;
  void clear_strparam();
  static const int kStrParamFieldNumber = 14;
  const ::std::string& strparam() const;
  void set_strparam(const ::std::string& value);
  #if LANG_CXX11
  void set_strparam(::std::string&& value);
  #endif
  void set_strparam(const char* value);
  void set_strparam(const char* value, size_t size);
  ::std::string* mutable_strparam();
  ::std::string* release_strparam();
  void set_allocated_strparam(::std::string* strparam);

  // int64 trainID = 1;
  void clear_trainid();
  static const int kTrainIDFieldNumber = 1;
  ::google::protobuf::int64 trainid() const;
  void set_trainid(::google::protobuf::int64 value);

  // float maxDrawdown = 2;
  void clear_maxdrawdown();
  static const int kMaxDrawdownFieldNumber = 2;
  float maxdrawdown() const;
  void set_maxdrawdown(float value);

  // float sharpe = 3;
  void clear_sharpe();
  static const int kSharpeFieldNumber = 3;
  float sharpe() const;
  void set_sharpe(float value);

  // float annualizedReturns = 4;
  void clear_annualizedreturns();
  static const int kAnnualizedReturnsFieldNumber = 4;
  float annualizedreturns() const;
  void set_annualizedreturns(float value);

  // float annualizedVolatility = 5;
  void clear_annualizedvolatility();
  static const int kAnnualizedVolatilityFieldNumber = 5;
  float annualizedvolatility() const;
  void set_annualizedvolatility(float value);

  // float totalReturns = 6;
  void clear_totalreturns();
  static const int kTotalReturnsFieldNumber = 6;
  float totalreturns() const;
  void set_totalreturns(float value);

  // int32 tradingTimes = 7;
  void clear_tradingtimes();
  static const int kTradingTimesFieldNumber = 7;
  ::google::protobuf::int32 tradingtimes() const;
  void set_tradingtimes(::google::protobuf::int32 value);

  // int32 failTimes = 8;
  void clear_failtimes();
  static const int kFailTimesFieldNumber = 8;
  ::google::protobuf::int32 failtimes() const;
  void set_failtimes(::google::protobuf::int32 value);

  // int32 stoplossTimes = 9;
  void clear_stoplosstimes();
  static const int kStoplossTimesFieldNumber = 9;
  ::google::protobuf::int32 stoplosstimes() const;
  void set_stoplosstimes(::google::protobuf::int32 value);

  // float winRate = 10;
  void clear_winrate();
  static const int kWinRateFieldNumber = 10;
  float winrate() const;
  void set_winrate(float value);

  // @@protoc_insertion_point(class_scope:tradingcore2.TrainResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr exchangename_;
  ::google::protobuf::internal::ArenaStringPtr assetsname_;
  ::google::protobuf::internal::ArenaStringPtr strategyname_;
  ::google::protobuf::internal::ArenaStringPtr strparam_;
  ::google::protobuf::int64 trainid_;
  float maxdrawdown_;
  float sharpe_;
  float annualizedreturns_;
  float annualizedvolatility_;
  float totalreturns_;
  ::google::protobuf::int32 tradingtimes_;
  ::google::protobuf::int32 failtimes_;
  ::google::protobuf::int32 stoplosstimes_;
  float winrate_;
  mutable int _cached_size_;
  friend struct ::protobuf_tradingcore2_2eproto::TableStruct;
  friend void ::protobuf_tradingcore2_2eproto::InitDefaultsTrainResultImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TrainData

// int64 trainID = 1;
inline void TrainData::clear_trainid() {
  trainid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 TrainData::trainid() const {
  // @@protoc_insertion_point(field_get:tradingcore2.TrainData.trainID)
  return trainid_;
}
inline void TrainData::set_trainid(::google::protobuf::int64 value) {
  
  trainid_ = value;
  // @@protoc_insertion_point(field_set:tradingcore2.TrainData.trainID)
}

// string exchangeName = 2;
inline void TrainData::clear_exchangename() {
  exchangename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TrainData::exchangename() const {
  // @@protoc_insertion_point(field_get:tradingcore2.TrainData.exchangeName)
  return exchangename_.GetNoArena();
}
inline void TrainData::set_exchangename(const ::std::string& value) {
  
  exchangename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tradingcore2.TrainData.exchangeName)
}
#if LANG_CXX11
inline void TrainData::set_exchangename(::std::string&& value) {
  
  exchangename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tradingcore2.TrainData.exchangeName)
}
#endif
inline void TrainData::set_exchangename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  exchangename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tradingcore2.TrainData.exchangeName)
}
inline void TrainData::set_exchangename(const char* value, size_t size) {
  
  exchangename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tradingcore2.TrainData.exchangeName)
}
inline ::std::string* TrainData::mutable_exchangename() {
  
  // @@protoc_insertion_point(field_mutable:tradingcore2.TrainData.exchangeName)
  return exchangename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TrainData::release_exchangename() {
  // @@protoc_insertion_point(field_release:tradingcore2.TrainData.exchangeName)
  
  return exchangename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TrainData::set_allocated_exchangename(::std::string* exchangename) {
  if (exchangename != NULL) {
    
  } else {
    
  }
  exchangename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchangename);
  // @@protoc_insertion_point(field_set_allocated:tradingcore2.TrainData.exchangeName)
}

// string assetsName = 3;
inline void TrainData::clear_assetsname() {
  assetsname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TrainData::assetsname() const {
  // @@protoc_insertion_point(field_get:tradingcore2.TrainData.assetsName)
  return assetsname_.GetNoArena();
}
inline void TrainData::set_assetsname(const ::std::string& value) {
  
  assetsname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tradingcore2.TrainData.assetsName)
}
#if LANG_CXX11
inline void TrainData::set_assetsname(::std::string&& value) {
  
  assetsname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tradingcore2.TrainData.assetsName)
}
#endif
inline void TrainData::set_assetsname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  assetsname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tradingcore2.TrainData.assetsName)
}
inline void TrainData::set_assetsname(const char* value, size_t size) {
  
  assetsname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tradingcore2.TrainData.assetsName)
}
inline ::std::string* TrainData::mutable_assetsname() {
  
  // @@protoc_insertion_point(field_mutable:tradingcore2.TrainData.assetsName)
  return assetsname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TrainData::release_assetsname() {
  // @@protoc_insertion_point(field_release:tradingcore2.TrainData.assetsName)
  
  return assetsname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TrainData::set_allocated_assetsname(::std::string* assetsname) {
  if (assetsname != NULL) {
    
  } else {
    
  }
  assetsname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), assetsname);
  // @@protoc_insertion_point(field_set_allocated:tradingcore2.TrainData.assetsName)
}

// string strategyName = 4;
inline void TrainData::clear_strategyname() {
  strategyname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TrainData::strategyname() const {
  // @@protoc_insertion_point(field_get:tradingcore2.TrainData.strategyName)
  return strategyname_.GetNoArena();
}
inline void TrainData::set_strategyname(const ::std::string& value) {
  
  strategyname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tradingcore2.TrainData.strategyName)
}
#if LANG_CXX11
inline void TrainData::set_strategyname(::std::string&& value) {
  
  strategyname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tradingcore2.TrainData.strategyName)
}
#endif
inline void TrainData::set_strategyname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  strategyname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tradingcore2.TrainData.strategyName)
}
inline void TrainData::set_strategyname(const char* value, size_t size) {
  
  strategyname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tradingcore2.TrainData.strategyName)
}
inline ::std::string* TrainData::mutable_strategyname() {
  
  // @@protoc_insertion_point(field_mutable:tradingcore2.TrainData.strategyName)
  return strategyname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TrainData::release_strategyname() {
  // @@protoc_insertion_point(field_release:tradingcore2.TrainData.strategyName)
  
  return strategyname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TrainData::set_allocated_strategyname(::std::string* strategyname) {
  if (strategyname != NULL) {
    
  } else {
    
  }
  strategyname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strategyname);
  // @@protoc_insertion_point(field_set_allocated:tradingcore2.TrainData.strategyName)
}

// string strParam = 5;
inline void TrainData::clear_strparam() {
  strparam_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TrainData::strparam() const {
  // @@protoc_insertion_point(field_get:tradingcore2.TrainData.strParam)
  return strparam_.GetNoArena();
}
inline void TrainData::set_strparam(const ::std::string& value) {
  
  strparam_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tradingcore2.TrainData.strParam)
}
#if LANG_CXX11
inline void TrainData::set_strparam(::std::string&& value) {
  
  strparam_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tradingcore2.TrainData.strParam)
}
#endif
inline void TrainData::set_strparam(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  strparam_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tradingcore2.TrainData.strParam)
}
inline void TrainData::set_strparam(const char* value, size_t size) {
  
  strparam_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tradingcore2.TrainData.strParam)
}
inline ::std::string* TrainData::mutable_strparam() {
  
  // @@protoc_insertion_point(field_mutable:tradingcore2.TrainData.strParam)
  return strparam_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TrainData::release_strparam() {
  // @@protoc_insertion_point(field_release:tradingcore2.TrainData.strParam)
  
  return strparam_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TrainData::set_allocated_strparam(::std::string* strparam) {
  if (strparam != NULL) {
    
  } else {
    
  }
  strparam_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strparam);
  // @@protoc_insertion_point(field_set_allocated:tradingcore2.TrainData.strParam)
}

// -------------------------------------------------------------------

// TrainResult

// int64 trainID = 1;
inline void TrainResult::clear_trainid() {
  trainid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 TrainResult::trainid() const {
  // @@protoc_insertion_point(field_get:tradingcore2.TrainResult.trainID)
  return trainid_;
}
inline void TrainResult::set_trainid(::google::protobuf::int64 value) {
  
  trainid_ = value;
  // @@protoc_insertion_point(field_set:tradingcore2.TrainResult.trainID)
}

// float maxDrawdown = 2;
inline void TrainResult::clear_maxdrawdown() {
  maxdrawdown_ = 0;
}
inline float TrainResult::maxdrawdown() const {
  // @@protoc_insertion_point(field_get:tradingcore2.TrainResult.maxDrawdown)
  return maxdrawdown_;
}
inline void TrainResult::set_maxdrawdown(float value) {
  
  maxdrawdown_ = value;
  // @@protoc_insertion_point(field_set:tradingcore2.TrainResult.maxDrawdown)
}

// float sharpe = 3;
inline void TrainResult::clear_sharpe() {
  sharpe_ = 0;
}
inline float TrainResult::sharpe() const {
  // @@protoc_insertion_point(field_get:tradingcore2.TrainResult.sharpe)
  return sharpe_;
}
inline void TrainResult::set_sharpe(float value) {
  
  sharpe_ = value;
  // @@protoc_insertion_point(field_set:tradingcore2.TrainResult.sharpe)
}

// float annualizedReturns = 4;
inline void TrainResult::clear_annualizedreturns() {
  annualizedreturns_ = 0;
}
inline float TrainResult::annualizedreturns() const {
  // @@protoc_insertion_point(field_get:tradingcore2.TrainResult.annualizedReturns)
  return annualizedreturns_;
}
inline void TrainResult::set_annualizedreturns(float value) {
  
  annualizedreturns_ = value;
  // @@protoc_insertion_point(field_set:tradingcore2.TrainResult.annualizedReturns)
}

// float annualizedVolatility = 5;
inline void TrainResult::clear_annualizedvolatility() {
  annualizedvolatility_ = 0;
}
inline float TrainResult::annualizedvolatility() const {
  // @@protoc_insertion_point(field_get:tradingcore2.TrainResult.annualizedVolatility)
  return annualizedvolatility_;
}
inline void TrainResult::set_annualizedvolatility(float value) {
  
  annualizedvolatility_ = value;
  // @@protoc_insertion_point(field_set:tradingcore2.TrainResult.annualizedVolatility)
}

// float totalReturns = 6;
inline void TrainResult::clear_totalreturns() {
  totalreturns_ = 0;
}
inline float TrainResult::totalreturns() const {
  // @@protoc_insertion_point(field_get:tradingcore2.TrainResult.totalReturns)
  return totalreturns_;
}
inline void TrainResult::set_totalreturns(float value) {
  
  totalreturns_ = value;
  // @@protoc_insertion_point(field_set:tradingcore2.TrainResult.totalReturns)
}

// int32 tradingTimes = 7;
inline void TrainResult::clear_tradingtimes() {
  tradingtimes_ = 0;
}
inline ::google::protobuf::int32 TrainResult::tradingtimes() const {
  // @@protoc_insertion_point(field_get:tradingcore2.TrainResult.tradingTimes)
  return tradingtimes_;
}
inline void TrainResult::set_tradingtimes(::google::protobuf::int32 value) {
  
  tradingtimes_ = value;
  // @@protoc_insertion_point(field_set:tradingcore2.TrainResult.tradingTimes)
}

// int32 failTimes = 8;
inline void TrainResult::clear_failtimes() {
  failtimes_ = 0;
}
inline ::google::protobuf::int32 TrainResult::failtimes() const {
  // @@protoc_insertion_point(field_get:tradingcore2.TrainResult.failTimes)
  return failtimes_;
}
inline void TrainResult::set_failtimes(::google::protobuf::int32 value) {
  
  failtimes_ = value;
  // @@protoc_insertion_point(field_set:tradingcore2.TrainResult.failTimes)
}

// int32 stoplossTimes = 9;
inline void TrainResult::clear_stoplosstimes() {
  stoplosstimes_ = 0;
}
inline ::google::protobuf::int32 TrainResult::stoplosstimes() const {
  // @@protoc_insertion_point(field_get:tradingcore2.TrainResult.stoplossTimes)
  return stoplosstimes_;
}
inline void TrainResult::set_stoplosstimes(::google::protobuf::int32 value) {
  
  stoplosstimes_ = value;
  // @@protoc_insertion_point(field_set:tradingcore2.TrainResult.stoplossTimes)
}

// float winRate = 10;
inline void TrainResult::clear_winrate() {
  winrate_ = 0;
}
inline float TrainResult::winrate() const {
  // @@protoc_insertion_point(field_get:tradingcore2.TrainResult.winRate)
  return winrate_;
}
inline void TrainResult::set_winrate(float value) {
  
  winrate_ = value;
  // @@protoc_insertion_point(field_set:tradingcore2.TrainResult.winRate)
}

// string exchangeName = 11;
inline void TrainResult::clear_exchangename() {
  exchangename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TrainResult::exchangename() const {
  // @@protoc_insertion_point(field_get:tradingcore2.TrainResult.exchangeName)
  return exchangename_.GetNoArena();
}
inline void TrainResult::set_exchangename(const ::std::string& value) {
  
  exchangename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tradingcore2.TrainResult.exchangeName)
}
#if LANG_CXX11
inline void TrainResult::set_exchangename(::std::string&& value) {
  
  exchangename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tradingcore2.TrainResult.exchangeName)
}
#endif
inline void TrainResult::set_exchangename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  exchangename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tradingcore2.TrainResult.exchangeName)
}
inline void TrainResult::set_exchangename(const char* value, size_t size) {
  
  exchangename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tradingcore2.TrainResult.exchangeName)
}
inline ::std::string* TrainResult::mutable_exchangename() {
  
  // @@protoc_insertion_point(field_mutable:tradingcore2.TrainResult.exchangeName)
  return exchangename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TrainResult::release_exchangename() {
  // @@protoc_insertion_point(field_release:tradingcore2.TrainResult.exchangeName)
  
  return exchangename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TrainResult::set_allocated_exchangename(::std::string* exchangename) {
  if (exchangename != NULL) {
    
  } else {
    
  }
  exchangename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchangename);
  // @@protoc_insertion_point(field_set_allocated:tradingcore2.TrainResult.exchangeName)
}

// string assetsName = 12;
inline void TrainResult::clear_assetsname() {
  assetsname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TrainResult::assetsname() const {
  // @@protoc_insertion_point(field_get:tradingcore2.TrainResult.assetsName)
  return assetsname_.GetNoArena();
}
inline void TrainResult::set_assetsname(const ::std::string& value) {
  
  assetsname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tradingcore2.TrainResult.assetsName)
}
#if LANG_CXX11
inline void TrainResult::set_assetsname(::std::string&& value) {
  
  assetsname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tradingcore2.TrainResult.assetsName)
}
#endif
inline void TrainResult::set_assetsname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  assetsname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tradingcore2.TrainResult.assetsName)
}
inline void TrainResult::set_assetsname(const char* value, size_t size) {
  
  assetsname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tradingcore2.TrainResult.assetsName)
}
inline ::std::string* TrainResult::mutable_assetsname() {
  
  // @@protoc_insertion_point(field_mutable:tradingcore2.TrainResult.assetsName)
  return assetsname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TrainResult::release_assetsname() {
  // @@protoc_insertion_point(field_release:tradingcore2.TrainResult.assetsName)
  
  return assetsname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TrainResult::set_allocated_assetsname(::std::string* assetsname) {
  if (assetsname != NULL) {
    
  } else {
    
  }
  assetsname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), assetsname);
  // @@protoc_insertion_point(field_set_allocated:tradingcore2.TrainResult.assetsName)
}

// string strategyName = 13;
inline void TrainResult::clear_strategyname() {
  strategyname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TrainResult::strategyname() const {
  // @@protoc_insertion_point(field_get:tradingcore2.TrainResult.strategyName)
  return strategyname_.GetNoArena();
}
inline void TrainResult::set_strategyname(const ::std::string& value) {
  
  strategyname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tradingcore2.TrainResult.strategyName)
}
#if LANG_CXX11
inline void TrainResult::set_strategyname(::std::string&& value) {
  
  strategyname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tradingcore2.TrainResult.strategyName)
}
#endif
inline void TrainResult::set_strategyname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  strategyname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tradingcore2.TrainResult.strategyName)
}
inline void TrainResult::set_strategyname(const char* value, size_t size) {
  
  strategyname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tradingcore2.TrainResult.strategyName)
}
inline ::std::string* TrainResult::mutable_strategyname() {
  
  // @@protoc_insertion_point(field_mutable:tradingcore2.TrainResult.strategyName)
  return strategyname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TrainResult::release_strategyname() {
  // @@protoc_insertion_point(field_release:tradingcore2.TrainResult.strategyName)
  
  return strategyname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TrainResult::set_allocated_strategyname(::std::string* strategyname) {
  if (strategyname != NULL) {
    
  } else {
    
  }
  strategyname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strategyname);
  // @@protoc_insertion_point(field_set_allocated:tradingcore2.TrainResult.strategyName)
}

// string strParam = 14;
inline void TrainResult::clear_strparam() {
  strparam_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TrainResult::strparam() const {
  // @@protoc_insertion_point(field_get:tradingcore2.TrainResult.strParam)
  return strparam_.GetNoArena();
}
inline void TrainResult::set_strparam(const ::std::string& value) {
  
  strparam_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tradingcore2.TrainResult.strParam)
}
#if LANG_CXX11
inline void TrainResult::set_strparam(::std::string&& value) {
  
  strparam_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tradingcore2.TrainResult.strParam)
}
#endif
inline void TrainResult::set_strparam(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  strparam_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tradingcore2.TrainResult.strParam)
}
inline void TrainResult::set_strparam(const char* value, size_t size) {
  
  strparam_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tradingcore2.TrainResult.strParam)
}
inline ::std::string* TrainResult::mutable_strparam() {
  
  // @@protoc_insertion_point(field_mutable:tradingcore2.TrainResult.strParam)
  return strparam_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TrainResult::release_strparam() {
  // @@protoc_insertion_point(field_release:tradingcore2.TrainResult.strParam)
  
  return strparam_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TrainResult::set_allocated_strparam(::std::string* strparam) {
  if (strparam != NULL) {
    
  } else {
    
  }
  strparam_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strparam);
  // @@protoc_insertion_point(field_set_allocated:tradingcore2.TrainResult.strParam)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace tradingcore2

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_tradingcore2_2eproto__INCLUDED

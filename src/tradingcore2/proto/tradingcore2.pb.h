// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tradingcore2.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tradingcore2_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tradingcore2_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tradingcore2_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tradingcore2_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tradingcore2_2eproto;
namespace tradingcore2pb {
class BasicReplyData;
class BasicReplyDataDefaultTypeInternal;
extern BasicReplyDataDefaultTypeInternal _BasicReplyData_default_instance_;
class BasicRequestData;
class BasicRequestDataDefaultTypeInternal;
extern BasicRequestDataDefaultTypeInternal _BasicRequestData_default_instance_;
class ReplyServerInfo;
class ReplyServerInfoDefaultTypeInternal;
extern ReplyServerInfoDefaultTypeInternal _ReplyServerInfo_default_instance_;
class ReplyTrain;
class ReplyTrainDefaultTypeInternal;
extern ReplyTrainDefaultTypeInternal _ReplyTrain_default_instance_;
class RequestServerInfo;
class RequestServerInfoDefaultTypeInternal;
extern RequestServerInfoDefaultTypeInternal _RequestServerInfo_default_instance_;
class RequestTrain;
class RequestTrainDefaultTypeInternal;
extern RequestTrainDefaultTypeInternal _RequestTrain_default_instance_;
class TrainData;
class TrainDataDefaultTypeInternal;
extern TrainDataDefaultTypeInternal _TrainData_default_instance_;
class TrainNodeResult;
class TrainNodeResultDefaultTypeInternal;
extern TrainNodeResultDefaultTypeInternal _TrainNodeResult_default_instance_;
class TrainResult;
class TrainResultDefaultTypeInternal;
extern TrainResultDefaultTypeInternal _TrainResult_default_instance_;
class TrainSingleIndicator2Ex;
class TrainSingleIndicator2ExDefaultTypeInternal;
extern TrainSingleIndicator2ExDefaultTypeInternal _TrainSingleIndicator2Ex_default_instance_;
}  // namespace tradingcore2pb
PROTOBUF_NAMESPACE_OPEN
template<> ::tradingcore2pb::BasicReplyData* Arena::CreateMaybeMessage<::tradingcore2pb::BasicReplyData>(Arena*);
template<> ::tradingcore2pb::BasicRequestData* Arena::CreateMaybeMessage<::tradingcore2pb::BasicRequestData>(Arena*);
template<> ::tradingcore2pb::ReplyServerInfo* Arena::CreateMaybeMessage<::tradingcore2pb::ReplyServerInfo>(Arena*);
template<> ::tradingcore2pb::ReplyTrain* Arena::CreateMaybeMessage<::tradingcore2pb::ReplyTrain>(Arena*);
template<> ::tradingcore2pb::RequestServerInfo* Arena::CreateMaybeMessage<::tradingcore2pb::RequestServerInfo>(Arena*);
template<> ::tradingcore2pb::RequestTrain* Arena::CreateMaybeMessage<::tradingcore2pb::RequestTrain>(Arena*);
template<> ::tradingcore2pb::TrainData* Arena::CreateMaybeMessage<::tradingcore2pb::TrainData>(Arena*);
template<> ::tradingcore2pb::TrainNodeResult* Arena::CreateMaybeMessage<::tradingcore2pb::TrainNodeResult>(Arena*);
template<> ::tradingcore2pb::TrainResult* Arena::CreateMaybeMessage<::tradingcore2pb::TrainResult>(Arena*);
template<> ::tradingcore2pb::TrainSingleIndicator2Ex* Arena::CreateMaybeMessage<::tradingcore2pb::TrainSingleIndicator2Ex>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tradingcore2pb {

enum ErrorCode : int {
  ERR_NOERR = 0,
  ERR_NOEXCHANGE = 1,
  ERR_NOTRAINPARAM = 2,
  ERR_NOASSETS = 3,
  ErrorCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ErrorCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ErrorCode_IsValid(int value);
constexpr ErrorCode ErrorCode_MIN = ERR_NOERR;
constexpr ErrorCode ErrorCode_MAX = ERR_NOASSETS;
constexpr int ErrorCode_ARRAYSIZE = ErrorCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ErrorCode_descriptor();
template<typename T>
inline const std::string& ErrorCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ErrorCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ErrorCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ErrorCode_descriptor(), enum_t_value);
}
inline bool ErrorCode_Parse(
    const std::string& name, ErrorCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ErrorCode>(
    ErrorCode_descriptor(), name, value);
}
// ===================================================================

class BasicRequestData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tradingcore2pb.BasicRequestData) */ {
 public:
  BasicRequestData();
  virtual ~BasicRequestData();

  BasicRequestData(const BasicRequestData& from);
  BasicRequestData(BasicRequestData&& from) noexcept
    : BasicRequestData() {
    *this = ::std::move(from);
  }

  inline BasicRequestData& operator=(const BasicRequestData& from) {
    CopyFrom(from);
    return *this;
  }
  inline BasicRequestData& operator=(BasicRequestData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BasicRequestData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BasicRequestData* internal_default_instance() {
    return reinterpret_cast<const BasicRequestData*>(
               &_BasicRequestData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BasicRequestData& a, BasicRequestData& b) {
    a.Swap(&b);
  }
  inline void Swap(BasicRequestData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BasicRequestData* New() const final {
    return CreateMaybeMessage<BasicRequestData>(nullptr);
  }

  BasicRequestData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BasicRequestData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BasicRequestData& from);
  void MergeFrom(const BasicRequestData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BasicRequestData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tradingcore2pb.BasicRequestData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tradingcore2_2eproto);
    return ::descriptor_table_tradingcore2_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
  };
  // string token = 1;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // @@protoc_insertion_point(class_scope:tradingcore2pb.BasicRequestData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tradingcore2_2eproto;
};
// -------------------------------------------------------------------

class BasicReplyData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tradingcore2pb.BasicReplyData) */ {
 public:
  BasicReplyData();
  virtual ~BasicReplyData();

  BasicReplyData(const BasicReplyData& from);
  BasicReplyData(BasicReplyData&& from) noexcept
    : BasicReplyData() {
    *this = ::std::move(from);
  }

  inline BasicReplyData& operator=(const BasicReplyData& from) {
    CopyFrom(from);
    return *this;
  }
  inline BasicReplyData& operator=(BasicReplyData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BasicReplyData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BasicReplyData* internal_default_instance() {
    return reinterpret_cast<const BasicReplyData*>(
               &_BasicReplyData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BasicReplyData& a, BasicReplyData& b) {
    a.Swap(&b);
  }
  inline void Swap(BasicReplyData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BasicReplyData* New() const final {
    return CreateMaybeMessage<BasicReplyData>(nullptr);
  }

  BasicReplyData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BasicReplyData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BasicReplyData& from);
  void MergeFrom(const BasicReplyData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BasicReplyData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tradingcore2pb.BasicReplyData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tradingcore2_2eproto);
    return ::descriptor_table_tradingcore2_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrCodeFieldNumber = 1,
  };
  // .tradingcore2pb.ErrorCode errCode = 1;
  void clear_errcode();
  ::tradingcore2pb::ErrorCode errcode() const;
  void set_errcode(::tradingcore2pb::ErrorCode value);
  private:
  ::tradingcore2pb::ErrorCode _internal_errcode() const;
  void _internal_set_errcode(::tradingcore2pb::ErrorCode value);
  public:

  // @@protoc_insertion_point(class_scope:tradingcore2pb.BasicReplyData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int errcode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tradingcore2_2eproto;
};
// -------------------------------------------------------------------

class TrainSingleIndicator2Ex :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tradingcore2pb.TrainSingleIndicator2Ex) */ {
 public:
  TrainSingleIndicator2Ex();
  virtual ~TrainSingleIndicator2Ex();

  TrainSingleIndicator2Ex(const TrainSingleIndicator2Ex& from);
  TrainSingleIndicator2Ex(TrainSingleIndicator2Ex&& from) noexcept
    : TrainSingleIndicator2Ex() {
    *this = ::std::move(from);
  }

  inline TrainSingleIndicator2Ex& operator=(const TrainSingleIndicator2Ex& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrainSingleIndicator2Ex& operator=(TrainSingleIndicator2Ex&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrainSingleIndicator2Ex& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrainSingleIndicator2Ex* internal_default_instance() {
    return reinterpret_cast<const TrainSingleIndicator2Ex*>(
               &_TrainSingleIndicator2Ex_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TrainSingleIndicator2Ex& a, TrainSingleIndicator2Ex& b) {
    a.Swap(&b);
  }
  inline void Swap(TrainSingleIndicator2Ex* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrainSingleIndicator2Ex* New() const final {
    return CreateMaybeMessage<TrainSingleIndicator2Ex>(nullptr);
  }

  TrainSingleIndicator2Ex* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrainSingleIndicator2Ex>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrainSingleIndicator2Ex& from);
  void MergeFrom(const TrainSingleIndicator2Ex& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrainSingleIndicator2Ex* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tradingcore2pb.TrainSingleIndicator2Ex";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tradingcore2_2eproto);
    return ::descriptor_table_tradingcore2_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndicatorNameFieldNumber = 1,
    kAvgtimesFieldNumber = 2,
    kOff0FieldNumber = 3,
    kOff1FieldNumber = 4,
    kOff2FieldNumber = 5,
    kMaxoff2FieldNumber = 6,
    kMinvalFieldNumber = 7,
    kMaxvalFieldNumber = 8,
    kCv0FieldNumber = 9,
    kCv0OffFieldNumber = 10,
  };
  // string indicatorName = 1;
  void clear_indicatorname();
  const std::string& indicatorname() const;
  void set_indicatorname(const std::string& value);
  void set_indicatorname(std::string&& value);
  void set_indicatorname(const char* value);
  void set_indicatorname(const char* value, size_t size);
  std::string* mutable_indicatorname();
  std::string* release_indicatorname();
  void set_allocated_indicatorname(std::string* indicatorname);
  private:
  const std::string& _internal_indicatorname() const;
  void _internal_set_indicatorname(const std::string& value);
  std::string* _internal_mutable_indicatorname();
  public:

  // int32 avgtimes = 2;
  void clear_avgtimes();
  ::PROTOBUF_NAMESPACE_ID::int32 avgtimes() const;
  void set_avgtimes(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_avgtimes() const;
  void _internal_set_avgtimes(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float off0 = 3;
  void clear_off0();
  float off0() const;
  void set_off0(float value);
  private:
  float _internal_off0() const;
  void _internal_set_off0(float value);
  public:

  // float off1 = 4;
  void clear_off1();
  float off1() const;
  void set_off1(float value);
  private:
  float _internal_off1() const;
  void _internal_set_off1(float value);
  public:

  // float off2 = 5;
  void clear_off2();
  float off2() const;
  void set_off2(float value);
  private:
  float _internal_off2() const;
  void _internal_set_off2(float value);
  public:

  // float maxoff2 = 6;
  void clear_maxoff2();
  float maxoff2() const;
  void set_maxoff2(float value);
  private:
  float _internal_maxoff2() const;
  void _internal_set_maxoff2(float value);
  public:

  // float minval = 7;
  void clear_minval();
  float minval() const;
  void set_minval(float value);
  private:
  float _internal_minval() const;
  void _internal_set_minval(float value);
  public:

  // float maxval = 8;
  void clear_maxval();
  float maxval() const;
  void set_maxval(float value);
  private:
  float _internal_maxval() const;
  void _internal_set_maxval(float value);
  public:

  // float cv0 = 9;
  void clear_cv0();
  float cv0() const;
  void set_cv0(float value);
  private:
  float _internal_cv0() const;
  void _internal_set_cv0(float value);
  public:

  // float cv0off = 10;
  void clear_cv0off();
  float cv0off() const;
  void set_cv0off(float value);
  private:
  float _internal_cv0off() const;
  void _internal_set_cv0off(float value);
  public:

  // @@protoc_insertion_point(class_scope:tradingcore2pb.TrainSingleIndicator2Ex)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr indicatorname_;
  ::PROTOBUF_NAMESPACE_ID::int32 avgtimes_;
  float off0_;
  float off1_;
  float off2_;
  float maxoff2_;
  float minval_;
  float maxval_;
  float cv0_;
  float cv0off_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tradingcore2_2eproto;
};
// -------------------------------------------------------------------

class TrainData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tradingcore2pb.TrainData) */ {
 public:
  TrainData();
  virtual ~TrainData();

  TrainData(const TrainData& from);
  TrainData(TrainData&& from) noexcept
    : TrainData() {
    *this = ::std::move(from);
  }

  inline TrainData& operator=(const TrainData& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrainData& operator=(TrainData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrainData& default_instance();

  enum TrainParamCase {
    kSi2 = 100,
    TRAINPARAM_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrainData* internal_default_instance() {
    return reinterpret_cast<const TrainData*>(
               &_TrainData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TrainData& a, TrainData& b) {
    a.Swap(&b);
  }
  inline void Swap(TrainData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrainData* New() const final {
    return CreateMaybeMessage<TrainData>(nullptr);
  }

  TrainData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrainData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrainData& from);
  void MergeFrom(const TrainData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrainData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tradingcore2pb.TrainData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tradingcore2_2eproto);
    return ::descriptor_table_tradingcore2_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExchangeNameFieldNumber = 2,
    kAssetsNameFieldNumber = 3,
    kStrategyNameFieldNumber = 4,
    kStrParamFieldNumber = 5,
    kOutputPathFieldNumber = 6,
    kTrainIDFieldNumber = 1,
    kInvestFieldNumber = 7,
    kMinValidReturnFieldNumber = 8,
    kSi2FieldNumber = 100,
  };
  // string exchangeName = 2;
  void clear_exchangename();
  const std::string& exchangename() const;
  void set_exchangename(const std::string& value);
  void set_exchangename(std::string&& value);
  void set_exchangename(const char* value);
  void set_exchangename(const char* value, size_t size);
  std::string* mutable_exchangename();
  std::string* release_exchangename();
  void set_allocated_exchangename(std::string* exchangename);
  private:
  const std::string& _internal_exchangename() const;
  void _internal_set_exchangename(const std::string& value);
  std::string* _internal_mutable_exchangename();
  public:

  // string assetsName = 3;
  void clear_assetsname();
  const std::string& assetsname() const;
  void set_assetsname(const std::string& value);
  void set_assetsname(std::string&& value);
  void set_assetsname(const char* value);
  void set_assetsname(const char* value, size_t size);
  std::string* mutable_assetsname();
  std::string* release_assetsname();
  void set_allocated_assetsname(std::string* assetsname);
  private:
  const std::string& _internal_assetsname() const;
  void _internal_set_assetsname(const std::string& value);
  std::string* _internal_mutable_assetsname();
  public:

  // string strategyName = 4;
  void clear_strategyname();
  const std::string& strategyname() const;
  void set_strategyname(const std::string& value);
  void set_strategyname(std::string&& value);
  void set_strategyname(const char* value);
  void set_strategyname(const char* value, size_t size);
  std::string* mutable_strategyname();
  std::string* release_strategyname();
  void set_allocated_strategyname(std::string* strategyname);
  private:
  const std::string& _internal_strategyname() const;
  void _internal_set_strategyname(const std::string& value);
  std::string* _internal_mutable_strategyname();
  public:

  // string strParam = 5;
  void clear_strparam();
  const std::string& strparam() const;
  void set_strparam(const std::string& value);
  void set_strparam(std::string&& value);
  void set_strparam(const char* value);
  void set_strparam(const char* value, size_t size);
  std::string* mutable_strparam();
  std::string* release_strparam();
  void set_allocated_strparam(std::string* strparam);
  private:
  const std::string& _internal_strparam() const;
  void _internal_set_strparam(const std::string& value);
  std::string* _internal_mutable_strparam();
  public:

  // string outputPath = 6;
  void clear_outputpath();
  const std::string& outputpath() const;
  void set_outputpath(const std::string& value);
  void set_outputpath(std::string&& value);
  void set_outputpath(const char* value);
  void set_outputpath(const char* value, size_t size);
  std::string* mutable_outputpath();
  std::string* release_outputpath();
  void set_allocated_outputpath(std::string* outputpath);
  private:
  const std::string& _internal_outputpath() const;
  void _internal_set_outputpath(const std::string& value);
  std::string* _internal_mutable_outputpath();
  public:

  // int64 trainID = 1;
  void clear_trainid();
  ::PROTOBUF_NAMESPACE_ID::int64 trainid() const;
  void set_trainid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_trainid() const;
  void _internal_set_trainid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // float invest = 7;
  void clear_invest();
  float invest() const;
  void set_invest(float value);
  private:
  float _internal_invest() const;
  void _internal_set_invest(float value);
  public:

  // float minValidReturn = 8;
  void clear_minvalidreturn();
  float minvalidreturn() const;
  void set_minvalidreturn(float value);
  private:
  float _internal_minvalidreturn() const;
  void _internal_set_minvalidreturn(float value);
  public:

  // .tradingcore2pb.TrainSingleIndicator2Ex si2 = 100;
  bool has_si2() const;
  private:
  bool _internal_has_si2() const;
  public:
  void clear_si2();
  const ::tradingcore2pb::TrainSingleIndicator2Ex& si2() const;
  ::tradingcore2pb::TrainSingleIndicator2Ex* release_si2();
  ::tradingcore2pb::TrainSingleIndicator2Ex* mutable_si2();
  void set_allocated_si2(::tradingcore2pb::TrainSingleIndicator2Ex* si2);
  private:
  const ::tradingcore2pb::TrainSingleIndicator2Ex& _internal_si2() const;
  ::tradingcore2pb::TrainSingleIndicator2Ex* _internal_mutable_si2();
  public:

  void clear_trainParam();
  TrainParamCase trainParam_case() const;
  // @@protoc_insertion_point(class_scope:tradingcore2pb.TrainData)
 private:
  class _Internal;
  void set_has_si2();

  inline bool has_trainParam() const;
  inline void clear_has_trainParam();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exchangename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr assetsname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strategyname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strparam_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr outputpath_;
  ::PROTOBUF_NAMESPACE_ID::int64 trainid_;
  float invest_;
  float minvalidreturn_;
  union TrainParamUnion {
    TrainParamUnion() {}
    ::tradingcore2pb::TrainSingleIndicator2Ex* si2_;
  } trainParam_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_tradingcore2_2eproto;
};
// -------------------------------------------------------------------

class TrainNodeResult :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tradingcore2pb.TrainNodeResult) */ {
 public:
  TrainNodeResult();
  virtual ~TrainNodeResult();

  TrainNodeResult(const TrainNodeResult& from);
  TrainNodeResult(TrainNodeResult&& from) noexcept
    : TrainNodeResult() {
    *this = ::std::move(from);
  }

  inline TrainNodeResult& operator=(const TrainNodeResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrainNodeResult& operator=(TrainNodeResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrainNodeResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrainNodeResult* internal_default_instance() {
    return reinterpret_cast<const TrainNodeResult*>(
               &_TrainNodeResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TrainNodeResult& a, TrainNodeResult& b) {
    a.Swap(&b);
  }
  inline void Swap(TrainNodeResult* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrainNodeResult* New() const final {
    return CreateMaybeMessage<TrainNodeResult>(nullptr);
  }

  TrainNodeResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrainNodeResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrainNodeResult& from);
  void MergeFrom(const TrainNodeResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrainNodeResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tradingcore2pb.TrainNodeResult";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tradingcore2_2eproto);
    return ::descriptor_table_tradingcore2_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 10,
    kMaxDrawdownFieldNumber = 1,
    kSharpeFieldNumber = 2,
    kAnnualizedReturnsFieldNumber = 3,
    kAnnualizedVolatilityFieldNumber = 4,
    kTotalReturnsFieldNumber = 5,
    kTradingTimesFieldNumber = 6,
    kFailTimesFieldNumber = 7,
    kStoplossTimesFieldNumber = 8,
    kWinRateFieldNumber = 9,
  };
  // string name = 10;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // float maxDrawdown = 1;
  void clear_maxdrawdown();
  float maxdrawdown() const;
  void set_maxdrawdown(float value);
  private:
  float _internal_maxdrawdown() const;
  void _internal_set_maxdrawdown(float value);
  public:

  // float sharpe = 2;
  void clear_sharpe();
  float sharpe() const;
  void set_sharpe(float value);
  private:
  float _internal_sharpe() const;
  void _internal_set_sharpe(float value);
  public:

  // float annualizedReturns = 3;
  void clear_annualizedreturns();
  float annualizedreturns() const;
  void set_annualizedreturns(float value);
  private:
  float _internal_annualizedreturns() const;
  void _internal_set_annualizedreturns(float value);
  public:

  // float annualizedVolatility = 4;
  void clear_annualizedvolatility();
  float annualizedvolatility() const;
  void set_annualizedvolatility(float value);
  private:
  float _internal_annualizedvolatility() const;
  void _internal_set_annualizedvolatility(float value);
  public:

  // float totalReturns = 5;
  void clear_totalreturns();
  float totalreturns() const;
  void set_totalreturns(float value);
  private:
  float _internal_totalreturns() const;
  void _internal_set_totalreturns(float value);
  public:

  // int32 tradingTimes = 6;
  void clear_tradingtimes();
  ::PROTOBUF_NAMESPACE_ID::int32 tradingtimes() const;
  void set_tradingtimes(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tradingtimes() const;
  void _internal_set_tradingtimes(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 failTimes = 7;
  void clear_failtimes();
  ::PROTOBUF_NAMESPACE_ID::int32 failtimes() const;
  void set_failtimes(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_failtimes() const;
  void _internal_set_failtimes(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 stoplossTimes = 8;
  void clear_stoplosstimes();
  ::PROTOBUF_NAMESPACE_ID::int32 stoplosstimes() const;
  void set_stoplosstimes(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_stoplosstimes() const;
  void _internal_set_stoplosstimes(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float winRate = 9;
  void clear_winrate();
  float winrate() const;
  void set_winrate(float value);
  private:
  float _internal_winrate() const;
  void _internal_set_winrate(float value);
  public:

  // @@protoc_insertion_point(class_scope:tradingcore2pb.TrainNodeResult)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  float maxdrawdown_;
  float sharpe_;
  float annualizedreturns_;
  float annualizedvolatility_;
  float totalreturns_;
  ::PROTOBUF_NAMESPACE_ID::int32 tradingtimes_;
  ::PROTOBUF_NAMESPACE_ID::int32 failtimes_;
  ::PROTOBUF_NAMESPACE_ID::int32 stoplosstimes_;
  float winrate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tradingcore2_2eproto;
};
// -------------------------------------------------------------------

class TrainResult :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tradingcore2pb.TrainResult) */ {
 public:
  TrainResult();
  virtual ~TrainResult();

  TrainResult(const TrainResult& from);
  TrainResult(TrainResult&& from) noexcept
    : TrainResult() {
    *this = ::std::move(from);
  }

  inline TrainResult& operator=(const TrainResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrainResult& operator=(TrainResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrainResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrainResult* internal_default_instance() {
    return reinterpret_cast<const TrainResult*>(
               &_TrainResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(TrainResult& a, TrainResult& b) {
    a.Swap(&b);
  }
  inline void Swap(TrainResult* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrainResult* New() const final {
    return CreateMaybeMessage<TrainResult>(nullptr);
  }

  TrainResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrainResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrainResult& from);
  void MergeFrom(const TrainResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrainResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tradingcore2pb.TrainResult";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tradingcore2_2eproto);
    return ::descriptor_table_tradingcore2_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodesFieldNumber = 7,
    kExchangeNameFieldNumber = 2,
    kAssetsNameFieldNumber = 3,
    kStrategyNameFieldNumber = 4,
    kStrParamFieldNumber = 5,
    kTrainIDFieldNumber = 1,
    kErrCodeFieldNumber = 6,
  };
  // repeated .tradingcore2pb.TrainNodeResult nodes = 7;
  int nodes_size() const;
  private:
  int _internal_nodes_size() const;
  public:
  void clear_nodes();
  ::tradingcore2pb::TrainNodeResult* mutable_nodes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tradingcore2pb::TrainNodeResult >*
      mutable_nodes();
  private:
  const ::tradingcore2pb::TrainNodeResult& _internal_nodes(int index) const;
  ::tradingcore2pb::TrainNodeResult* _internal_add_nodes();
  public:
  const ::tradingcore2pb::TrainNodeResult& nodes(int index) const;
  ::tradingcore2pb::TrainNodeResult* add_nodes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tradingcore2pb::TrainNodeResult >&
      nodes() const;

  // string exchangeName = 2;
  void clear_exchangename();
  const std::string& exchangename() const;
  void set_exchangename(const std::string& value);
  void set_exchangename(std::string&& value);
  void set_exchangename(const char* value);
  void set_exchangename(const char* value, size_t size);
  std::string* mutable_exchangename();
  std::string* release_exchangename();
  void set_allocated_exchangename(std::string* exchangename);
  private:
  const std::string& _internal_exchangename() const;
  void _internal_set_exchangename(const std::string& value);
  std::string* _internal_mutable_exchangename();
  public:

  // string assetsName = 3;
  void clear_assetsname();
  const std::string& assetsname() const;
  void set_assetsname(const std::string& value);
  void set_assetsname(std::string&& value);
  void set_assetsname(const char* value);
  void set_assetsname(const char* value, size_t size);
  std::string* mutable_assetsname();
  std::string* release_assetsname();
  void set_allocated_assetsname(std::string* assetsname);
  private:
  const std::string& _internal_assetsname() const;
  void _internal_set_assetsname(const std::string& value);
  std::string* _internal_mutable_assetsname();
  public:

  // string strategyName = 4;
  void clear_strategyname();
  const std::string& strategyname() const;
  void set_strategyname(const std::string& value);
  void set_strategyname(std::string&& value);
  void set_strategyname(const char* value);
  void set_strategyname(const char* value, size_t size);
  std::string* mutable_strategyname();
  std::string* release_strategyname();
  void set_allocated_strategyname(std::string* strategyname);
  private:
  const std::string& _internal_strategyname() const;
  void _internal_set_strategyname(const std::string& value);
  std::string* _internal_mutable_strategyname();
  public:

  // string strParam = 5;
  void clear_strparam();
  const std::string& strparam() const;
  void set_strparam(const std::string& value);
  void set_strparam(std::string&& value);
  void set_strparam(const char* value);
  void set_strparam(const char* value, size_t size);
  std::string* mutable_strparam();
  std::string* release_strparam();
  void set_allocated_strparam(std::string* strparam);
  private:
  const std::string& _internal_strparam() const;
  void _internal_set_strparam(const std::string& value);
  std::string* _internal_mutable_strparam();
  public:

  // int64 trainID = 1;
  void clear_trainid();
  ::PROTOBUF_NAMESPACE_ID::int64 trainid() const;
  void set_trainid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_trainid() const;
  void _internal_set_trainid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .tradingcore2pb.ErrorCode errCode = 6;
  void clear_errcode();
  ::tradingcore2pb::ErrorCode errcode() const;
  void set_errcode(::tradingcore2pb::ErrorCode value);
  private:
  ::tradingcore2pb::ErrorCode _internal_errcode() const;
  void _internal_set_errcode(::tradingcore2pb::ErrorCode value);
  public:

  // @@protoc_insertion_point(class_scope:tradingcore2pb.TrainResult)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tradingcore2pb::TrainNodeResult > nodes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exchangename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr assetsname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strategyname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strparam_;
  ::PROTOBUF_NAMESPACE_ID::int64 trainid_;
  int errcode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tradingcore2_2eproto;
};
// -------------------------------------------------------------------

class RequestServerInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tradingcore2pb.RequestServerInfo) */ {
 public:
  RequestServerInfo();
  virtual ~RequestServerInfo();

  RequestServerInfo(const RequestServerInfo& from);
  RequestServerInfo(RequestServerInfo&& from) noexcept
    : RequestServerInfo() {
    *this = ::std::move(from);
  }

  inline RequestServerInfo& operator=(const RequestServerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestServerInfo& operator=(RequestServerInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RequestServerInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestServerInfo* internal_default_instance() {
    return reinterpret_cast<const RequestServerInfo*>(
               &_RequestServerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(RequestServerInfo& a, RequestServerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestServerInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestServerInfo* New() const final {
    return CreateMaybeMessage<RequestServerInfo>(nullptr);
  }

  RequestServerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestServerInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestServerInfo& from);
  void MergeFrom(const RequestServerInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestServerInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tradingcore2pb.RequestServerInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tradingcore2_2eproto);
    return ::descriptor_table_tradingcore2_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBasicRequestFieldNumber = 1,
  };
  // .tradingcore2pb.BasicRequestData basicRequest = 1;
  bool has_basicrequest() const;
  private:
  bool _internal_has_basicrequest() const;
  public:
  void clear_basicrequest();
  const ::tradingcore2pb::BasicRequestData& basicrequest() const;
  ::tradingcore2pb::BasicRequestData* release_basicrequest();
  ::tradingcore2pb::BasicRequestData* mutable_basicrequest();
  void set_allocated_basicrequest(::tradingcore2pb::BasicRequestData* basicrequest);
  private:
  const ::tradingcore2pb::BasicRequestData& _internal_basicrequest() const;
  ::tradingcore2pb::BasicRequestData* _internal_mutable_basicrequest();
  public:

  // @@protoc_insertion_point(class_scope:tradingcore2pb.RequestServerInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::tradingcore2pb::BasicRequestData* basicrequest_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tradingcore2_2eproto;
};
// -------------------------------------------------------------------

class ReplyServerInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tradingcore2pb.ReplyServerInfo) */ {
 public:
  ReplyServerInfo();
  virtual ~ReplyServerInfo();

  ReplyServerInfo(const ReplyServerInfo& from);
  ReplyServerInfo(ReplyServerInfo&& from) noexcept
    : ReplyServerInfo() {
    *this = ::std::move(from);
  }

  inline ReplyServerInfo& operator=(const ReplyServerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReplyServerInfo& operator=(ReplyServerInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReplyServerInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReplyServerInfo* internal_default_instance() {
    return reinterpret_cast<const ReplyServerInfo*>(
               &_ReplyServerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ReplyServerInfo& a, ReplyServerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ReplyServerInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReplyServerInfo* New() const final {
    return CreateMaybeMessage<ReplyServerInfo>(nullptr);
  }

  ReplyServerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReplyServerInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReplyServerInfo& from);
  void MergeFrom(const ReplyServerInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReplyServerInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tradingcore2pb.ReplyServerInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tradingcore2_2eproto);
    return ::descriptor_table_tradingcore2_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBasicReplyFieldNumber = 1,
    kMaxTasksFieldNumber = 2,
    kCurTasksFieldNumber = 3,
  };
  // .tradingcore2pb.BasicReplyData basicReply = 1;
  bool has_basicreply() const;
  private:
  bool _internal_has_basicreply() const;
  public:
  void clear_basicreply();
  const ::tradingcore2pb::BasicReplyData& basicreply() const;
  ::tradingcore2pb::BasicReplyData* release_basicreply();
  ::tradingcore2pb::BasicReplyData* mutable_basicreply();
  void set_allocated_basicreply(::tradingcore2pb::BasicReplyData* basicreply);
  private:
  const ::tradingcore2pb::BasicReplyData& _internal_basicreply() const;
  ::tradingcore2pb::BasicReplyData* _internal_mutable_basicreply();
  public:

  // int32 maxTasks = 2;
  void clear_maxtasks();
  ::PROTOBUF_NAMESPACE_ID::int32 maxtasks() const;
  void set_maxtasks(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_maxtasks() const;
  void _internal_set_maxtasks(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 curTasks = 3;
  void clear_curtasks();
  ::PROTOBUF_NAMESPACE_ID::int32 curtasks() const;
  void set_curtasks(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_curtasks() const;
  void _internal_set_curtasks(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:tradingcore2pb.ReplyServerInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::tradingcore2pb::BasicReplyData* basicreply_;
  ::PROTOBUF_NAMESPACE_ID::int32 maxtasks_;
  ::PROTOBUF_NAMESPACE_ID::int32 curtasks_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tradingcore2_2eproto;
};
// -------------------------------------------------------------------

class RequestTrain :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tradingcore2pb.RequestTrain) */ {
 public:
  RequestTrain();
  virtual ~RequestTrain();

  RequestTrain(const RequestTrain& from);
  RequestTrain(RequestTrain&& from) noexcept
    : RequestTrain() {
    *this = ::std::move(from);
  }

  inline RequestTrain& operator=(const RequestTrain& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestTrain& operator=(RequestTrain&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RequestTrain& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestTrain* internal_default_instance() {
    return reinterpret_cast<const RequestTrain*>(
               &_RequestTrain_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(RequestTrain& a, RequestTrain& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestTrain* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestTrain* New() const final {
    return CreateMaybeMessage<RequestTrain>(nullptr);
  }

  RequestTrain* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestTrain>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestTrain& from);
  void MergeFrom(const RequestTrain& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestTrain* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tradingcore2pb.RequestTrain";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tradingcore2_2eproto);
    return ::descriptor_table_tradingcore2_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBasicRequestFieldNumber = 1,
    kTrainFieldNumber = 2,
  };
  // .tradingcore2pb.BasicRequestData basicRequest = 1;
  bool has_basicrequest() const;
  private:
  bool _internal_has_basicrequest() const;
  public:
  void clear_basicrequest();
  const ::tradingcore2pb::BasicRequestData& basicrequest() const;
  ::tradingcore2pb::BasicRequestData* release_basicrequest();
  ::tradingcore2pb::BasicRequestData* mutable_basicrequest();
  void set_allocated_basicrequest(::tradingcore2pb::BasicRequestData* basicrequest);
  private:
  const ::tradingcore2pb::BasicRequestData& _internal_basicrequest() const;
  ::tradingcore2pb::BasicRequestData* _internal_mutable_basicrequest();
  public:

  // .tradingcore2pb.TrainData train = 2;
  bool has_train() const;
  private:
  bool _internal_has_train() const;
  public:
  void clear_train();
  const ::tradingcore2pb::TrainData& train() const;
  ::tradingcore2pb::TrainData* release_train();
  ::tradingcore2pb::TrainData* mutable_train();
  void set_allocated_train(::tradingcore2pb::TrainData* train);
  private:
  const ::tradingcore2pb::TrainData& _internal_train() const;
  ::tradingcore2pb::TrainData* _internal_mutable_train();
  public:

  // @@protoc_insertion_point(class_scope:tradingcore2pb.RequestTrain)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::tradingcore2pb::BasicRequestData* basicrequest_;
  ::tradingcore2pb::TrainData* train_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tradingcore2_2eproto;
};
// -------------------------------------------------------------------

class ReplyTrain :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tradingcore2pb.ReplyTrain) */ {
 public:
  ReplyTrain();
  virtual ~ReplyTrain();

  ReplyTrain(const ReplyTrain& from);
  ReplyTrain(ReplyTrain&& from) noexcept
    : ReplyTrain() {
    *this = ::std::move(from);
  }

  inline ReplyTrain& operator=(const ReplyTrain& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReplyTrain& operator=(ReplyTrain&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReplyTrain& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReplyTrain* internal_default_instance() {
    return reinterpret_cast<const ReplyTrain*>(
               &_ReplyTrain_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ReplyTrain& a, ReplyTrain& b) {
    a.Swap(&b);
  }
  inline void Swap(ReplyTrain* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReplyTrain* New() const final {
    return CreateMaybeMessage<ReplyTrain>(nullptr);
  }

  ReplyTrain* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReplyTrain>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReplyTrain& from);
  void MergeFrom(const ReplyTrain& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReplyTrain* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tradingcore2pb.ReplyTrain";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tradingcore2_2eproto);
    return ::descriptor_table_tradingcore2_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBasicReplyFieldNumber = 1,
    kTrainFieldNumber = 2,
  };
  // .tradingcore2pb.BasicReplyData basicReply = 1;
  bool has_basicreply() const;
  private:
  bool _internal_has_basicreply() const;
  public:
  void clear_basicreply();
  const ::tradingcore2pb::BasicReplyData& basicreply() const;
  ::tradingcore2pb::BasicReplyData* release_basicreply();
  ::tradingcore2pb::BasicReplyData* mutable_basicreply();
  void set_allocated_basicreply(::tradingcore2pb::BasicReplyData* basicreply);
  private:
  const ::tradingcore2pb::BasicReplyData& _internal_basicreply() const;
  ::tradingcore2pb::BasicReplyData* _internal_mutable_basicreply();
  public:

  // .tradingcore2pb.TrainResult train = 2;
  bool has_train() const;
  private:
  bool _internal_has_train() const;
  public:
  void clear_train();
  const ::tradingcore2pb::TrainResult& train() const;
  ::tradingcore2pb::TrainResult* release_train();
  ::tradingcore2pb::TrainResult* mutable_train();
  void set_allocated_train(::tradingcore2pb::TrainResult* train);
  private:
  const ::tradingcore2pb::TrainResult& _internal_train() const;
  ::tradingcore2pb::TrainResult* _internal_mutable_train();
  public:

  // @@protoc_insertion_point(class_scope:tradingcore2pb.ReplyTrain)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::tradingcore2pb::BasicReplyData* basicreply_;
  ::tradingcore2pb::TrainResult* train_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tradingcore2_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BasicRequestData

// string token = 1;
inline void BasicRequestData::clear_token() {
  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BasicRequestData::token() const {
  // @@protoc_insertion_point(field_get:tradingcore2pb.BasicRequestData.token)
  return _internal_token();
}
inline void BasicRequestData::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:tradingcore2pb.BasicRequestData.token)
}
inline std::string* BasicRequestData::mutable_token() {
  // @@protoc_insertion_point(field_mutable:tradingcore2pb.BasicRequestData.token)
  return _internal_mutable_token();
}
inline const std::string& BasicRequestData::_internal_token() const {
  return token_.GetNoArena();
}
inline void BasicRequestData::_internal_set_token(const std::string& value) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BasicRequestData::set_token(std::string&& value) {
  
  token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tradingcore2pb.BasicRequestData.token)
}
inline void BasicRequestData::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tradingcore2pb.BasicRequestData.token)
}
inline void BasicRequestData::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tradingcore2pb.BasicRequestData.token)
}
inline std::string* BasicRequestData::_internal_mutable_token() {
  
  return token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BasicRequestData::release_token() {
  // @@protoc_insertion_point(field_release:tradingcore2pb.BasicRequestData.token)
  
  return token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BasicRequestData::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:tradingcore2pb.BasicRequestData.token)
}

// -------------------------------------------------------------------

// BasicReplyData

// .tradingcore2pb.ErrorCode errCode = 1;
inline void BasicReplyData::clear_errcode() {
  errcode_ = 0;
}
inline ::tradingcore2pb::ErrorCode BasicReplyData::_internal_errcode() const {
  return static_cast< ::tradingcore2pb::ErrorCode >(errcode_);
}
inline ::tradingcore2pb::ErrorCode BasicReplyData::errcode() const {
  // @@protoc_insertion_point(field_get:tradingcore2pb.BasicReplyData.errCode)
  return _internal_errcode();
}
inline void BasicReplyData::_internal_set_errcode(::tradingcore2pb::ErrorCode value) {
  
  errcode_ = value;
}
inline void BasicReplyData::set_errcode(::tradingcore2pb::ErrorCode value) {
  _internal_set_errcode(value);
  // @@protoc_insertion_point(field_set:tradingcore2pb.BasicReplyData.errCode)
}

// -------------------------------------------------------------------

// TrainSingleIndicator2Ex

// string indicatorName = 1;
inline void TrainSingleIndicator2Ex::clear_indicatorname() {
  indicatorname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TrainSingleIndicator2Ex::indicatorname() const {
  // @@protoc_insertion_point(field_get:tradingcore2pb.TrainSingleIndicator2Ex.indicatorName)
  return _internal_indicatorname();
}
inline void TrainSingleIndicator2Ex::set_indicatorname(const std::string& value) {
  _internal_set_indicatorname(value);
  // @@protoc_insertion_point(field_set:tradingcore2pb.TrainSingleIndicator2Ex.indicatorName)
}
inline std::string* TrainSingleIndicator2Ex::mutable_indicatorname() {
  // @@protoc_insertion_point(field_mutable:tradingcore2pb.TrainSingleIndicator2Ex.indicatorName)
  return _internal_mutable_indicatorname();
}
inline const std::string& TrainSingleIndicator2Ex::_internal_indicatorname() const {
  return indicatorname_.GetNoArena();
}
inline void TrainSingleIndicator2Ex::_internal_set_indicatorname(const std::string& value) {
  
  indicatorname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TrainSingleIndicator2Ex::set_indicatorname(std::string&& value) {
  
  indicatorname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tradingcore2pb.TrainSingleIndicator2Ex.indicatorName)
}
inline void TrainSingleIndicator2Ex::set_indicatorname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  indicatorname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tradingcore2pb.TrainSingleIndicator2Ex.indicatorName)
}
inline void TrainSingleIndicator2Ex::set_indicatorname(const char* value, size_t size) {
  
  indicatorname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tradingcore2pb.TrainSingleIndicator2Ex.indicatorName)
}
inline std::string* TrainSingleIndicator2Ex::_internal_mutable_indicatorname() {
  
  return indicatorname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TrainSingleIndicator2Ex::release_indicatorname() {
  // @@protoc_insertion_point(field_release:tradingcore2pb.TrainSingleIndicator2Ex.indicatorName)
  
  return indicatorname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TrainSingleIndicator2Ex::set_allocated_indicatorname(std::string* indicatorname) {
  if (indicatorname != nullptr) {
    
  } else {
    
  }
  indicatorname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), indicatorname);
  // @@protoc_insertion_point(field_set_allocated:tradingcore2pb.TrainSingleIndicator2Ex.indicatorName)
}

// int32 avgtimes = 2;
inline void TrainSingleIndicator2Ex::clear_avgtimes() {
  avgtimes_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrainSingleIndicator2Ex::_internal_avgtimes() const {
  return avgtimes_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrainSingleIndicator2Ex::avgtimes() const {
  // @@protoc_insertion_point(field_get:tradingcore2pb.TrainSingleIndicator2Ex.avgtimes)
  return _internal_avgtimes();
}
inline void TrainSingleIndicator2Ex::_internal_set_avgtimes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  avgtimes_ = value;
}
inline void TrainSingleIndicator2Ex::set_avgtimes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_avgtimes(value);
  // @@protoc_insertion_point(field_set:tradingcore2pb.TrainSingleIndicator2Ex.avgtimes)
}

// float off0 = 3;
inline void TrainSingleIndicator2Ex::clear_off0() {
  off0_ = 0;
}
inline float TrainSingleIndicator2Ex::_internal_off0() const {
  return off0_;
}
inline float TrainSingleIndicator2Ex::off0() const {
  // @@protoc_insertion_point(field_get:tradingcore2pb.TrainSingleIndicator2Ex.off0)
  return _internal_off0();
}
inline void TrainSingleIndicator2Ex::_internal_set_off0(float value) {
  
  off0_ = value;
}
inline void TrainSingleIndicator2Ex::set_off0(float value) {
  _internal_set_off0(value);
  // @@protoc_insertion_point(field_set:tradingcore2pb.TrainSingleIndicator2Ex.off0)
}

// float off1 = 4;
inline void TrainSingleIndicator2Ex::clear_off1() {
  off1_ = 0;
}
inline float TrainSingleIndicator2Ex::_internal_off1() const {
  return off1_;
}
inline float TrainSingleIndicator2Ex::off1() const {
  // @@protoc_insertion_point(field_get:tradingcore2pb.TrainSingleIndicator2Ex.off1)
  return _internal_off1();
}
inline void TrainSingleIndicator2Ex::_internal_set_off1(float value) {
  
  off1_ = value;
}
inline void TrainSingleIndicator2Ex::set_off1(float value) {
  _internal_set_off1(value);
  // @@protoc_insertion_point(field_set:tradingcore2pb.TrainSingleIndicator2Ex.off1)
}

// float off2 = 5;
inline void TrainSingleIndicator2Ex::clear_off2() {
  off2_ = 0;
}
inline float TrainSingleIndicator2Ex::_internal_off2() const {
  return off2_;
}
inline float TrainSingleIndicator2Ex::off2() const {
  // @@protoc_insertion_point(field_get:tradingcore2pb.TrainSingleIndicator2Ex.off2)
  return _internal_off2();
}
inline void TrainSingleIndicator2Ex::_internal_set_off2(float value) {
  
  off2_ = value;
}
inline void TrainSingleIndicator2Ex::set_off2(float value) {
  _internal_set_off2(value);
  // @@protoc_insertion_point(field_set:tradingcore2pb.TrainSingleIndicator2Ex.off2)
}

// float maxoff2 = 6;
inline void TrainSingleIndicator2Ex::clear_maxoff2() {
  maxoff2_ = 0;
}
inline float TrainSingleIndicator2Ex::_internal_maxoff2() const {
  return maxoff2_;
}
inline float TrainSingleIndicator2Ex::maxoff2() const {
  // @@protoc_insertion_point(field_get:tradingcore2pb.TrainSingleIndicator2Ex.maxoff2)
  return _internal_maxoff2();
}
inline void TrainSingleIndicator2Ex::_internal_set_maxoff2(float value) {
  
  maxoff2_ = value;
}
inline void TrainSingleIndicator2Ex::set_maxoff2(float value) {
  _internal_set_maxoff2(value);
  // @@protoc_insertion_point(field_set:tradingcore2pb.TrainSingleIndicator2Ex.maxoff2)
}

// float minval = 7;
inline void TrainSingleIndicator2Ex::clear_minval() {
  minval_ = 0;
}
inline float TrainSingleIndicator2Ex::_internal_minval() const {
  return minval_;
}
inline float TrainSingleIndicator2Ex::minval() const {
  // @@protoc_insertion_point(field_get:tradingcore2pb.TrainSingleIndicator2Ex.minval)
  return _internal_minval();
}
inline void TrainSingleIndicator2Ex::_internal_set_minval(float value) {
  
  minval_ = value;
}
inline void TrainSingleIndicator2Ex::set_minval(float value) {
  _internal_set_minval(value);
  // @@protoc_insertion_point(field_set:tradingcore2pb.TrainSingleIndicator2Ex.minval)
}

// float maxval = 8;
inline void TrainSingleIndicator2Ex::clear_maxval() {
  maxval_ = 0;
}
inline float TrainSingleIndicator2Ex::_internal_maxval() const {
  return maxval_;
}
inline float TrainSingleIndicator2Ex::maxval() const {
  // @@protoc_insertion_point(field_get:tradingcore2pb.TrainSingleIndicator2Ex.maxval)
  return _internal_maxval();
}
inline void TrainSingleIndicator2Ex::_internal_set_maxval(float value) {
  
  maxval_ = value;
}
inline void TrainSingleIndicator2Ex::set_maxval(float value) {
  _internal_set_maxval(value);
  // @@protoc_insertion_point(field_set:tradingcore2pb.TrainSingleIndicator2Ex.maxval)
}

// float cv0 = 9;
inline void TrainSingleIndicator2Ex::clear_cv0() {
  cv0_ = 0;
}
inline float TrainSingleIndicator2Ex::_internal_cv0() const {
  return cv0_;
}
inline float TrainSingleIndicator2Ex::cv0() const {
  // @@protoc_insertion_point(field_get:tradingcore2pb.TrainSingleIndicator2Ex.cv0)
  return _internal_cv0();
}
inline void TrainSingleIndicator2Ex::_internal_set_cv0(float value) {
  
  cv0_ = value;
}
inline void TrainSingleIndicator2Ex::set_cv0(float value) {
  _internal_set_cv0(value);
  // @@protoc_insertion_point(field_set:tradingcore2pb.TrainSingleIndicator2Ex.cv0)
}

// float cv0off = 10;
inline void TrainSingleIndicator2Ex::clear_cv0off() {
  cv0off_ = 0;
}
inline float TrainSingleIndicator2Ex::_internal_cv0off() const {
  return cv0off_;
}
inline float TrainSingleIndicator2Ex::cv0off() const {
  // @@protoc_insertion_point(field_get:tradingcore2pb.TrainSingleIndicator2Ex.cv0off)
  return _internal_cv0off();
}
inline void TrainSingleIndicator2Ex::_internal_set_cv0off(float value) {
  
  cv0off_ = value;
}
inline void TrainSingleIndicator2Ex::set_cv0off(float value) {
  _internal_set_cv0off(value);
  // @@protoc_insertion_point(field_set:tradingcore2pb.TrainSingleIndicator2Ex.cv0off)
}

// -------------------------------------------------------------------

// TrainData

// int64 trainID = 1;
inline void TrainData::clear_trainid() {
  trainid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TrainData::_internal_trainid() const {
  return trainid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TrainData::trainid() const {
  // @@protoc_insertion_point(field_get:tradingcore2pb.TrainData.trainID)
  return _internal_trainid();
}
inline void TrainData::_internal_set_trainid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  trainid_ = value;
}
inline void TrainData::set_trainid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_trainid(value);
  // @@protoc_insertion_point(field_set:tradingcore2pb.TrainData.trainID)
}

// string exchangeName = 2;
inline void TrainData::clear_exchangename() {
  exchangename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TrainData::exchangename() const {
  // @@protoc_insertion_point(field_get:tradingcore2pb.TrainData.exchangeName)
  return _internal_exchangename();
}
inline void TrainData::set_exchangename(const std::string& value) {
  _internal_set_exchangename(value);
  // @@protoc_insertion_point(field_set:tradingcore2pb.TrainData.exchangeName)
}
inline std::string* TrainData::mutable_exchangename() {
  // @@protoc_insertion_point(field_mutable:tradingcore2pb.TrainData.exchangeName)
  return _internal_mutable_exchangename();
}
inline const std::string& TrainData::_internal_exchangename() const {
  return exchangename_.GetNoArena();
}
inline void TrainData::_internal_set_exchangename(const std::string& value) {
  
  exchangename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TrainData::set_exchangename(std::string&& value) {
  
  exchangename_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tradingcore2pb.TrainData.exchangeName)
}
inline void TrainData::set_exchangename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  exchangename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tradingcore2pb.TrainData.exchangeName)
}
inline void TrainData::set_exchangename(const char* value, size_t size) {
  
  exchangename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tradingcore2pb.TrainData.exchangeName)
}
inline std::string* TrainData::_internal_mutable_exchangename() {
  
  return exchangename_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TrainData::release_exchangename() {
  // @@protoc_insertion_point(field_release:tradingcore2pb.TrainData.exchangeName)
  
  return exchangename_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TrainData::set_allocated_exchangename(std::string* exchangename) {
  if (exchangename != nullptr) {
    
  } else {
    
  }
  exchangename_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exchangename);
  // @@protoc_insertion_point(field_set_allocated:tradingcore2pb.TrainData.exchangeName)
}

// string assetsName = 3;
inline void TrainData::clear_assetsname() {
  assetsname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TrainData::assetsname() const {
  // @@protoc_insertion_point(field_get:tradingcore2pb.TrainData.assetsName)
  return _internal_assetsname();
}
inline void TrainData::set_assetsname(const std::string& value) {
  _internal_set_assetsname(value);
  // @@protoc_insertion_point(field_set:tradingcore2pb.TrainData.assetsName)
}
inline std::string* TrainData::mutable_assetsname() {
  // @@protoc_insertion_point(field_mutable:tradingcore2pb.TrainData.assetsName)
  return _internal_mutable_assetsname();
}
inline const std::string& TrainData::_internal_assetsname() const {
  return assetsname_.GetNoArena();
}
inline void TrainData::_internal_set_assetsname(const std::string& value) {
  
  assetsname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TrainData::set_assetsname(std::string&& value) {
  
  assetsname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tradingcore2pb.TrainData.assetsName)
}
inline void TrainData::set_assetsname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  assetsname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tradingcore2pb.TrainData.assetsName)
}
inline void TrainData::set_assetsname(const char* value, size_t size) {
  
  assetsname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tradingcore2pb.TrainData.assetsName)
}
inline std::string* TrainData::_internal_mutable_assetsname() {
  
  return assetsname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TrainData::release_assetsname() {
  // @@protoc_insertion_point(field_release:tradingcore2pb.TrainData.assetsName)
  
  return assetsname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TrainData::set_allocated_assetsname(std::string* assetsname) {
  if (assetsname != nullptr) {
    
  } else {
    
  }
  assetsname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), assetsname);
  // @@protoc_insertion_point(field_set_allocated:tradingcore2pb.TrainData.assetsName)
}

// string strategyName = 4;
inline void TrainData::clear_strategyname() {
  strategyname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TrainData::strategyname() const {
  // @@protoc_insertion_point(field_get:tradingcore2pb.TrainData.strategyName)
  return _internal_strategyname();
}
inline void TrainData::set_strategyname(const std::string& value) {
  _internal_set_strategyname(value);
  // @@protoc_insertion_point(field_set:tradingcore2pb.TrainData.strategyName)
}
inline std::string* TrainData::mutable_strategyname() {
  // @@protoc_insertion_point(field_mutable:tradingcore2pb.TrainData.strategyName)
  return _internal_mutable_strategyname();
}
inline const std::string& TrainData::_internal_strategyname() const {
  return strategyname_.GetNoArena();
}
inline void TrainData::_internal_set_strategyname(const std::string& value) {
  
  strategyname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TrainData::set_strategyname(std::string&& value) {
  
  strategyname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tradingcore2pb.TrainData.strategyName)
}
inline void TrainData::set_strategyname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  strategyname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tradingcore2pb.TrainData.strategyName)
}
inline void TrainData::set_strategyname(const char* value, size_t size) {
  
  strategyname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tradingcore2pb.TrainData.strategyName)
}
inline std::string* TrainData::_internal_mutable_strategyname() {
  
  return strategyname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TrainData::release_strategyname() {
  // @@protoc_insertion_point(field_release:tradingcore2pb.TrainData.strategyName)
  
  return strategyname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TrainData::set_allocated_strategyname(std::string* strategyname) {
  if (strategyname != nullptr) {
    
  } else {
    
  }
  strategyname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), strategyname);
  // @@protoc_insertion_point(field_set_allocated:tradingcore2pb.TrainData.strategyName)
}

// string strParam = 5;
inline void TrainData::clear_strparam() {
  strparam_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TrainData::strparam() const {
  // @@protoc_insertion_point(field_get:tradingcore2pb.TrainData.strParam)
  return _internal_strparam();
}
inline void TrainData::set_strparam(const std::string& value) {
  _internal_set_strparam(value);
  // @@protoc_insertion_point(field_set:tradingcore2pb.TrainData.strParam)
}
inline std::string* TrainData::mutable_strparam() {
  // @@protoc_insertion_point(field_mutable:tradingcore2pb.TrainData.strParam)
  return _internal_mutable_strparam();
}
inline const std::string& TrainData::_internal_strparam() const {
  return strparam_.GetNoArena();
}
inline void TrainData::_internal_set_strparam(const std::string& value) {
  
  strparam_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TrainData::set_strparam(std::string&& value) {
  
  strparam_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tradingcore2pb.TrainData.strParam)
}
inline void TrainData::set_strparam(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  strparam_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tradingcore2pb.TrainData.strParam)
}
inline void TrainData::set_strparam(const char* value, size_t size) {
  
  strparam_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tradingcore2pb.TrainData.strParam)
}
inline std::string* TrainData::_internal_mutable_strparam() {
  
  return strparam_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TrainData::release_strparam() {
  // @@protoc_insertion_point(field_release:tradingcore2pb.TrainData.strParam)
  
  return strparam_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TrainData::set_allocated_strparam(std::string* strparam) {
  if (strparam != nullptr) {
    
  } else {
    
  }
  strparam_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), strparam);
  // @@protoc_insertion_point(field_set_allocated:tradingcore2pb.TrainData.strParam)
}

// string outputPath = 6;
inline void TrainData::clear_outputpath() {
  outputpath_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TrainData::outputpath() const {
  // @@protoc_insertion_point(field_get:tradingcore2pb.TrainData.outputPath)
  return _internal_outputpath();
}
inline void TrainData::set_outputpath(const std::string& value) {
  _internal_set_outputpath(value);
  // @@protoc_insertion_point(field_set:tradingcore2pb.TrainData.outputPath)
}
inline std::string* TrainData::mutable_outputpath() {
  // @@protoc_insertion_point(field_mutable:tradingcore2pb.TrainData.outputPath)
  return _internal_mutable_outputpath();
}
inline const std::string& TrainData::_internal_outputpath() const {
  return outputpath_.GetNoArena();
}
inline void TrainData::_internal_set_outputpath(const std::string& value) {
  
  outputpath_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TrainData::set_outputpath(std::string&& value) {
  
  outputpath_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tradingcore2pb.TrainData.outputPath)
}
inline void TrainData::set_outputpath(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  outputpath_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tradingcore2pb.TrainData.outputPath)
}
inline void TrainData::set_outputpath(const char* value, size_t size) {
  
  outputpath_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tradingcore2pb.TrainData.outputPath)
}
inline std::string* TrainData::_internal_mutable_outputpath() {
  
  return outputpath_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TrainData::release_outputpath() {
  // @@protoc_insertion_point(field_release:tradingcore2pb.TrainData.outputPath)
  
  return outputpath_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TrainData::set_allocated_outputpath(std::string* outputpath) {
  if (outputpath != nullptr) {
    
  } else {
    
  }
  outputpath_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), outputpath);
  // @@protoc_insertion_point(field_set_allocated:tradingcore2pb.TrainData.outputPath)
}

// float invest = 7;
inline void TrainData::clear_invest() {
  invest_ = 0;
}
inline float TrainData::_internal_invest() const {
  return invest_;
}
inline float TrainData::invest() const {
  // @@protoc_insertion_point(field_get:tradingcore2pb.TrainData.invest)
  return _internal_invest();
}
inline void TrainData::_internal_set_invest(float value) {
  
  invest_ = value;
}
inline void TrainData::set_invest(float value) {
  _internal_set_invest(value);
  // @@protoc_insertion_point(field_set:tradingcore2pb.TrainData.invest)
}

// float minValidReturn = 8;
inline void TrainData::clear_minvalidreturn() {
  minvalidreturn_ = 0;
}
inline float TrainData::_internal_minvalidreturn() const {
  return minvalidreturn_;
}
inline float TrainData::minvalidreturn() const {
  // @@protoc_insertion_point(field_get:tradingcore2pb.TrainData.minValidReturn)
  return _internal_minvalidreturn();
}
inline void TrainData::_internal_set_minvalidreturn(float value) {
  
  minvalidreturn_ = value;
}
inline void TrainData::set_minvalidreturn(float value) {
  _internal_set_minvalidreturn(value);
  // @@protoc_insertion_point(field_set:tradingcore2pb.TrainData.minValidReturn)
}

// .tradingcore2pb.TrainSingleIndicator2Ex si2 = 100;
inline bool TrainData::_internal_has_si2() const {
  return trainParam_case() == kSi2;
}
inline bool TrainData::has_si2() const {
  return _internal_has_si2();
}
inline void TrainData::set_has_si2() {
  _oneof_case_[0] = kSi2;
}
inline void TrainData::clear_si2() {
  if (_internal_has_si2()) {
    delete trainParam_.si2_;
    clear_has_trainParam();
  }
}
inline ::tradingcore2pb::TrainSingleIndicator2Ex* TrainData::release_si2() {
  // @@protoc_insertion_point(field_release:tradingcore2pb.TrainData.si2)
  if (_internal_has_si2()) {
    clear_has_trainParam();
      ::tradingcore2pb::TrainSingleIndicator2Ex* temp = trainParam_.si2_;
    trainParam_.si2_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tradingcore2pb::TrainSingleIndicator2Ex& TrainData::_internal_si2() const {
  return _internal_has_si2()
      ? *trainParam_.si2_
      : *reinterpret_cast< ::tradingcore2pb::TrainSingleIndicator2Ex*>(&::tradingcore2pb::_TrainSingleIndicator2Ex_default_instance_);
}
inline const ::tradingcore2pb::TrainSingleIndicator2Ex& TrainData::si2() const {
  // @@protoc_insertion_point(field_get:tradingcore2pb.TrainData.si2)
  return _internal_si2();
}
inline ::tradingcore2pb::TrainSingleIndicator2Ex* TrainData::_internal_mutable_si2() {
  if (!_internal_has_si2()) {
    clear_trainParam();
    set_has_si2();
    trainParam_.si2_ = CreateMaybeMessage< ::tradingcore2pb::TrainSingleIndicator2Ex >(
        GetArenaNoVirtual());
  }
  return trainParam_.si2_;
}
inline ::tradingcore2pb::TrainSingleIndicator2Ex* TrainData::mutable_si2() {
  // @@protoc_insertion_point(field_mutable:tradingcore2pb.TrainData.si2)
  return _internal_mutable_si2();
}

inline bool TrainData::has_trainParam() const {
  return trainParam_case() != TRAINPARAM_NOT_SET;
}
inline void TrainData::clear_has_trainParam() {
  _oneof_case_[0] = TRAINPARAM_NOT_SET;
}
inline TrainData::TrainParamCase TrainData::trainParam_case() const {
  return TrainData::TrainParamCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// TrainNodeResult

// float maxDrawdown = 1;
inline void TrainNodeResult::clear_maxdrawdown() {
  maxdrawdown_ = 0;
}
inline float TrainNodeResult::_internal_maxdrawdown() const {
  return maxdrawdown_;
}
inline float TrainNodeResult::maxdrawdown() const {
  // @@protoc_insertion_point(field_get:tradingcore2pb.TrainNodeResult.maxDrawdown)
  return _internal_maxdrawdown();
}
inline void TrainNodeResult::_internal_set_maxdrawdown(float value) {
  
  maxdrawdown_ = value;
}
inline void TrainNodeResult::set_maxdrawdown(float value) {
  _internal_set_maxdrawdown(value);
  // @@protoc_insertion_point(field_set:tradingcore2pb.TrainNodeResult.maxDrawdown)
}

// float sharpe = 2;
inline void TrainNodeResult::clear_sharpe() {
  sharpe_ = 0;
}
inline float TrainNodeResult::_internal_sharpe() const {
  return sharpe_;
}
inline float TrainNodeResult::sharpe() const {
  // @@protoc_insertion_point(field_get:tradingcore2pb.TrainNodeResult.sharpe)
  return _internal_sharpe();
}
inline void TrainNodeResult::_internal_set_sharpe(float value) {
  
  sharpe_ = value;
}
inline void TrainNodeResult::set_sharpe(float value) {
  _internal_set_sharpe(value);
  // @@protoc_insertion_point(field_set:tradingcore2pb.TrainNodeResult.sharpe)
}

// float annualizedReturns = 3;
inline void TrainNodeResult::clear_annualizedreturns() {
  annualizedreturns_ = 0;
}
inline float TrainNodeResult::_internal_annualizedreturns() const {
  return annualizedreturns_;
}
inline float TrainNodeResult::annualizedreturns() const {
  // @@protoc_insertion_point(field_get:tradingcore2pb.TrainNodeResult.annualizedReturns)
  return _internal_annualizedreturns();
}
inline void TrainNodeResult::_internal_set_annualizedreturns(float value) {
  
  annualizedreturns_ = value;
}
inline void TrainNodeResult::set_annualizedreturns(float value) {
  _internal_set_annualizedreturns(value);
  // @@protoc_insertion_point(field_set:tradingcore2pb.TrainNodeResult.annualizedReturns)
}

// float annualizedVolatility = 4;
inline void TrainNodeResult::clear_annualizedvolatility() {
  annualizedvolatility_ = 0;
}
inline float TrainNodeResult::_internal_annualizedvolatility() const {
  return annualizedvolatility_;
}
inline float TrainNodeResult::annualizedvolatility() const {
  // @@protoc_insertion_point(field_get:tradingcore2pb.TrainNodeResult.annualizedVolatility)
  return _internal_annualizedvolatility();
}
inline void TrainNodeResult::_internal_set_annualizedvolatility(float value) {
  
  annualizedvolatility_ = value;
}
inline void TrainNodeResult::set_annualizedvolatility(float value) {
  _internal_set_annualizedvolatility(value);
  // @@protoc_insertion_point(field_set:tradingcore2pb.TrainNodeResult.annualizedVolatility)
}

// float totalReturns = 5;
inline void TrainNodeResult::clear_totalreturns() {
  totalreturns_ = 0;
}
inline float TrainNodeResult::_internal_totalreturns() const {
  return totalreturns_;
}
inline float TrainNodeResult::totalreturns() const {
  // @@protoc_insertion_point(field_get:tradingcore2pb.TrainNodeResult.totalReturns)
  return _internal_totalreturns();
}
inline void TrainNodeResult::_internal_set_totalreturns(float value) {
  
  totalreturns_ = value;
}
inline void TrainNodeResult::set_totalreturns(float value) {
  _internal_set_totalreturns(value);
  // @@protoc_insertion_point(field_set:tradingcore2pb.TrainNodeResult.totalReturns)
}

// int32 tradingTimes = 6;
inline void TrainNodeResult::clear_tradingtimes() {
  tradingtimes_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrainNodeResult::_internal_tradingtimes() const {
  return tradingtimes_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrainNodeResult::tradingtimes() const {
  // @@protoc_insertion_point(field_get:tradingcore2pb.TrainNodeResult.tradingTimes)
  return _internal_tradingtimes();
}
inline void TrainNodeResult::_internal_set_tradingtimes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  tradingtimes_ = value;
}
inline void TrainNodeResult::set_tradingtimes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tradingtimes(value);
  // @@protoc_insertion_point(field_set:tradingcore2pb.TrainNodeResult.tradingTimes)
}

// int32 failTimes = 7;
inline void TrainNodeResult::clear_failtimes() {
  failtimes_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrainNodeResult::_internal_failtimes() const {
  return failtimes_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrainNodeResult::failtimes() const {
  // @@protoc_insertion_point(field_get:tradingcore2pb.TrainNodeResult.failTimes)
  return _internal_failtimes();
}
inline void TrainNodeResult::_internal_set_failtimes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  failtimes_ = value;
}
inline void TrainNodeResult::set_failtimes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_failtimes(value);
  // @@protoc_insertion_point(field_set:tradingcore2pb.TrainNodeResult.failTimes)
}

// int32 stoplossTimes = 8;
inline void TrainNodeResult::clear_stoplosstimes() {
  stoplosstimes_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrainNodeResult::_internal_stoplosstimes() const {
  return stoplosstimes_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrainNodeResult::stoplosstimes() const {
  // @@protoc_insertion_point(field_get:tradingcore2pb.TrainNodeResult.stoplossTimes)
  return _internal_stoplosstimes();
}
inline void TrainNodeResult::_internal_set_stoplosstimes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  stoplosstimes_ = value;
}
inline void TrainNodeResult::set_stoplosstimes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_stoplosstimes(value);
  // @@protoc_insertion_point(field_set:tradingcore2pb.TrainNodeResult.stoplossTimes)
}

// float winRate = 9;
inline void TrainNodeResult::clear_winrate() {
  winrate_ = 0;
}
inline float TrainNodeResult::_internal_winrate() const {
  return winrate_;
}
inline float TrainNodeResult::winrate() const {
  // @@protoc_insertion_point(field_get:tradingcore2pb.TrainNodeResult.winRate)
  return _internal_winrate();
}
inline void TrainNodeResult::_internal_set_winrate(float value) {
  
  winrate_ = value;
}
inline void TrainNodeResult::set_winrate(float value) {
  _internal_set_winrate(value);
  // @@protoc_insertion_point(field_set:tradingcore2pb.TrainNodeResult.winRate)
}

// string name = 10;
inline void TrainNodeResult::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TrainNodeResult::name() const {
  // @@protoc_insertion_point(field_get:tradingcore2pb.TrainNodeResult.name)
  return _internal_name();
}
inline void TrainNodeResult::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:tradingcore2pb.TrainNodeResult.name)
}
inline std::string* TrainNodeResult::mutable_name() {
  // @@protoc_insertion_point(field_mutable:tradingcore2pb.TrainNodeResult.name)
  return _internal_mutable_name();
}
inline const std::string& TrainNodeResult::_internal_name() const {
  return name_.GetNoArena();
}
inline void TrainNodeResult::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TrainNodeResult::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tradingcore2pb.TrainNodeResult.name)
}
inline void TrainNodeResult::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tradingcore2pb.TrainNodeResult.name)
}
inline void TrainNodeResult::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tradingcore2pb.TrainNodeResult.name)
}
inline std::string* TrainNodeResult::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TrainNodeResult::release_name() {
  // @@protoc_insertion_point(field_release:tradingcore2pb.TrainNodeResult.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TrainNodeResult::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:tradingcore2pb.TrainNodeResult.name)
}

// -------------------------------------------------------------------

// TrainResult

// int64 trainID = 1;
inline void TrainResult::clear_trainid() {
  trainid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TrainResult::_internal_trainid() const {
  return trainid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TrainResult::trainid() const {
  // @@protoc_insertion_point(field_get:tradingcore2pb.TrainResult.trainID)
  return _internal_trainid();
}
inline void TrainResult::_internal_set_trainid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  trainid_ = value;
}
inline void TrainResult::set_trainid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_trainid(value);
  // @@protoc_insertion_point(field_set:tradingcore2pb.TrainResult.trainID)
}

// string exchangeName = 2;
inline void TrainResult::clear_exchangename() {
  exchangename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TrainResult::exchangename() const {
  // @@protoc_insertion_point(field_get:tradingcore2pb.TrainResult.exchangeName)
  return _internal_exchangename();
}
inline void TrainResult::set_exchangename(const std::string& value) {
  _internal_set_exchangename(value);
  // @@protoc_insertion_point(field_set:tradingcore2pb.TrainResult.exchangeName)
}
inline std::string* TrainResult::mutable_exchangename() {
  // @@protoc_insertion_point(field_mutable:tradingcore2pb.TrainResult.exchangeName)
  return _internal_mutable_exchangename();
}
inline const std::string& TrainResult::_internal_exchangename() const {
  return exchangename_.GetNoArena();
}
inline void TrainResult::_internal_set_exchangename(const std::string& value) {
  
  exchangename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TrainResult::set_exchangename(std::string&& value) {
  
  exchangename_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tradingcore2pb.TrainResult.exchangeName)
}
inline void TrainResult::set_exchangename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  exchangename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tradingcore2pb.TrainResult.exchangeName)
}
inline void TrainResult::set_exchangename(const char* value, size_t size) {
  
  exchangename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tradingcore2pb.TrainResult.exchangeName)
}
inline std::string* TrainResult::_internal_mutable_exchangename() {
  
  return exchangename_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TrainResult::release_exchangename() {
  // @@protoc_insertion_point(field_release:tradingcore2pb.TrainResult.exchangeName)
  
  return exchangename_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TrainResult::set_allocated_exchangename(std::string* exchangename) {
  if (exchangename != nullptr) {
    
  } else {
    
  }
  exchangename_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exchangename);
  // @@protoc_insertion_point(field_set_allocated:tradingcore2pb.TrainResult.exchangeName)
}

// string assetsName = 3;
inline void TrainResult::clear_assetsname() {
  assetsname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TrainResult::assetsname() const {
  // @@protoc_insertion_point(field_get:tradingcore2pb.TrainResult.assetsName)
  return _internal_assetsname();
}
inline void TrainResult::set_assetsname(const std::string& value) {
  _internal_set_assetsname(value);
  // @@protoc_insertion_point(field_set:tradingcore2pb.TrainResult.assetsName)
}
inline std::string* TrainResult::mutable_assetsname() {
  // @@protoc_insertion_point(field_mutable:tradingcore2pb.TrainResult.assetsName)
  return _internal_mutable_assetsname();
}
inline const std::string& TrainResult::_internal_assetsname() const {
  return assetsname_.GetNoArena();
}
inline void TrainResult::_internal_set_assetsname(const std::string& value) {
  
  assetsname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TrainResult::set_assetsname(std::string&& value) {
  
  assetsname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tradingcore2pb.TrainResult.assetsName)
}
inline void TrainResult::set_assetsname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  assetsname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tradingcore2pb.TrainResult.assetsName)
}
inline void TrainResult::set_assetsname(const char* value, size_t size) {
  
  assetsname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tradingcore2pb.TrainResult.assetsName)
}
inline std::string* TrainResult::_internal_mutable_assetsname() {
  
  return assetsname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TrainResult::release_assetsname() {
  // @@protoc_insertion_point(field_release:tradingcore2pb.TrainResult.assetsName)
  
  return assetsname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TrainResult::set_allocated_assetsname(std::string* assetsname) {
  if (assetsname != nullptr) {
    
  } else {
    
  }
  assetsname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), assetsname);
  // @@protoc_insertion_point(field_set_allocated:tradingcore2pb.TrainResult.assetsName)
}

// string strategyName = 4;
inline void TrainResult::clear_strategyname() {
  strategyname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TrainResult::strategyname() const {
  // @@protoc_insertion_point(field_get:tradingcore2pb.TrainResult.strategyName)
  return _internal_strategyname();
}
inline void TrainResult::set_strategyname(const std::string& value) {
  _internal_set_strategyname(value);
  // @@protoc_insertion_point(field_set:tradingcore2pb.TrainResult.strategyName)
}
inline std::string* TrainResult::mutable_strategyname() {
  // @@protoc_insertion_point(field_mutable:tradingcore2pb.TrainResult.strategyName)
  return _internal_mutable_strategyname();
}
inline const std::string& TrainResult::_internal_strategyname() const {
  return strategyname_.GetNoArena();
}
inline void TrainResult::_internal_set_strategyname(const std::string& value) {
  
  strategyname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TrainResult::set_strategyname(std::string&& value) {
  
  strategyname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tradingcore2pb.TrainResult.strategyName)
}
inline void TrainResult::set_strategyname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  strategyname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tradingcore2pb.TrainResult.strategyName)
}
inline void TrainResult::set_strategyname(const char* value, size_t size) {
  
  strategyname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tradingcore2pb.TrainResult.strategyName)
}
inline std::string* TrainResult::_internal_mutable_strategyname() {
  
  return strategyname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TrainResult::release_strategyname() {
  // @@protoc_insertion_point(field_release:tradingcore2pb.TrainResult.strategyName)
  
  return strategyname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TrainResult::set_allocated_strategyname(std::string* strategyname) {
  if (strategyname != nullptr) {
    
  } else {
    
  }
  strategyname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), strategyname);
  // @@protoc_insertion_point(field_set_allocated:tradingcore2pb.TrainResult.strategyName)
}

// string strParam = 5;
inline void TrainResult::clear_strparam() {
  strparam_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TrainResult::strparam() const {
  // @@protoc_insertion_point(field_get:tradingcore2pb.TrainResult.strParam)
  return _internal_strparam();
}
inline void TrainResult::set_strparam(const std::string& value) {
  _internal_set_strparam(value);
  // @@protoc_insertion_point(field_set:tradingcore2pb.TrainResult.strParam)
}
inline std::string* TrainResult::mutable_strparam() {
  // @@protoc_insertion_point(field_mutable:tradingcore2pb.TrainResult.strParam)
  return _internal_mutable_strparam();
}
inline const std::string& TrainResult::_internal_strparam() const {
  return strparam_.GetNoArena();
}
inline void TrainResult::_internal_set_strparam(const std::string& value) {
  
  strparam_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TrainResult::set_strparam(std::string&& value) {
  
  strparam_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tradingcore2pb.TrainResult.strParam)
}
inline void TrainResult::set_strparam(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  strparam_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tradingcore2pb.TrainResult.strParam)
}
inline void TrainResult::set_strparam(const char* value, size_t size) {
  
  strparam_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tradingcore2pb.TrainResult.strParam)
}
inline std::string* TrainResult::_internal_mutable_strparam() {
  
  return strparam_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TrainResult::release_strparam() {
  // @@protoc_insertion_point(field_release:tradingcore2pb.TrainResult.strParam)
  
  return strparam_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TrainResult::set_allocated_strparam(std::string* strparam) {
  if (strparam != nullptr) {
    
  } else {
    
  }
  strparam_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), strparam);
  // @@protoc_insertion_point(field_set_allocated:tradingcore2pb.TrainResult.strParam)
}

// .tradingcore2pb.ErrorCode errCode = 6;
inline void TrainResult::clear_errcode() {
  errcode_ = 0;
}
inline ::tradingcore2pb::ErrorCode TrainResult::_internal_errcode() const {
  return static_cast< ::tradingcore2pb::ErrorCode >(errcode_);
}
inline ::tradingcore2pb::ErrorCode TrainResult::errcode() const {
  // @@protoc_insertion_point(field_get:tradingcore2pb.TrainResult.errCode)
  return _internal_errcode();
}
inline void TrainResult::_internal_set_errcode(::tradingcore2pb::ErrorCode value) {
  
  errcode_ = value;
}
inline void TrainResult::set_errcode(::tradingcore2pb::ErrorCode value) {
  _internal_set_errcode(value);
  // @@protoc_insertion_point(field_set:tradingcore2pb.TrainResult.errCode)
}

// repeated .tradingcore2pb.TrainNodeResult nodes = 7;
inline int TrainResult::_internal_nodes_size() const {
  return nodes_.size();
}
inline int TrainResult::nodes_size() const {
  return _internal_nodes_size();
}
inline void TrainResult::clear_nodes() {
  nodes_.Clear();
}
inline ::tradingcore2pb::TrainNodeResult* TrainResult::mutable_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:tradingcore2pb.TrainResult.nodes)
  return nodes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tradingcore2pb::TrainNodeResult >*
TrainResult::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:tradingcore2pb.TrainResult.nodes)
  return &nodes_;
}
inline const ::tradingcore2pb::TrainNodeResult& TrainResult::_internal_nodes(int index) const {
  return nodes_.Get(index);
}
inline const ::tradingcore2pb::TrainNodeResult& TrainResult::nodes(int index) const {
  // @@protoc_insertion_point(field_get:tradingcore2pb.TrainResult.nodes)
  return _internal_nodes(index);
}
inline ::tradingcore2pb::TrainNodeResult* TrainResult::_internal_add_nodes() {
  return nodes_.Add();
}
inline ::tradingcore2pb::TrainNodeResult* TrainResult::add_nodes() {
  // @@protoc_insertion_point(field_add:tradingcore2pb.TrainResult.nodes)
  return _internal_add_nodes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tradingcore2pb::TrainNodeResult >&
TrainResult::nodes() const {
  // @@protoc_insertion_point(field_list:tradingcore2pb.TrainResult.nodes)
  return nodes_;
}

// -------------------------------------------------------------------

// RequestServerInfo

// .tradingcore2pb.BasicRequestData basicRequest = 1;
inline bool RequestServerInfo::_internal_has_basicrequest() const {
  return this != internal_default_instance() && basicrequest_ != nullptr;
}
inline bool RequestServerInfo::has_basicrequest() const {
  return _internal_has_basicrequest();
}
inline void RequestServerInfo::clear_basicrequest() {
  if (GetArenaNoVirtual() == nullptr && basicrequest_ != nullptr) {
    delete basicrequest_;
  }
  basicrequest_ = nullptr;
}
inline const ::tradingcore2pb::BasicRequestData& RequestServerInfo::_internal_basicrequest() const {
  const ::tradingcore2pb::BasicRequestData* p = basicrequest_;
  return p != nullptr ? *p : *reinterpret_cast<const ::tradingcore2pb::BasicRequestData*>(
      &::tradingcore2pb::_BasicRequestData_default_instance_);
}
inline const ::tradingcore2pb::BasicRequestData& RequestServerInfo::basicrequest() const {
  // @@protoc_insertion_point(field_get:tradingcore2pb.RequestServerInfo.basicRequest)
  return _internal_basicrequest();
}
inline ::tradingcore2pb::BasicRequestData* RequestServerInfo::release_basicrequest() {
  // @@protoc_insertion_point(field_release:tradingcore2pb.RequestServerInfo.basicRequest)
  
  ::tradingcore2pb::BasicRequestData* temp = basicrequest_;
  basicrequest_ = nullptr;
  return temp;
}
inline ::tradingcore2pb::BasicRequestData* RequestServerInfo::_internal_mutable_basicrequest() {
  
  if (basicrequest_ == nullptr) {
    auto* p = CreateMaybeMessage<::tradingcore2pb::BasicRequestData>(GetArenaNoVirtual());
    basicrequest_ = p;
  }
  return basicrequest_;
}
inline ::tradingcore2pb::BasicRequestData* RequestServerInfo::mutable_basicrequest() {
  // @@protoc_insertion_point(field_mutable:tradingcore2pb.RequestServerInfo.basicRequest)
  return _internal_mutable_basicrequest();
}
inline void RequestServerInfo::set_allocated_basicrequest(::tradingcore2pb::BasicRequestData* basicrequest) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete basicrequest_;
  }
  if (basicrequest) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      basicrequest = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, basicrequest, submessage_arena);
    }
    
  } else {
    
  }
  basicrequest_ = basicrequest;
  // @@protoc_insertion_point(field_set_allocated:tradingcore2pb.RequestServerInfo.basicRequest)
}

// -------------------------------------------------------------------

// ReplyServerInfo

// .tradingcore2pb.BasicReplyData basicReply = 1;
inline bool ReplyServerInfo::_internal_has_basicreply() const {
  return this != internal_default_instance() && basicreply_ != nullptr;
}
inline bool ReplyServerInfo::has_basicreply() const {
  return _internal_has_basicreply();
}
inline void ReplyServerInfo::clear_basicreply() {
  if (GetArenaNoVirtual() == nullptr && basicreply_ != nullptr) {
    delete basicreply_;
  }
  basicreply_ = nullptr;
}
inline const ::tradingcore2pb::BasicReplyData& ReplyServerInfo::_internal_basicreply() const {
  const ::tradingcore2pb::BasicReplyData* p = basicreply_;
  return p != nullptr ? *p : *reinterpret_cast<const ::tradingcore2pb::BasicReplyData*>(
      &::tradingcore2pb::_BasicReplyData_default_instance_);
}
inline const ::tradingcore2pb::BasicReplyData& ReplyServerInfo::basicreply() const {
  // @@protoc_insertion_point(field_get:tradingcore2pb.ReplyServerInfo.basicReply)
  return _internal_basicreply();
}
inline ::tradingcore2pb::BasicReplyData* ReplyServerInfo::release_basicreply() {
  // @@protoc_insertion_point(field_release:tradingcore2pb.ReplyServerInfo.basicReply)
  
  ::tradingcore2pb::BasicReplyData* temp = basicreply_;
  basicreply_ = nullptr;
  return temp;
}
inline ::tradingcore2pb::BasicReplyData* ReplyServerInfo::_internal_mutable_basicreply() {
  
  if (basicreply_ == nullptr) {
    auto* p = CreateMaybeMessage<::tradingcore2pb::BasicReplyData>(GetArenaNoVirtual());
    basicreply_ = p;
  }
  return basicreply_;
}
inline ::tradingcore2pb::BasicReplyData* ReplyServerInfo::mutable_basicreply() {
  // @@protoc_insertion_point(field_mutable:tradingcore2pb.ReplyServerInfo.basicReply)
  return _internal_mutable_basicreply();
}
inline void ReplyServerInfo::set_allocated_basicreply(::tradingcore2pb::BasicReplyData* basicreply) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete basicreply_;
  }
  if (basicreply) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      basicreply = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, basicreply, submessage_arena);
    }
    
  } else {
    
  }
  basicreply_ = basicreply;
  // @@protoc_insertion_point(field_set_allocated:tradingcore2pb.ReplyServerInfo.basicReply)
}

// int32 maxTasks = 2;
inline void ReplyServerInfo::clear_maxtasks() {
  maxtasks_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReplyServerInfo::_internal_maxtasks() const {
  return maxtasks_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReplyServerInfo::maxtasks() const {
  // @@protoc_insertion_point(field_get:tradingcore2pb.ReplyServerInfo.maxTasks)
  return _internal_maxtasks();
}
inline void ReplyServerInfo::_internal_set_maxtasks(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  maxtasks_ = value;
}
inline void ReplyServerInfo::set_maxtasks(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_maxtasks(value);
  // @@protoc_insertion_point(field_set:tradingcore2pb.ReplyServerInfo.maxTasks)
}

// int32 curTasks = 3;
inline void ReplyServerInfo::clear_curtasks() {
  curtasks_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReplyServerInfo::_internal_curtasks() const {
  return curtasks_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReplyServerInfo::curtasks() const {
  // @@protoc_insertion_point(field_get:tradingcore2pb.ReplyServerInfo.curTasks)
  return _internal_curtasks();
}
inline void ReplyServerInfo::_internal_set_curtasks(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  curtasks_ = value;
}
inline void ReplyServerInfo::set_curtasks(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_curtasks(value);
  // @@protoc_insertion_point(field_set:tradingcore2pb.ReplyServerInfo.curTasks)
}

// -------------------------------------------------------------------

// RequestTrain

// .tradingcore2pb.BasicRequestData basicRequest = 1;
inline bool RequestTrain::_internal_has_basicrequest() const {
  return this != internal_default_instance() && basicrequest_ != nullptr;
}
inline bool RequestTrain::has_basicrequest() const {
  return _internal_has_basicrequest();
}
inline void RequestTrain::clear_basicrequest() {
  if (GetArenaNoVirtual() == nullptr && basicrequest_ != nullptr) {
    delete basicrequest_;
  }
  basicrequest_ = nullptr;
}
inline const ::tradingcore2pb::BasicRequestData& RequestTrain::_internal_basicrequest() const {
  const ::tradingcore2pb::BasicRequestData* p = basicrequest_;
  return p != nullptr ? *p : *reinterpret_cast<const ::tradingcore2pb::BasicRequestData*>(
      &::tradingcore2pb::_BasicRequestData_default_instance_);
}
inline const ::tradingcore2pb::BasicRequestData& RequestTrain::basicrequest() const {
  // @@protoc_insertion_point(field_get:tradingcore2pb.RequestTrain.basicRequest)
  return _internal_basicrequest();
}
inline ::tradingcore2pb::BasicRequestData* RequestTrain::release_basicrequest() {
  // @@protoc_insertion_point(field_release:tradingcore2pb.RequestTrain.basicRequest)
  
  ::tradingcore2pb::BasicRequestData* temp = basicrequest_;
  basicrequest_ = nullptr;
  return temp;
}
inline ::tradingcore2pb::BasicRequestData* RequestTrain::_internal_mutable_basicrequest() {
  
  if (basicrequest_ == nullptr) {
    auto* p = CreateMaybeMessage<::tradingcore2pb::BasicRequestData>(GetArenaNoVirtual());
    basicrequest_ = p;
  }
  return basicrequest_;
}
inline ::tradingcore2pb::BasicRequestData* RequestTrain::mutable_basicrequest() {
  // @@protoc_insertion_point(field_mutable:tradingcore2pb.RequestTrain.basicRequest)
  return _internal_mutable_basicrequest();
}
inline void RequestTrain::set_allocated_basicrequest(::tradingcore2pb::BasicRequestData* basicrequest) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete basicrequest_;
  }
  if (basicrequest) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      basicrequest = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, basicrequest, submessage_arena);
    }
    
  } else {
    
  }
  basicrequest_ = basicrequest;
  // @@protoc_insertion_point(field_set_allocated:tradingcore2pb.RequestTrain.basicRequest)
}

// .tradingcore2pb.TrainData train = 2;
inline bool RequestTrain::_internal_has_train() const {
  return this != internal_default_instance() && train_ != nullptr;
}
inline bool RequestTrain::has_train() const {
  return _internal_has_train();
}
inline void RequestTrain::clear_train() {
  if (GetArenaNoVirtual() == nullptr && train_ != nullptr) {
    delete train_;
  }
  train_ = nullptr;
}
inline const ::tradingcore2pb::TrainData& RequestTrain::_internal_train() const {
  const ::tradingcore2pb::TrainData* p = train_;
  return p != nullptr ? *p : *reinterpret_cast<const ::tradingcore2pb::TrainData*>(
      &::tradingcore2pb::_TrainData_default_instance_);
}
inline const ::tradingcore2pb::TrainData& RequestTrain::train() const {
  // @@protoc_insertion_point(field_get:tradingcore2pb.RequestTrain.train)
  return _internal_train();
}
inline ::tradingcore2pb::TrainData* RequestTrain::release_train() {
  // @@protoc_insertion_point(field_release:tradingcore2pb.RequestTrain.train)
  
  ::tradingcore2pb::TrainData* temp = train_;
  train_ = nullptr;
  return temp;
}
inline ::tradingcore2pb::TrainData* RequestTrain::_internal_mutable_train() {
  
  if (train_ == nullptr) {
    auto* p = CreateMaybeMessage<::tradingcore2pb::TrainData>(GetArenaNoVirtual());
    train_ = p;
  }
  return train_;
}
inline ::tradingcore2pb::TrainData* RequestTrain::mutable_train() {
  // @@protoc_insertion_point(field_mutable:tradingcore2pb.RequestTrain.train)
  return _internal_mutable_train();
}
inline void RequestTrain::set_allocated_train(::tradingcore2pb::TrainData* train) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete train_;
  }
  if (train) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      train = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, train, submessage_arena);
    }
    
  } else {
    
  }
  train_ = train;
  // @@protoc_insertion_point(field_set_allocated:tradingcore2pb.RequestTrain.train)
}

// -------------------------------------------------------------------

// ReplyTrain

// .tradingcore2pb.BasicReplyData basicReply = 1;
inline bool ReplyTrain::_internal_has_basicreply() const {
  return this != internal_default_instance() && basicreply_ != nullptr;
}
inline bool ReplyTrain::has_basicreply() const {
  return _internal_has_basicreply();
}
inline void ReplyTrain::clear_basicreply() {
  if (GetArenaNoVirtual() == nullptr && basicreply_ != nullptr) {
    delete basicreply_;
  }
  basicreply_ = nullptr;
}
inline const ::tradingcore2pb::BasicReplyData& ReplyTrain::_internal_basicreply() const {
  const ::tradingcore2pb::BasicReplyData* p = basicreply_;
  return p != nullptr ? *p : *reinterpret_cast<const ::tradingcore2pb::BasicReplyData*>(
      &::tradingcore2pb::_BasicReplyData_default_instance_);
}
inline const ::tradingcore2pb::BasicReplyData& ReplyTrain::basicreply() const {
  // @@protoc_insertion_point(field_get:tradingcore2pb.ReplyTrain.basicReply)
  return _internal_basicreply();
}
inline ::tradingcore2pb::BasicReplyData* ReplyTrain::release_basicreply() {
  // @@protoc_insertion_point(field_release:tradingcore2pb.ReplyTrain.basicReply)
  
  ::tradingcore2pb::BasicReplyData* temp = basicreply_;
  basicreply_ = nullptr;
  return temp;
}
inline ::tradingcore2pb::BasicReplyData* ReplyTrain::_internal_mutable_basicreply() {
  
  if (basicreply_ == nullptr) {
    auto* p = CreateMaybeMessage<::tradingcore2pb::BasicReplyData>(GetArenaNoVirtual());
    basicreply_ = p;
  }
  return basicreply_;
}
inline ::tradingcore2pb::BasicReplyData* ReplyTrain::mutable_basicreply() {
  // @@protoc_insertion_point(field_mutable:tradingcore2pb.ReplyTrain.basicReply)
  return _internal_mutable_basicreply();
}
inline void ReplyTrain::set_allocated_basicreply(::tradingcore2pb::BasicReplyData* basicreply) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete basicreply_;
  }
  if (basicreply) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      basicreply = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, basicreply, submessage_arena);
    }
    
  } else {
    
  }
  basicreply_ = basicreply;
  // @@protoc_insertion_point(field_set_allocated:tradingcore2pb.ReplyTrain.basicReply)
}

// .tradingcore2pb.TrainResult train = 2;
inline bool ReplyTrain::_internal_has_train() const {
  return this != internal_default_instance() && train_ != nullptr;
}
inline bool ReplyTrain::has_train() const {
  return _internal_has_train();
}
inline void ReplyTrain::clear_train() {
  if (GetArenaNoVirtual() == nullptr && train_ != nullptr) {
    delete train_;
  }
  train_ = nullptr;
}
inline const ::tradingcore2pb::TrainResult& ReplyTrain::_internal_train() const {
  const ::tradingcore2pb::TrainResult* p = train_;
  return p != nullptr ? *p : *reinterpret_cast<const ::tradingcore2pb::TrainResult*>(
      &::tradingcore2pb::_TrainResult_default_instance_);
}
inline const ::tradingcore2pb::TrainResult& ReplyTrain::train() const {
  // @@protoc_insertion_point(field_get:tradingcore2pb.ReplyTrain.train)
  return _internal_train();
}
inline ::tradingcore2pb::TrainResult* ReplyTrain::release_train() {
  // @@protoc_insertion_point(field_release:tradingcore2pb.ReplyTrain.train)
  
  ::tradingcore2pb::TrainResult* temp = train_;
  train_ = nullptr;
  return temp;
}
inline ::tradingcore2pb::TrainResult* ReplyTrain::_internal_mutable_train() {
  
  if (train_ == nullptr) {
    auto* p = CreateMaybeMessage<::tradingcore2pb::TrainResult>(GetArenaNoVirtual());
    train_ = p;
  }
  return train_;
}
inline ::tradingcore2pb::TrainResult* ReplyTrain::mutable_train() {
  // @@protoc_insertion_point(field_mutable:tradingcore2pb.ReplyTrain.train)
  return _internal_mutable_train();
}
inline void ReplyTrain::set_allocated_train(::tradingcore2pb::TrainResult* train) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete train_;
  }
  if (train) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      train = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, train, submessage_arena);
    }
    
  } else {
    
  }
  train_ = train;
  // @@protoc_insertion_point(field_set_allocated:tradingcore2pb.ReplyTrain.train)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace tradingcore2pb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::tradingcore2pb::ErrorCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tradingcore2pb::ErrorCode>() {
  return ::tradingcore2pb::ErrorCode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tradingcore2_2eproto

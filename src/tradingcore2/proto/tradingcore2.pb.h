// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tradingcore2.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tradingcore2_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tradingcore2_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tradingcore2_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tradingcore2_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tradingcore2_2eproto;
namespace tradingcore2pb {
class TrainData;
class TrainDataDefaultTypeInternal;
extern TrainDataDefaultTypeInternal _TrainData_default_instance_;
class TrainResult;
class TrainResultDefaultTypeInternal;
extern TrainResultDefaultTypeInternal _TrainResult_default_instance_;
}  // namespace tradingcore2pb
PROTOBUF_NAMESPACE_OPEN
template<> ::tradingcore2pb::TrainData* Arena::CreateMaybeMessage<::tradingcore2pb::TrainData>(Arena*);
template<> ::tradingcore2pb::TrainResult* Arena::CreateMaybeMessage<::tradingcore2pb::TrainResult>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tradingcore2pb {

// ===================================================================

class TrainData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tradingcore2pb.TrainData) */ {
 public:
  TrainData();
  virtual ~TrainData();

  TrainData(const TrainData& from);
  TrainData(TrainData&& from) noexcept
    : TrainData() {
    *this = ::std::move(from);
  }

  inline TrainData& operator=(const TrainData& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrainData& operator=(TrainData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrainData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrainData* internal_default_instance() {
    return reinterpret_cast<const TrainData*>(
               &_TrainData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TrainData& a, TrainData& b) {
    a.Swap(&b);
  }
  inline void Swap(TrainData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrainData* New() const final {
    return CreateMaybeMessage<TrainData>(nullptr);
  }

  TrainData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrainData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrainData& from);
  void MergeFrom(const TrainData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrainData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tradingcore2pb.TrainData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tradingcore2_2eproto);
    return ::descriptor_table_tradingcore2_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExchangeNameFieldNumber = 2,
    kAssetsNameFieldNumber = 3,
    kStrategyNameFieldNumber = 4,
    kStrParamFieldNumber = 5,
    kTrainIDFieldNumber = 1,
  };
  // string exchangeName = 2;
  void clear_exchangename();
  const std::string& exchangename() const;
  void set_exchangename(const std::string& value);
  void set_exchangename(std::string&& value);
  void set_exchangename(const char* value);
  void set_exchangename(const char* value, size_t size);
  std::string* mutable_exchangename();
  std::string* release_exchangename();
  void set_allocated_exchangename(std::string* exchangename);
  private:
  const std::string& _internal_exchangename() const;
  void _internal_set_exchangename(const std::string& value);
  std::string* _internal_mutable_exchangename();
  public:

  // string assetsName = 3;
  void clear_assetsname();
  const std::string& assetsname() const;
  void set_assetsname(const std::string& value);
  void set_assetsname(std::string&& value);
  void set_assetsname(const char* value);
  void set_assetsname(const char* value, size_t size);
  std::string* mutable_assetsname();
  std::string* release_assetsname();
  void set_allocated_assetsname(std::string* assetsname);
  private:
  const std::string& _internal_assetsname() const;
  void _internal_set_assetsname(const std::string& value);
  std::string* _internal_mutable_assetsname();
  public:

  // string strategyName = 4;
  void clear_strategyname();
  const std::string& strategyname() const;
  void set_strategyname(const std::string& value);
  void set_strategyname(std::string&& value);
  void set_strategyname(const char* value);
  void set_strategyname(const char* value, size_t size);
  std::string* mutable_strategyname();
  std::string* release_strategyname();
  void set_allocated_strategyname(std::string* strategyname);
  private:
  const std::string& _internal_strategyname() const;
  void _internal_set_strategyname(const std::string& value);
  std::string* _internal_mutable_strategyname();
  public:

  // string strParam = 5;
  void clear_strparam();
  const std::string& strparam() const;
  void set_strparam(const std::string& value);
  void set_strparam(std::string&& value);
  void set_strparam(const char* value);
  void set_strparam(const char* value, size_t size);
  std::string* mutable_strparam();
  std::string* release_strparam();
  void set_allocated_strparam(std::string* strparam);
  private:
  const std::string& _internal_strparam() const;
  void _internal_set_strparam(const std::string& value);
  std::string* _internal_mutable_strparam();
  public:

  // int64 trainID = 1;
  void clear_trainid();
  ::PROTOBUF_NAMESPACE_ID::int64 trainid() const;
  void set_trainid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_trainid() const;
  void _internal_set_trainid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:tradingcore2pb.TrainData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exchangename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr assetsname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strategyname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strparam_;
  ::PROTOBUF_NAMESPACE_ID::int64 trainid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tradingcore2_2eproto;
};
// -------------------------------------------------------------------

class TrainResult :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tradingcore2pb.TrainResult) */ {
 public:
  TrainResult();
  virtual ~TrainResult();

  TrainResult(const TrainResult& from);
  TrainResult(TrainResult&& from) noexcept
    : TrainResult() {
    *this = ::std::move(from);
  }

  inline TrainResult& operator=(const TrainResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrainResult& operator=(TrainResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrainResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrainResult* internal_default_instance() {
    return reinterpret_cast<const TrainResult*>(
               &_TrainResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TrainResult& a, TrainResult& b) {
    a.Swap(&b);
  }
  inline void Swap(TrainResult* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrainResult* New() const final {
    return CreateMaybeMessage<TrainResult>(nullptr);
  }

  TrainResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrainResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrainResult& from);
  void MergeFrom(const TrainResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrainResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tradingcore2pb.TrainResult";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tradingcore2_2eproto);
    return ::descriptor_table_tradingcore2_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExchangeNameFieldNumber = 11,
    kAssetsNameFieldNumber = 12,
    kStrategyNameFieldNumber = 13,
    kStrParamFieldNumber = 14,
    kTrainIDFieldNumber = 1,
    kMaxDrawdownFieldNumber = 2,
    kSharpeFieldNumber = 3,
    kAnnualizedReturnsFieldNumber = 4,
    kAnnualizedVolatilityFieldNumber = 5,
    kTotalReturnsFieldNumber = 6,
    kTradingTimesFieldNumber = 7,
    kFailTimesFieldNumber = 8,
    kStoplossTimesFieldNumber = 9,
    kWinRateFieldNumber = 10,
  };
  // string exchangeName = 11;
  void clear_exchangename();
  const std::string& exchangename() const;
  void set_exchangename(const std::string& value);
  void set_exchangename(std::string&& value);
  void set_exchangename(const char* value);
  void set_exchangename(const char* value, size_t size);
  std::string* mutable_exchangename();
  std::string* release_exchangename();
  void set_allocated_exchangename(std::string* exchangename);
  private:
  const std::string& _internal_exchangename() const;
  void _internal_set_exchangename(const std::string& value);
  std::string* _internal_mutable_exchangename();
  public:

  // string assetsName = 12;
  void clear_assetsname();
  const std::string& assetsname() const;
  void set_assetsname(const std::string& value);
  void set_assetsname(std::string&& value);
  void set_assetsname(const char* value);
  void set_assetsname(const char* value, size_t size);
  std::string* mutable_assetsname();
  std::string* release_assetsname();
  void set_allocated_assetsname(std::string* assetsname);
  private:
  const std::string& _internal_assetsname() const;
  void _internal_set_assetsname(const std::string& value);
  std::string* _internal_mutable_assetsname();
  public:

  // string strategyName = 13;
  void clear_strategyname();
  const std::string& strategyname() const;
  void set_strategyname(const std::string& value);
  void set_strategyname(std::string&& value);
  void set_strategyname(const char* value);
  void set_strategyname(const char* value, size_t size);
  std::string* mutable_strategyname();
  std::string* release_strategyname();
  void set_allocated_strategyname(std::string* strategyname);
  private:
  const std::string& _internal_strategyname() const;
  void _internal_set_strategyname(const std::string& value);
  std::string* _internal_mutable_strategyname();
  public:

  // string strParam = 14;
  void clear_strparam();
  const std::string& strparam() const;
  void set_strparam(const std::string& value);
  void set_strparam(std::string&& value);
  void set_strparam(const char* value);
  void set_strparam(const char* value, size_t size);
  std::string* mutable_strparam();
  std::string* release_strparam();
  void set_allocated_strparam(std::string* strparam);
  private:
  const std::string& _internal_strparam() const;
  void _internal_set_strparam(const std::string& value);
  std::string* _internal_mutable_strparam();
  public:

  // int64 trainID = 1;
  void clear_trainid();
  ::PROTOBUF_NAMESPACE_ID::int64 trainid() const;
  void set_trainid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_trainid() const;
  void _internal_set_trainid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // float maxDrawdown = 2;
  void clear_maxdrawdown();
  float maxdrawdown() const;
  void set_maxdrawdown(float value);
  private:
  float _internal_maxdrawdown() const;
  void _internal_set_maxdrawdown(float value);
  public:

  // float sharpe = 3;
  void clear_sharpe();
  float sharpe() const;
  void set_sharpe(float value);
  private:
  float _internal_sharpe() const;
  void _internal_set_sharpe(float value);
  public:

  // float annualizedReturns = 4;
  void clear_annualizedreturns();
  float annualizedreturns() const;
  void set_annualizedreturns(float value);
  private:
  float _internal_annualizedreturns() const;
  void _internal_set_annualizedreturns(float value);
  public:

  // float annualizedVolatility = 5;
  void clear_annualizedvolatility();
  float annualizedvolatility() const;
  void set_annualizedvolatility(float value);
  private:
  float _internal_annualizedvolatility() const;
  void _internal_set_annualizedvolatility(float value);
  public:

  // float totalReturns = 6;
  void clear_totalreturns();
  float totalreturns() const;
  void set_totalreturns(float value);
  private:
  float _internal_totalreturns() const;
  void _internal_set_totalreturns(float value);
  public:

  // int32 tradingTimes = 7;
  void clear_tradingtimes();
  ::PROTOBUF_NAMESPACE_ID::int32 tradingtimes() const;
  void set_tradingtimes(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tradingtimes() const;
  void _internal_set_tradingtimes(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 failTimes = 8;
  void clear_failtimes();
  ::PROTOBUF_NAMESPACE_ID::int32 failtimes() const;
  void set_failtimes(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_failtimes() const;
  void _internal_set_failtimes(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 stoplossTimes = 9;
  void clear_stoplosstimes();
  ::PROTOBUF_NAMESPACE_ID::int32 stoplosstimes() const;
  void set_stoplosstimes(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_stoplosstimes() const;
  void _internal_set_stoplosstimes(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float winRate = 10;
  void clear_winrate();
  float winrate() const;
  void set_winrate(float value);
  private:
  float _internal_winrate() const;
  void _internal_set_winrate(float value);
  public:

  // @@protoc_insertion_point(class_scope:tradingcore2pb.TrainResult)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exchangename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr assetsname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strategyname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strparam_;
  ::PROTOBUF_NAMESPACE_ID::int64 trainid_;
  float maxdrawdown_;
  float sharpe_;
  float annualizedreturns_;
  float annualizedvolatility_;
  float totalreturns_;
  ::PROTOBUF_NAMESPACE_ID::int32 tradingtimes_;
  ::PROTOBUF_NAMESPACE_ID::int32 failtimes_;
  ::PROTOBUF_NAMESPACE_ID::int32 stoplosstimes_;
  float winrate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tradingcore2_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TrainData

// int64 trainID = 1;
inline void TrainData::clear_trainid() {
  trainid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TrainData::_internal_trainid() const {
  return trainid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TrainData::trainid() const {
  // @@protoc_insertion_point(field_get:tradingcore2pb.TrainData.trainID)
  return _internal_trainid();
}
inline void TrainData::_internal_set_trainid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  trainid_ = value;
}
inline void TrainData::set_trainid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_trainid(value);
  // @@protoc_insertion_point(field_set:tradingcore2pb.TrainData.trainID)
}

// string exchangeName = 2;
inline void TrainData::clear_exchangename() {
  exchangename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TrainData::exchangename() const {
  // @@protoc_insertion_point(field_get:tradingcore2pb.TrainData.exchangeName)
  return _internal_exchangename();
}
inline void TrainData::set_exchangename(const std::string& value) {
  _internal_set_exchangename(value);
  // @@protoc_insertion_point(field_set:tradingcore2pb.TrainData.exchangeName)
}
inline std::string* TrainData::mutable_exchangename() {
  // @@protoc_insertion_point(field_mutable:tradingcore2pb.TrainData.exchangeName)
  return _internal_mutable_exchangename();
}
inline const std::string& TrainData::_internal_exchangename() const {
  return exchangename_.GetNoArena();
}
inline void TrainData::_internal_set_exchangename(const std::string& value) {
  
  exchangename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TrainData::set_exchangename(std::string&& value) {
  
  exchangename_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tradingcore2pb.TrainData.exchangeName)
}
inline void TrainData::set_exchangename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  exchangename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tradingcore2pb.TrainData.exchangeName)
}
inline void TrainData::set_exchangename(const char* value, size_t size) {
  
  exchangename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tradingcore2pb.TrainData.exchangeName)
}
inline std::string* TrainData::_internal_mutable_exchangename() {
  
  return exchangename_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TrainData::release_exchangename() {
  // @@protoc_insertion_point(field_release:tradingcore2pb.TrainData.exchangeName)
  
  return exchangename_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TrainData::set_allocated_exchangename(std::string* exchangename) {
  if (exchangename != nullptr) {
    
  } else {
    
  }
  exchangename_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exchangename);
  // @@protoc_insertion_point(field_set_allocated:tradingcore2pb.TrainData.exchangeName)
}

// string assetsName = 3;
inline void TrainData::clear_assetsname() {
  assetsname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TrainData::assetsname() const {
  // @@protoc_insertion_point(field_get:tradingcore2pb.TrainData.assetsName)
  return _internal_assetsname();
}
inline void TrainData::set_assetsname(const std::string& value) {
  _internal_set_assetsname(value);
  // @@protoc_insertion_point(field_set:tradingcore2pb.TrainData.assetsName)
}
inline std::string* TrainData::mutable_assetsname() {
  // @@protoc_insertion_point(field_mutable:tradingcore2pb.TrainData.assetsName)
  return _internal_mutable_assetsname();
}
inline const std::string& TrainData::_internal_assetsname() const {
  return assetsname_.GetNoArena();
}
inline void TrainData::_internal_set_assetsname(const std::string& value) {
  
  assetsname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TrainData::set_assetsname(std::string&& value) {
  
  assetsname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tradingcore2pb.TrainData.assetsName)
}
inline void TrainData::set_assetsname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  assetsname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tradingcore2pb.TrainData.assetsName)
}
inline void TrainData::set_assetsname(const char* value, size_t size) {
  
  assetsname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tradingcore2pb.TrainData.assetsName)
}
inline std::string* TrainData::_internal_mutable_assetsname() {
  
  return assetsname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TrainData::release_assetsname() {
  // @@protoc_insertion_point(field_release:tradingcore2pb.TrainData.assetsName)
  
  return assetsname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TrainData::set_allocated_assetsname(std::string* assetsname) {
  if (assetsname != nullptr) {
    
  } else {
    
  }
  assetsname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), assetsname);
  // @@protoc_insertion_point(field_set_allocated:tradingcore2pb.TrainData.assetsName)
}

// string strategyName = 4;
inline void TrainData::clear_strategyname() {
  strategyname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TrainData::strategyname() const {
  // @@protoc_insertion_point(field_get:tradingcore2pb.TrainData.strategyName)
  return _internal_strategyname();
}
inline void TrainData::set_strategyname(const std::string& value) {
  _internal_set_strategyname(value);
  // @@protoc_insertion_point(field_set:tradingcore2pb.TrainData.strategyName)
}
inline std::string* TrainData::mutable_strategyname() {
  // @@protoc_insertion_point(field_mutable:tradingcore2pb.TrainData.strategyName)
  return _internal_mutable_strategyname();
}
inline const std::string& TrainData::_internal_strategyname() const {
  return strategyname_.GetNoArena();
}
inline void TrainData::_internal_set_strategyname(const std::string& value) {
  
  strategyname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TrainData::set_strategyname(std::string&& value) {
  
  strategyname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tradingcore2pb.TrainData.strategyName)
}
inline void TrainData::set_strategyname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  strategyname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tradingcore2pb.TrainData.strategyName)
}
inline void TrainData::set_strategyname(const char* value, size_t size) {
  
  strategyname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tradingcore2pb.TrainData.strategyName)
}
inline std::string* TrainData::_internal_mutable_strategyname() {
  
  return strategyname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TrainData::release_strategyname() {
  // @@protoc_insertion_point(field_release:tradingcore2pb.TrainData.strategyName)
  
  return strategyname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TrainData::set_allocated_strategyname(std::string* strategyname) {
  if (strategyname != nullptr) {
    
  } else {
    
  }
  strategyname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), strategyname);
  // @@protoc_insertion_point(field_set_allocated:tradingcore2pb.TrainData.strategyName)
}

// string strParam = 5;
inline void TrainData::clear_strparam() {
  strparam_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TrainData::strparam() const {
  // @@protoc_insertion_point(field_get:tradingcore2pb.TrainData.strParam)
  return _internal_strparam();
}
inline void TrainData::set_strparam(const std::string& value) {
  _internal_set_strparam(value);
  // @@protoc_insertion_point(field_set:tradingcore2pb.TrainData.strParam)
}
inline std::string* TrainData::mutable_strparam() {
  // @@protoc_insertion_point(field_mutable:tradingcore2pb.TrainData.strParam)
  return _internal_mutable_strparam();
}
inline const std::string& TrainData::_internal_strparam() const {
  return strparam_.GetNoArena();
}
inline void TrainData::_internal_set_strparam(const std::string& value) {
  
  strparam_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TrainData::set_strparam(std::string&& value) {
  
  strparam_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tradingcore2pb.TrainData.strParam)
}
inline void TrainData::set_strparam(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  strparam_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tradingcore2pb.TrainData.strParam)
}
inline void TrainData::set_strparam(const char* value, size_t size) {
  
  strparam_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tradingcore2pb.TrainData.strParam)
}
inline std::string* TrainData::_internal_mutable_strparam() {
  
  return strparam_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TrainData::release_strparam() {
  // @@protoc_insertion_point(field_release:tradingcore2pb.TrainData.strParam)
  
  return strparam_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TrainData::set_allocated_strparam(std::string* strparam) {
  if (strparam != nullptr) {
    
  } else {
    
  }
  strparam_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), strparam);
  // @@protoc_insertion_point(field_set_allocated:tradingcore2pb.TrainData.strParam)
}

// -------------------------------------------------------------------

// TrainResult

// int64 trainID = 1;
inline void TrainResult::clear_trainid() {
  trainid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TrainResult::_internal_trainid() const {
  return trainid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TrainResult::trainid() const {
  // @@protoc_insertion_point(field_get:tradingcore2pb.TrainResult.trainID)
  return _internal_trainid();
}
inline void TrainResult::_internal_set_trainid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  trainid_ = value;
}
inline void TrainResult::set_trainid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_trainid(value);
  // @@protoc_insertion_point(field_set:tradingcore2pb.TrainResult.trainID)
}

// float maxDrawdown = 2;
inline void TrainResult::clear_maxdrawdown() {
  maxdrawdown_ = 0;
}
inline float TrainResult::_internal_maxdrawdown() const {
  return maxdrawdown_;
}
inline float TrainResult::maxdrawdown() const {
  // @@protoc_insertion_point(field_get:tradingcore2pb.TrainResult.maxDrawdown)
  return _internal_maxdrawdown();
}
inline void TrainResult::_internal_set_maxdrawdown(float value) {
  
  maxdrawdown_ = value;
}
inline void TrainResult::set_maxdrawdown(float value) {
  _internal_set_maxdrawdown(value);
  // @@protoc_insertion_point(field_set:tradingcore2pb.TrainResult.maxDrawdown)
}

// float sharpe = 3;
inline void TrainResult::clear_sharpe() {
  sharpe_ = 0;
}
inline float TrainResult::_internal_sharpe() const {
  return sharpe_;
}
inline float TrainResult::sharpe() const {
  // @@protoc_insertion_point(field_get:tradingcore2pb.TrainResult.sharpe)
  return _internal_sharpe();
}
inline void TrainResult::_internal_set_sharpe(float value) {
  
  sharpe_ = value;
}
inline void TrainResult::set_sharpe(float value) {
  _internal_set_sharpe(value);
  // @@protoc_insertion_point(field_set:tradingcore2pb.TrainResult.sharpe)
}

// float annualizedReturns = 4;
inline void TrainResult::clear_annualizedreturns() {
  annualizedreturns_ = 0;
}
inline float TrainResult::_internal_annualizedreturns() const {
  return annualizedreturns_;
}
inline float TrainResult::annualizedreturns() const {
  // @@protoc_insertion_point(field_get:tradingcore2pb.TrainResult.annualizedReturns)
  return _internal_annualizedreturns();
}
inline void TrainResult::_internal_set_annualizedreturns(float value) {
  
  annualizedreturns_ = value;
}
inline void TrainResult::set_annualizedreturns(float value) {
  _internal_set_annualizedreturns(value);
  // @@protoc_insertion_point(field_set:tradingcore2pb.TrainResult.annualizedReturns)
}

// float annualizedVolatility = 5;
inline void TrainResult::clear_annualizedvolatility() {
  annualizedvolatility_ = 0;
}
inline float TrainResult::_internal_annualizedvolatility() const {
  return annualizedvolatility_;
}
inline float TrainResult::annualizedvolatility() const {
  // @@protoc_insertion_point(field_get:tradingcore2pb.TrainResult.annualizedVolatility)
  return _internal_annualizedvolatility();
}
inline void TrainResult::_internal_set_annualizedvolatility(float value) {
  
  annualizedvolatility_ = value;
}
inline void TrainResult::set_annualizedvolatility(float value) {
  _internal_set_annualizedvolatility(value);
  // @@protoc_insertion_point(field_set:tradingcore2pb.TrainResult.annualizedVolatility)
}

// float totalReturns = 6;
inline void TrainResult::clear_totalreturns() {
  totalreturns_ = 0;
}
inline float TrainResult::_internal_totalreturns() const {
  return totalreturns_;
}
inline float TrainResult::totalreturns() const {
  // @@protoc_insertion_point(field_get:tradingcore2pb.TrainResult.totalReturns)
  return _internal_totalreturns();
}
inline void TrainResult::_internal_set_totalreturns(float value) {
  
  totalreturns_ = value;
}
inline void TrainResult::set_totalreturns(float value) {
  _internal_set_totalreturns(value);
  // @@protoc_insertion_point(field_set:tradingcore2pb.TrainResult.totalReturns)
}

// int32 tradingTimes = 7;
inline void TrainResult::clear_tradingtimes() {
  tradingtimes_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrainResult::_internal_tradingtimes() const {
  return tradingtimes_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrainResult::tradingtimes() const {
  // @@protoc_insertion_point(field_get:tradingcore2pb.TrainResult.tradingTimes)
  return _internal_tradingtimes();
}
inline void TrainResult::_internal_set_tradingtimes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  tradingtimes_ = value;
}
inline void TrainResult::set_tradingtimes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tradingtimes(value);
  // @@protoc_insertion_point(field_set:tradingcore2pb.TrainResult.tradingTimes)
}

// int32 failTimes = 8;
inline void TrainResult::clear_failtimes() {
  failtimes_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrainResult::_internal_failtimes() const {
  return failtimes_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrainResult::failtimes() const {
  // @@protoc_insertion_point(field_get:tradingcore2pb.TrainResult.failTimes)
  return _internal_failtimes();
}
inline void TrainResult::_internal_set_failtimes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  failtimes_ = value;
}
inline void TrainResult::set_failtimes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_failtimes(value);
  // @@protoc_insertion_point(field_set:tradingcore2pb.TrainResult.failTimes)
}

// int32 stoplossTimes = 9;
inline void TrainResult::clear_stoplosstimes() {
  stoplosstimes_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrainResult::_internal_stoplosstimes() const {
  return stoplosstimes_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrainResult::stoplosstimes() const {
  // @@protoc_insertion_point(field_get:tradingcore2pb.TrainResult.stoplossTimes)
  return _internal_stoplosstimes();
}
inline void TrainResult::_internal_set_stoplosstimes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  stoplosstimes_ = value;
}
inline void TrainResult::set_stoplosstimes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_stoplosstimes(value);
  // @@protoc_insertion_point(field_set:tradingcore2pb.TrainResult.stoplossTimes)
}

// float winRate = 10;
inline void TrainResult::clear_winrate() {
  winrate_ = 0;
}
inline float TrainResult::_internal_winrate() const {
  return winrate_;
}
inline float TrainResult::winrate() const {
  // @@protoc_insertion_point(field_get:tradingcore2pb.TrainResult.winRate)
  return _internal_winrate();
}
inline void TrainResult::_internal_set_winrate(float value) {
  
  winrate_ = value;
}
inline void TrainResult::set_winrate(float value) {
  _internal_set_winrate(value);
  // @@protoc_insertion_point(field_set:tradingcore2pb.TrainResult.winRate)
}

// string exchangeName = 11;
inline void TrainResult::clear_exchangename() {
  exchangename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TrainResult::exchangename() const {
  // @@protoc_insertion_point(field_get:tradingcore2pb.TrainResult.exchangeName)
  return _internal_exchangename();
}
inline void TrainResult::set_exchangename(const std::string& value) {
  _internal_set_exchangename(value);
  // @@protoc_insertion_point(field_set:tradingcore2pb.TrainResult.exchangeName)
}
inline std::string* TrainResult::mutable_exchangename() {
  // @@protoc_insertion_point(field_mutable:tradingcore2pb.TrainResult.exchangeName)
  return _internal_mutable_exchangename();
}
inline const std::string& TrainResult::_internal_exchangename() const {
  return exchangename_.GetNoArena();
}
inline void TrainResult::_internal_set_exchangename(const std::string& value) {
  
  exchangename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TrainResult::set_exchangename(std::string&& value) {
  
  exchangename_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tradingcore2pb.TrainResult.exchangeName)
}
inline void TrainResult::set_exchangename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  exchangename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tradingcore2pb.TrainResult.exchangeName)
}
inline void TrainResult::set_exchangename(const char* value, size_t size) {
  
  exchangename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tradingcore2pb.TrainResult.exchangeName)
}
inline std::string* TrainResult::_internal_mutable_exchangename() {
  
  return exchangename_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TrainResult::release_exchangename() {
  // @@protoc_insertion_point(field_release:tradingcore2pb.TrainResult.exchangeName)
  
  return exchangename_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TrainResult::set_allocated_exchangename(std::string* exchangename) {
  if (exchangename != nullptr) {
    
  } else {
    
  }
  exchangename_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exchangename);
  // @@protoc_insertion_point(field_set_allocated:tradingcore2pb.TrainResult.exchangeName)
}

// string assetsName = 12;
inline void TrainResult::clear_assetsname() {
  assetsname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TrainResult::assetsname() const {
  // @@protoc_insertion_point(field_get:tradingcore2pb.TrainResult.assetsName)
  return _internal_assetsname();
}
inline void TrainResult::set_assetsname(const std::string& value) {
  _internal_set_assetsname(value);
  // @@protoc_insertion_point(field_set:tradingcore2pb.TrainResult.assetsName)
}
inline std::string* TrainResult::mutable_assetsname() {
  // @@protoc_insertion_point(field_mutable:tradingcore2pb.TrainResult.assetsName)
  return _internal_mutable_assetsname();
}
inline const std::string& TrainResult::_internal_assetsname() const {
  return assetsname_.GetNoArena();
}
inline void TrainResult::_internal_set_assetsname(const std::string& value) {
  
  assetsname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TrainResult::set_assetsname(std::string&& value) {
  
  assetsname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tradingcore2pb.TrainResult.assetsName)
}
inline void TrainResult::set_assetsname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  assetsname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tradingcore2pb.TrainResult.assetsName)
}
inline void TrainResult::set_assetsname(const char* value, size_t size) {
  
  assetsname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tradingcore2pb.TrainResult.assetsName)
}
inline std::string* TrainResult::_internal_mutable_assetsname() {
  
  return assetsname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TrainResult::release_assetsname() {
  // @@protoc_insertion_point(field_release:tradingcore2pb.TrainResult.assetsName)
  
  return assetsname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TrainResult::set_allocated_assetsname(std::string* assetsname) {
  if (assetsname != nullptr) {
    
  } else {
    
  }
  assetsname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), assetsname);
  // @@protoc_insertion_point(field_set_allocated:tradingcore2pb.TrainResult.assetsName)
}

// string strategyName = 13;
inline void TrainResult::clear_strategyname() {
  strategyname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TrainResult::strategyname() const {
  // @@protoc_insertion_point(field_get:tradingcore2pb.TrainResult.strategyName)
  return _internal_strategyname();
}
inline void TrainResult::set_strategyname(const std::string& value) {
  _internal_set_strategyname(value);
  // @@protoc_insertion_point(field_set:tradingcore2pb.TrainResult.strategyName)
}
inline std::string* TrainResult::mutable_strategyname() {
  // @@protoc_insertion_point(field_mutable:tradingcore2pb.TrainResult.strategyName)
  return _internal_mutable_strategyname();
}
inline const std::string& TrainResult::_internal_strategyname() const {
  return strategyname_.GetNoArena();
}
inline void TrainResult::_internal_set_strategyname(const std::string& value) {
  
  strategyname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TrainResult::set_strategyname(std::string&& value) {
  
  strategyname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tradingcore2pb.TrainResult.strategyName)
}
inline void TrainResult::set_strategyname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  strategyname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tradingcore2pb.TrainResult.strategyName)
}
inline void TrainResult::set_strategyname(const char* value, size_t size) {
  
  strategyname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tradingcore2pb.TrainResult.strategyName)
}
inline std::string* TrainResult::_internal_mutable_strategyname() {
  
  return strategyname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TrainResult::release_strategyname() {
  // @@protoc_insertion_point(field_release:tradingcore2pb.TrainResult.strategyName)
  
  return strategyname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TrainResult::set_allocated_strategyname(std::string* strategyname) {
  if (strategyname != nullptr) {
    
  } else {
    
  }
  strategyname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), strategyname);
  // @@protoc_insertion_point(field_set_allocated:tradingcore2pb.TrainResult.strategyName)
}

// string strParam = 14;
inline void TrainResult::clear_strparam() {
  strparam_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TrainResult::strparam() const {
  // @@protoc_insertion_point(field_get:tradingcore2pb.TrainResult.strParam)
  return _internal_strparam();
}
inline void TrainResult::set_strparam(const std::string& value) {
  _internal_set_strparam(value);
  // @@protoc_insertion_point(field_set:tradingcore2pb.TrainResult.strParam)
}
inline std::string* TrainResult::mutable_strparam() {
  // @@protoc_insertion_point(field_mutable:tradingcore2pb.TrainResult.strParam)
  return _internal_mutable_strparam();
}
inline const std::string& TrainResult::_internal_strparam() const {
  return strparam_.GetNoArena();
}
inline void TrainResult::_internal_set_strparam(const std::string& value) {
  
  strparam_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TrainResult::set_strparam(std::string&& value) {
  
  strparam_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tradingcore2pb.TrainResult.strParam)
}
inline void TrainResult::set_strparam(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  strparam_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tradingcore2pb.TrainResult.strParam)
}
inline void TrainResult::set_strparam(const char* value, size_t size) {
  
  strparam_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tradingcore2pb.TrainResult.strParam)
}
inline std::string* TrainResult::_internal_mutable_strparam() {
  
  return strparam_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TrainResult::release_strparam() {
  // @@protoc_insertion_point(field_release:tradingcore2pb.TrainResult.strParam)
  
  return strparam_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TrainResult::set_allocated_strparam(std::string* strparam) {
  if (strparam != nullptr) {
    
  } else {
    
  }
  strparam_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), strparam);
  // @@protoc_insertion_point(field_set_allocated:tradingcore2pb.TrainResult.strParam)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace tradingcore2pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tradingcore2_2eproto

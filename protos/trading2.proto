syntax = "proto3";
package tradingpb;
option go_package = "github.com/zhs007/tradingdb2/tradingpb";

// BasicRequestData - basic request data
message BasicRequestData {
    string token = 1;
}

// Asset - asset
message Asset {
    string market = 1;
    string code = 2;
    repeated string tags = 3;
}

enum CtrlType {
    CTRL_INIT = 0;
    CTRL_BUY = 1;
    CTRL_SELL = 2;
    CTRL_STOPLOSS = 3;
    CTRL_TAKEPROFIT = 4;
    CTRL_WITHDRAW = 5;
    CTRL_DEPOSIT = 6;
}

// CtrlNodeAssetInfo - asset infomation in control node
message CtrlNodeAssetInfo {
    double volume = 1;
    double cost = 2;
}

// CtrlNode - ctrl node
message CtrlNode {
    int64 ts = 1;
    Asset src = 2;
    Asset dst = 3;
    double volumeSrc = 4;
    double volumeDst = 5;
    CtrlType type = 6;
    double fee = 7;
    double averageHoldingPrice = 8;
    double sellPrice = 9;
    int32 ctrlConditionID = 10;                             // 用于多条件时，标记条件ID，条件ID是条件index + 1，0是无效值
    int32 strategyID = 11;                                  // 用于多策略时，标记策略ID，策略ID是策略index + 1，0是无效值
    double totalMoney = 12;                                 // 统计值，用于运算，当前时间节点总投入货币
    double lastMoney = 13;                                  // 统计值，用于运算，当前时间节点剩余未投入货币
    map<string, CtrlNodeAssetInfo> mapAssetsInfo = 14;      // 统计值，用于运算，当前时间节点资产数量和成本
}

// WalletAsset - wallet asset
message WalletAsset {
    Asset asset = 1;
    double value = 2;
}

// Wallet - wallet
message Wallet {
    repeated WalletAsset assets = 1;
}

// CtrlCondition - control condition
message CtrlCondition {
    string indicator = 1 [deprecated = true];           // 弃用，因为control condition不仅仅只有indicator，还有别的condition，所以换个名不至于引起歧义
    repeated float vals = 2;                            // 浮点数参数
    repeated string operators = 3;                      // 操作符，按道理应该和 vals 长度一样，大于小于等于
    string combCondition = 4;                           // 组合条件，如果有多个操作条件，这里是 与或，&& ||，这里没括号，所以没办法做特别复杂的判断，默认是 &&
    repeated float minvals = 5 [deprecated = true];     // 最初规划用来做穷举策略参数用的区间参数
    repeated float maxvals = 6 [deprecated = true];     // 最初规划用来做穷举策略参数用的区间参数
    repeated float offvals = 7 [deprecated = true];     // 最初规划用来做穷举策略参数用的区间参数的偏移量
    repeated string strVals = 8;                        // 字符串参数
    string name = 9;                                    // 实际的 Control Condition 类型，替代以前的 indicator
    int32 group = 10;                                   // 组，用来处理 (A&&B)||(C&&D) 这样的复杂判断，group之间只可能是或的关系
}

// IndicatorType - indicator类型
enum IndicatorType {
    IT_SINGLEVALUE = 0;
    IT_SINGLEPRICE = 1;
}

// IndicatorData - indicator data
message IndicatorData {
    repeated float vals = 1;
    int64 ts = 2;
}

message Indicator {
    string fullname = 1;                // It's like ema.5
    IndicatorType type = 2;
    repeated IndicatorData data = 3;
}

// BuyParams - buy parameters
message BuyParams {
    float initMoney = 1 [deprecated = true];    // 初始资金池
    float perMoney = 2 [deprecated = true];     // 每次用初始资金池的百分比来购买
    float volume = 3;                           // 每次买特定数量
    float aipMoney = 4;                         // 每次买特定金额，这个一般用于定投
    float perInitMoney = 5;                     // 使用初始资金池的一定比例购买
    float perHandMoney = 6;                     // 使用余额的一定比例购买
    float perTotalMoney = 7;                    // 使用总资金的一定比例购买
}

// SellParams - sell parameters
message SellParams {
    float volume = 1;
    float perVolume = 2;
    float money = 3;
    int64 keepTime = 4;             // 卖出这个时间以前的持有，秒为单位，如果是卖出1天以前的全部持有，应该就是 24*60*60 
}

// StopLossParams - stop loss parameters
message StopLossParams {
    float drawdown = 1;
}

// TakeProfitParams - take profit parameters
message TakeProfitParams {
    float profit = 1;
}

// InitParams - initial parameters
message InitParams {
    float money = 1;
    float vomume = 2;
}

// AIPTimeType - time type for automatic investment plan 
enum AIPTimeType {
    AIPTT_WEEKDAY = 0;
    AIPTT_MONTHDAY = 1;
}

// AIPParams - parameters for automatic investment plan
message AIPParams {
    float money = 1;
    AIPTimeType type = 2;
    int32 day = 3;
}

// Strategy - strategy
message Strategy {
    string name = 1;                            // strategy名，需要是服务器已经有实现的
    Asset asset = 2;                            // 针对的asset
    repeated CtrlCondition buy = 3;             // buy的条件
    repeated CtrlCondition sell = 4;            // sell的条件
    repeated CtrlCondition stoploss = 5;        // 止损的条件
    repeated CtrlCondition takeprofit = 6;      // 止盈的条件
    BuyParams paramsBuy = 7;                    // 买的参数
    SellParams paramsSell = 8;                  // 卖的参数
    StopLossParams paramsStopLoss = 9;          // 止损的参数
    TakeProfitParams paramsTakeProfit = 10;     // 止盈的参数
    InitParams paramsInit = 11;                 // 初始化的参数
    AIPParams paramsAIP = 12;                   // 定投参数
    string title = 13 [deprecated = true];      // 弃用了，title主要用途是能和返回的PNLData对应上，这里没办法一一对应
    repeated string indicators = 14;            // 需要得到的indicators数据
}

// PNLDataValue - 
message PNLDataValue {
    int64 ts = 1;               // 时间戳
    float perValue = 2;         // 盈亏比，应该等于 value / cost
    repeated string tags = 3;   // 标记，用来标记当前时间点下做了哪些操作，譬如 buy、sell 等，一个时间点可能做多个操作
    float cost = 4;             // 总成本
    float value = 5;            // 总价值
    float volume = 6;           // 如果是单资产，这里是拥有数量
    float price = 7;            // 如果是单资产，这里是当前资产价格
}

// PNLAssetData - asset data in PNL
message PNLAssetData {
    Asset asset = 1;                        // 资产，如果汇总策略应该有多个才对，待修改
    repeated PNLDataValue values = 2;       // 具体值
    float maxDrawdown = 3;                  // 最大回撤
    int64 maxDrawdownStartTs = 4;           // 最大回撤起点
    int64 maxDrawdownEndTs = 5;             // 最大回撤终点
    float maxDrawup = 6;                    // 最大盈余
    int64 maxDrawupStartTs = 7;             // 最大盈余起点
    int64 maxDrawupEndTs = 8;               // 最大盈余终点
    float sharpe = 9;                       // 夏普
    float annualizedReturns = 10;           // 年化
    float annualizedVolatility = 11;        // 年化波动率
    float totalReturns = 12;                // 总回报率
    float variance = 13;                    // 方差
    int32 buyTimes = 14;                    // 购买次数
    int32 sellTimes = 15;                   // 卖出次数
    int32 stoplossTimes = 16;               // 止损次数
    int64 maxUpDayTs = 17;                  // 最大单日涨幅时间
    float maxPerUpDay = 18;                 // 最大单日涨幅
    int64 maxDownDayTs = 19;                // 最大单日亏损时间
    float maxPerDownDay = 20;               // 最大单日亏损
    int64 maxUpWeekTs = 21;                 // 最大单周涨幅时间
    float maxPerUpWeek = 22;                // 最大单周涨幅
    int64 maxDownWeekTs = 23;               // 最大单周跌幅时间
    float maxPerDownWeek = 24;              // 最大单周跌幅
    int64 maxUpMonthTs = 25;                // 最大单月涨幅时间
    float maxPerUpMonth = 26;               // 最大单月涨幅
    int64 maxDownMonthTs = 27;              // 最大单月跌幅时间
    float maxPerDownMonth = 28;             // 最大单月跌幅
    int64 maxUpYearTs = 29;                 // 最大单年涨幅时间
    float maxPerUpYear = 30;                // 最大单年涨幅
    int64 maxDownYearTs = 31;               // 最大单年跌幅时间
    float maxPerDownYear = 32;              // 最大单年跌幅
    repeated CtrlNode lstCtrl = 33;         // 操作队列
    repeated Indicator indicators = 34;     // 请求的indicators
    int32 winTimes = 35;                    // 胜利次数，winTimes / (sellTimes + stoplossTimes) 就是胜率
}

// PNLData - 
message PNLData {
    string name = 1 [deprecated = true];                    // 弃用了，名字统一，用title
    PNLAssetData total = 2;
    repeated PNLAssetData assets = 3 [deprecated = true];
    string title = 4;                                       // 应该用 SimTradingParams 的 title 赋值，cache 读取后也需要
    int64 lastts = 5 [deprecated = true];                   // 弃用了，直接用 SimTradingCacheNode 里的 lastTs
}

// SimTradingParams - simTrading parameters
message SimTradingParams {
    repeated Asset assets = 1;
    repeated Asset baselines = 2 [deprecated = true];   // 弃用了，基线直接用单独的 SimTradingParams 来处理，更容易缓存一些
    int64 startTs = 3;
    int64 endTs = 4;
    repeated Strategy strategies = 5;
    Wallet wallet = 6;
    string title = 7;                                   // title，会重新设置到PNLData上
}

// TradingNodeInfo - trading node2 infomation
message TradingNodeInfo {
    int32 maxTasks = 1;
    int32 curTasks = 2;
}

// SimTradingCacheNode - 
message SimTradingCacheNode {
    SimTradingParams params = 1;
    string key = 2;
    int64 lastTs = 3;
}

// SimTradingCache - 
message SimTradingCache {
    repeated SimTradingCacheNode nodes = 1;
}